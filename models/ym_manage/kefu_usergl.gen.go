// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newKefuUsergl(db *gorm.DB, opts ...gen.DOOption) kefuUsergl {
	_kefuUsergl := kefuUsergl{}

	_kefuUsergl.kefuUserglDo.UseDB(db, opts...)
	_kefuUsergl.kefuUserglDo.UseModel(&model.KefuUsergl{})

	tableName := _kefuUsergl.kefuUserglDo.TableName()
	_kefuUsergl.ALL = field.NewAsterisk(tableName)
	_kefuUsergl.Kfid = field.NewUint32(tableName, "kfid")
	_kefuUsergl.UID = field.NewUint32(tableName, "uid")
	_kefuUsergl.Uname = field.NewString(tableName, "uname")

	_kefuUsergl.fillFieldMap()

	return _kefuUsergl
}

type kefuUsergl struct {
	kefuUserglDo

	ALL   field.Asterisk
	Kfid  field.Uint32
	UID   field.Uint32
	Uname field.String

	fieldMap map[string]field.Expr
}

func (k kefuUsergl) Table(newTableName string) *kefuUsergl {
	k.kefuUserglDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k kefuUsergl) As(alias string) *kefuUsergl {
	k.kefuUserglDo.DO = *(k.kefuUserglDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *kefuUsergl) updateTableName(table string) *kefuUsergl {
	k.ALL = field.NewAsterisk(table)
	k.Kfid = field.NewUint32(table, "kfid")
	k.UID = field.NewUint32(table, "uid")
	k.Uname = field.NewString(table, "uname")

	k.fillFieldMap()

	return k
}

func (k *kefuUsergl) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *kefuUsergl) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 3)
	k.fieldMap["kfid"] = k.Kfid
	k.fieldMap["uid"] = k.UID
	k.fieldMap["uname"] = k.Uname
}

func (k kefuUsergl) clone(db *gorm.DB) kefuUsergl {
	k.kefuUserglDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k kefuUsergl) replaceDB(db *gorm.DB) kefuUsergl {
	k.kefuUserglDo.ReplaceDB(db)
	return k
}

type kefuUserglDo struct{ gen.DO }

type IKefuUserglDo interface {
	gen.SubQuery
	Debug() IKefuUserglDo
	WithContext(ctx context.Context) IKefuUserglDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IKefuUserglDo
	WriteDB() IKefuUserglDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IKefuUserglDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IKefuUserglDo
	Not(conds ...gen.Condition) IKefuUserglDo
	Or(conds ...gen.Condition) IKefuUserglDo
	Select(conds ...field.Expr) IKefuUserglDo
	Where(conds ...gen.Condition) IKefuUserglDo
	Order(conds ...field.Expr) IKefuUserglDo
	Distinct(cols ...field.Expr) IKefuUserglDo
	Omit(cols ...field.Expr) IKefuUserglDo
	Join(table schema.Tabler, on ...field.Expr) IKefuUserglDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IKefuUserglDo
	RightJoin(table schema.Tabler, on ...field.Expr) IKefuUserglDo
	Group(cols ...field.Expr) IKefuUserglDo
	Having(conds ...gen.Condition) IKefuUserglDo
	Limit(limit int) IKefuUserglDo
	Offset(offset int) IKefuUserglDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IKefuUserglDo
	Unscoped() IKefuUserglDo
	Create(values ...*model.KefuUsergl) error
	CreateInBatches(values []*model.KefuUsergl, batchSize int) error
	Save(values ...*model.KefuUsergl) error
	First() (*model.KefuUsergl, error)
	Take() (*model.KefuUsergl, error)
	Last() (*model.KefuUsergl, error)
	Find() ([]*model.KefuUsergl, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KefuUsergl, err error)
	FindInBatches(result *[]*model.KefuUsergl, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.KefuUsergl) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IKefuUserglDo
	Assign(attrs ...field.AssignExpr) IKefuUserglDo
	Joins(fields ...field.RelationField) IKefuUserglDo
	Preload(fields ...field.RelationField) IKefuUserglDo
	FirstOrInit() (*model.KefuUsergl, error)
	FirstOrCreate() (*model.KefuUsergl, error)
	FindByPage(offset int, limit int) (result []*model.KefuUsergl, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IKefuUserglDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (k kefuUserglDo) Debug() IKefuUserglDo {
	return k.withDO(k.DO.Debug())
}

func (k kefuUserglDo) WithContext(ctx context.Context) IKefuUserglDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k kefuUserglDo) ReadDB() IKefuUserglDo {
	return k.Clauses(dbresolver.Read)
}

func (k kefuUserglDo) WriteDB() IKefuUserglDo {
	return k.Clauses(dbresolver.Write)
}

func (k kefuUserglDo) Session(config *gorm.Session) IKefuUserglDo {
	return k.withDO(k.DO.Session(config))
}

func (k kefuUserglDo) Clauses(conds ...clause.Expression) IKefuUserglDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k kefuUserglDo) Returning(value interface{}, columns ...string) IKefuUserglDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k kefuUserglDo) Not(conds ...gen.Condition) IKefuUserglDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k kefuUserglDo) Or(conds ...gen.Condition) IKefuUserglDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k kefuUserglDo) Select(conds ...field.Expr) IKefuUserglDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k kefuUserglDo) Where(conds ...gen.Condition) IKefuUserglDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k kefuUserglDo) Order(conds ...field.Expr) IKefuUserglDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k kefuUserglDo) Distinct(cols ...field.Expr) IKefuUserglDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k kefuUserglDo) Omit(cols ...field.Expr) IKefuUserglDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k kefuUserglDo) Join(table schema.Tabler, on ...field.Expr) IKefuUserglDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k kefuUserglDo) LeftJoin(table schema.Tabler, on ...field.Expr) IKefuUserglDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k kefuUserglDo) RightJoin(table schema.Tabler, on ...field.Expr) IKefuUserglDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k kefuUserglDo) Group(cols ...field.Expr) IKefuUserglDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k kefuUserglDo) Having(conds ...gen.Condition) IKefuUserglDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k kefuUserglDo) Limit(limit int) IKefuUserglDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k kefuUserglDo) Offset(offset int) IKefuUserglDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k kefuUserglDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IKefuUserglDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k kefuUserglDo) Unscoped() IKefuUserglDo {
	return k.withDO(k.DO.Unscoped())
}

func (k kefuUserglDo) Create(values ...*model.KefuUsergl) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k kefuUserglDo) CreateInBatches(values []*model.KefuUsergl, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k kefuUserglDo) Save(values ...*model.KefuUsergl) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k kefuUserglDo) First() (*model.KefuUsergl, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuUsergl), nil
	}
}

func (k kefuUserglDo) Take() (*model.KefuUsergl, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuUsergl), nil
	}
}

func (k kefuUserglDo) Last() (*model.KefuUsergl, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuUsergl), nil
	}
}

func (k kefuUserglDo) Find() ([]*model.KefuUsergl, error) {
	result, err := k.DO.Find()
	return result.([]*model.KefuUsergl), err
}

func (k kefuUserglDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KefuUsergl, err error) {
	buf := make([]*model.KefuUsergl, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k kefuUserglDo) FindInBatches(result *[]*model.KefuUsergl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k kefuUserglDo) Attrs(attrs ...field.AssignExpr) IKefuUserglDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k kefuUserglDo) Assign(attrs ...field.AssignExpr) IKefuUserglDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k kefuUserglDo) Joins(fields ...field.RelationField) IKefuUserglDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k kefuUserglDo) Preload(fields ...field.RelationField) IKefuUserglDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k kefuUserglDo) FirstOrInit() (*model.KefuUsergl, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuUsergl), nil
	}
}

func (k kefuUserglDo) FirstOrCreate() (*model.KefuUsergl, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuUsergl), nil
	}
}

func (k kefuUserglDo) FindByPage(offset int, limit int) (result []*model.KefuUsergl, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k kefuUserglDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k kefuUserglDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k kefuUserglDo) Delete(models ...*model.KefuUsergl) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *kefuUserglDo) withDO(do gen.Dao) *kefuUserglDo {
	k.DO = *do.(*gen.DO)
	return k
}
