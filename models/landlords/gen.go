// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package landlords

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	Config         *config
	Downcoinlog    *downcoinlog
	LogBaoming     *logBaoming
	LogBaomingSave *logBaomingSave
	LogTemp        *logTemp
	LogTotal       *logTotal
	Matchlog       *matchlog
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Config = &Q.Config
	Downcoinlog = &Q.Downcoinlog
	LogBaoming = &Q.LogBaoming
	LogBaomingSave = &Q.LogBaomingSave
	LogTemp = &Q.LogTemp
	LogTotal = &Q.LogTotal
	Matchlog = &Q.Matchlog
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Config:         newConfig(db, opts...),
		Downcoinlog:    newDowncoinlog(db, opts...),
		LogBaoming:     newLogBaoming(db, opts...),
		LogBaomingSave: newLogBaomingSave(db, opts...),
		LogTemp:        newLogTemp(db, opts...),
		LogTotal:       newLogTotal(db, opts...),
		Matchlog:       newMatchlog(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Config         config
	Downcoinlog    downcoinlog
	LogBaoming     logBaoming
	LogBaomingSave logBaomingSave
	LogTemp        logTemp
	LogTotal       logTotal
	Matchlog       matchlog
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Config:         q.Config.clone(db),
		Downcoinlog:    q.Downcoinlog.clone(db),
		LogBaoming:     q.LogBaoming.clone(db),
		LogBaomingSave: q.LogBaomingSave.clone(db),
		LogTemp:        q.LogTemp.clone(db),
		LogTotal:       q.LogTotal.clone(db),
		Matchlog:       q.Matchlog.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Config:         q.Config.replaceDB(db),
		Downcoinlog:    q.Downcoinlog.replaceDB(db),
		LogBaoming:     q.LogBaoming.replaceDB(db),
		LogBaomingSave: q.LogBaomingSave.replaceDB(db),
		LogTemp:        q.LogTemp.replaceDB(db),
		LogTotal:       q.LogTotal.replaceDB(db),
		Matchlog:       q.Matchlog.replaceDB(db),
	}
}

type queryCtx struct {
	Config         IConfigDo
	Downcoinlog    IDowncoinlogDo
	LogBaoming     ILogBaomingDo
	LogBaomingSave ILogBaomingSaveDo
	LogTemp        ILogTempDo
	LogTotal       ILogTotalDo
	Matchlog       IMatchlogDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Config:         q.Config.WithContext(ctx),
		Downcoinlog:    q.Downcoinlog.WithContext(ctx),
		LogBaoming:     q.LogBaoming.WithContext(ctx),
		LogBaomingSave: q.LogBaomingSave.WithContext(ctx),
		LogTemp:        q.LogTemp.WithContext(ctx),
		LogTotal:       q.LogTotal.WithContext(ctx),
		Matchlog:       q.Matchlog.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
