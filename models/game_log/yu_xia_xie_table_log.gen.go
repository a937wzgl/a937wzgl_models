// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package game_log

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newYuXiaXieTableLog(db *gorm.DB, opts ...gen.DOOption) yuXiaXieTableLog {
	_yuXiaXieTableLog := yuXiaXieTableLog{}

	_yuXiaXieTableLog.yuXiaXieTableLogDo.UseDB(db, opts...)
	_yuXiaXieTableLog.yuXiaXieTableLogDo.UseModel(&model.YuXiaXieTableLog{})

	tableName := _yuXiaXieTableLog.yuXiaXieTableLogDo.TableName()
	_yuXiaXieTableLog.ALL = field.NewAsterisk(tableName)
	_yuXiaXieTableLog.ID = field.NewInt64(tableName, "id")
	_yuXiaXieTableLog.UserID = field.NewInt32(tableName, "user_id")
	_yuXiaXieTableLog.TableDict = field.NewString(tableName, "table_dict")
	_yuXiaXieTableLog.AddDate = field.NewTime(tableName, "add_date")

	_yuXiaXieTableLog.fillFieldMap()

	return _yuXiaXieTableLog
}

type yuXiaXieTableLog struct {
	yuXiaXieTableLogDo

	ALL       field.Asterisk
	ID        field.Int64
	UserID    field.Int32  // 用户id
	TableDict field.String // 桌子内游戏信息
	AddDate   field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (y yuXiaXieTableLog) Table(newTableName string) *yuXiaXieTableLog {
	y.yuXiaXieTableLogDo.UseTable(newTableName)
	return y.updateTableName(newTableName)
}

func (y yuXiaXieTableLog) As(alias string) *yuXiaXieTableLog {
	y.yuXiaXieTableLogDo.DO = *(y.yuXiaXieTableLogDo.As(alias).(*gen.DO))
	return y.updateTableName(alias)
}

func (y *yuXiaXieTableLog) updateTableName(table string) *yuXiaXieTableLog {
	y.ALL = field.NewAsterisk(table)
	y.ID = field.NewInt64(table, "id")
	y.UserID = field.NewInt32(table, "user_id")
	y.TableDict = field.NewString(table, "table_dict")
	y.AddDate = field.NewTime(table, "add_date")

	y.fillFieldMap()

	return y
}

func (y *yuXiaXieTableLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := y.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (y *yuXiaXieTableLog) fillFieldMap() {
	y.fieldMap = make(map[string]field.Expr, 4)
	y.fieldMap["id"] = y.ID
	y.fieldMap["user_id"] = y.UserID
	y.fieldMap["table_dict"] = y.TableDict
	y.fieldMap["add_date"] = y.AddDate
}

func (y yuXiaXieTableLog) clone(db *gorm.DB) yuXiaXieTableLog {
	y.yuXiaXieTableLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return y
}

func (y yuXiaXieTableLog) replaceDB(db *gorm.DB) yuXiaXieTableLog {
	y.yuXiaXieTableLogDo.ReplaceDB(db)
	return y
}

type yuXiaXieTableLogDo struct{ gen.DO }

type IYuXiaXieTableLogDo interface {
	gen.SubQuery
	Debug() IYuXiaXieTableLogDo
	WithContext(ctx context.Context) IYuXiaXieTableLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IYuXiaXieTableLogDo
	WriteDB() IYuXiaXieTableLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IYuXiaXieTableLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IYuXiaXieTableLogDo
	Not(conds ...gen.Condition) IYuXiaXieTableLogDo
	Or(conds ...gen.Condition) IYuXiaXieTableLogDo
	Select(conds ...field.Expr) IYuXiaXieTableLogDo
	Where(conds ...gen.Condition) IYuXiaXieTableLogDo
	Order(conds ...field.Expr) IYuXiaXieTableLogDo
	Distinct(cols ...field.Expr) IYuXiaXieTableLogDo
	Omit(cols ...field.Expr) IYuXiaXieTableLogDo
	Join(table schema.Tabler, on ...field.Expr) IYuXiaXieTableLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IYuXiaXieTableLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IYuXiaXieTableLogDo
	Group(cols ...field.Expr) IYuXiaXieTableLogDo
	Having(conds ...gen.Condition) IYuXiaXieTableLogDo
	Limit(limit int) IYuXiaXieTableLogDo
	Offset(offset int) IYuXiaXieTableLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IYuXiaXieTableLogDo
	Unscoped() IYuXiaXieTableLogDo
	Create(values ...*model.YuXiaXieTableLog) error
	CreateInBatches(values []*model.YuXiaXieTableLog, batchSize int) error
	Save(values ...*model.YuXiaXieTableLog) error
	First() (*model.YuXiaXieTableLog, error)
	Take() (*model.YuXiaXieTableLog, error)
	Last() (*model.YuXiaXieTableLog, error)
	Find() ([]*model.YuXiaXieTableLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YuXiaXieTableLog, err error)
	FindInBatches(result *[]*model.YuXiaXieTableLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.YuXiaXieTableLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IYuXiaXieTableLogDo
	Assign(attrs ...field.AssignExpr) IYuXiaXieTableLogDo
	Joins(fields ...field.RelationField) IYuXiaXieTableLogDo
	Preload(fields ...field.RelationField) IYuXiaXieTableLogDo
	FirstOrInit() (*model.YuXiaXieTableLog, error)
	FirstOrCreate() (*model.YuXiaXieTableLog, error)
	FindByPage(offset int, limit int) (result []*model.YuXiaXieTableLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IYuXiaXieTableLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (y yuXiaXieTableLogDo) Debug() IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Debug())
}

func (y yuXiaXieTableLogDo) WithContext(ctx context.Context) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.WithContext(ctx))
}

func (y yuXiaXieTableLogDo) ReadDB() IYuXiaXieTableLogDo {
	return y.Clauses(dbresolver.Read)
}

func (y yuXiaXieTableLogDo) WriteDB() IYuXiaXieTableLogDo {
	return y.Clauses(dbresolver.Write)
}

func (y yuXiaXieTableLogDo) Session(config *gorm.Session) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Session(config))
}

func (y yuXiaXieTableLogDo) Clauses(conds ...clause.Expression) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Clauses(conds...))
}

func (y yuXiaXieTableLogDo) Returning(value interface{}, columns ...string) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Returning(value, columns...))
}

func (y yuXiaXieTableLogDo) Not(conds ...gen.Condition) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Not(conds...))
}

func (y yuXiaXieTableLogDo) Or(conds ...gen.Condition) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Or(conds...))
}

func (y yuXiaXieTableLogDo) Select(conds ...field.Expr) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Select(conds...))
}

func (y yuXiaXieTableLogDo) Where(conds ...gen.Condition) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Where(conds...))
}

func (y yuXiaXieTableLogDo) Order(conds ...field.Expr) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Order(conds...))
}

func (y yuXiaXieTableLogDo) Distinct(cols ...field.Expr) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Distinct(cols...))
}

func (y yuXiaXieTableLogDo) Omit(cols ...field.Expr) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Omit(cols...))
}

func (y yuXiaXieTableLogDo) Join(table schema.Tabler, on ...field.Expr) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Join(table, on...))
}

func (y yuXiaXieTableLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.LeftJoin(table, on...))
}

func (y yuXiaXieTableLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.RightJoin(table, on...))
}

func (y yuXiaXieTableLogDo) Group(cols ...field.Expr) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Group(cols...))
}

func (y yuXiaXieTableLogDo) Having(conds ...gen.Condition) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Having(conds...))
}

func (y yuXiaXieTableLogDo) Limit(limit int) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Limit(limit))
}

func (y yuXiaXieTableLogDo) Offset(offset int) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Offset(offset))
}

func (y yuXiaXieTableLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Scopes(funcs...))
}

func (y yuXiaXieTableLogDo) Unscoped() IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Unscoped())
}

func (y yuXiaXieTableLogDo) Create(values ...*model.YuXiaXieTableLog) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Create(values)
}

func (y yuXiaXieTableLogDo) CreateInBatches(values []*model.YuXiaXieTableLog, batchSize int) error {
	return y.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (y yuXiaXieTableLogDo) Save(values ...*model.YuXiaXieTableLog) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Save(values)
}

func (y yuXiaXieTableLogDo) First() (*model.YuXiaXieTableLog, error) {
	if result, err := y.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.YuXiaXieTableLog), nil
	}
}

func (y yuXiaXieTableLogDo) Take() (*model.YuXiaXieTableLog, error) {
	if result, err := y.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.YuXiaXieTableLog), nil
	}
}

func (y yuXiaXieTableLogDo) Last() (*model.YuXiaXieTableLog, error) {
	if result, err := y.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.YuXiaXieTableLog), nil
	}
}

func (y yuXiaXieTableLogDo) Find() ([]*model.YuXiaXieTableLog, error) {
	result, err := y.DO.Find()
	return result.([]*model.YuXiaXieTableLog), err
}

func (y yuXiaXieTableLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YuXiaXieTableLog, err error) {
	buf := make([]*model.YuXiaXieTableLog, 0, batchSize)
	err = y.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (y yuXiaXieTableLogDo) FindInBatches(result *[]*model.YuXiaXieTableLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return y.DO.FindInBatches(result, batchSize, fc)
}

func (y yuXiaXieTableLogDo) Attrs(attrs ...field.AssignExpr) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Attrs(attrs...))
}

func (y yuXiaXieTableLogDo) Assign(attrs ...field.AssignExpr) IYuXiaXieTableLogDo {
	return y.withDO(y.DO.Assign(attrs...))
}

func (y yuXiaXieTableLogDo) Joins(fields ...field.RelationField) IYuXiaXieTableLogDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Joins(_f))
	}
	return &y
}

func (y yuXiaXieTableLogDo) Preload(fields ...field.RelationField) IYuXiaXieTableLogDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Preload(_f))
	}
	return &y
}

func (y yuXiaXieTableLogDo) FirstOrInit() (*model.YuXiaXieTableLog, error) {
	if result, err := y.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.YuXiaXieTableLog), nil
	}
}

func (y yuXiaXieTableLogDo) FirstOrCreate() (*model.YuXiaXieTableLog, error) {
	if result, err := y.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.YuXiaXieTableLog), nil
	}
}

func (y yuXiaXieTableLogDo) FindByPage(offset int, limit int) (result []*model.YuXiaXieTableLog, count int64, err error) {
	result, err = y.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = y.Offset(-1).Limit(-1).Count()
	return
}

func (y yuXiaXieTableLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = y.Count()
	if err != nil {
		return
	}

	err = y.Offset(offset).Limit(limit).Scan(result)
	return
}

func (y yuXiaXieTableLogDo) Scan(result interface{}) (err error) {
	return y.DO.Scan(result)
}

func (y yuXiaXieTableLogDo) Delete(models ...*model.YuXiaXieTableLog) (result gen.ResultInfo, err error) {
	return y.DO.Delete(models)
}

func (y *yuXiaXieTableLogDo) withDO(do gen.Dao) *yuXiaXieTableLogDo {
	y.DO = *do.(*gen.DO)
	return y
}
