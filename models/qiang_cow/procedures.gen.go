// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package procedures

import (
	"context"
	"database/sql"
	"fmt"
	"gorm.io/gorm"
)

// ProcedureCaller 存储过程调用器
type ProcedureCaller struct {
	db *gorm.DB
}

// NewProcedureCaller 创建存储过程调用器
func NewProcedureCaller(db *gorm.DB) *ProcedureCaller {
	return &ProcedureCaller{db: db}
}

// Addmatch 调用存储过程 addMatch
func (pc *ProcedureCaller) Addmatch(ctx context.Context) error {
	return pc.db.WithContext(ctx).Exec("CALL addMatch()").Error
}

// AddmatchWithResult 调用存储过程 addMatch 并返回结果
func (pc *ProcedureCaller) AddmatchWithResult(ctx context.Context) ([]map[string]interface{}, error) {
	var results []map[string]interface{}
	rows, err := pc.db.WithContext(ctx).Raw("CALL addMatch()").Rows()
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	columns, err := rows.Columns()
	if err != nil {
		return nil, err
	}

	for rows.Next() {
		values := make([]interface{}, len(columns))
		scanArgs := make([]interface{}, len(values))
		for i := range values {
			scanArgs[i] = &values[i]
		}

		err = rows.Scan(scanArgs...)
		if err != nil {
			return nil, err
		}

		row := make(map[string]interface{})
		for i, col := range columns {
			row[col] = values[i]
		}
		results = append(results, row)
	}

	return results, nil
}

// Downcoinlog 调用存储过程 downcoinlog
func (pc *ProcedureCaller) Downcoinlog(ctx context.Context) error {
	return pc.db.WithContext(ctx).Exec("CALL downcoinlog()").Error
}

// DowncoinlogWithResult 调用存储过程 downcoinlog 并返回结果
func (pc *ProcedureCaller) DowncoinlogWithResult(ctx context.Context) ([]map[string]interface{}, error) {
	var results []map[string]interface{}
	rows, err := pc.db.WithContext(ctx).Raw("CALL downcoinlog()").Rows()
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	columns, err := rows.Columns()
	if err != nil {
		return nil, err
	}

	for rows.Next() {
		values := make([]interface{}, len(columns))
		scanArgs := make([]interface{}, len(values))
		for i := range values {
			scanArgs[i] = &values[i]
		}

		err = rows.Scan(scanArgs...)
		if err != nil {
			return nil, err
		}

		row := make(map[string]interface{})
		for i, col := range columns {
			row[col] = values[i]
		}
		results = append(results, row)
	}

	return results, nil
}

// Transaction 执行事务中的存储过程
func (pc *ProcedureCaller) Transaction(fc func(tx *ProcedureCaller) error, opts ...*sql.TxOptions) error {
	return pc.db.Transaction(func(tx *gorm.DB) error {
		return fc(NewProcedureCaller(tx))
	}, opts...)
}

// WithContext 设置上下文
func (pc *ProcedureCaller) WithContext(ctx context.Context) *ProcedureCaller {
	return &ProcedureCaller{db: pc.db.WithContext(ctx)}
}
