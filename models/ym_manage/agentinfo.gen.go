// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newAgentinfo(db *gorm.DB, opts ...gen.DOOption) agentinfo {
	_agentinfo := agentinfo{}

	_agentinfo.agentinfoDo.UseDB(db, opts...)
	_agentinfo.agentinfoDo.UseModel(&model.Agentinfo{})

	tableName := _agentinfo.agentinfoDo.TableName()
	_agentinfo.ALL = field.NewAsterisk(tableName)
	_agentinfo.Aid = field.NewUint32(tableName, "aid")
	_agentinfo.Level = field.NewUint32(tableName, "level")
	_agentinfo.Yqcode = field.NewString(tableName, "yqcode")
	_agentinfo.Name = field.NewString(tableName, "name")
	_agentinfo.Wxname = field.NewString(tableName, "wxname")
	_agentinfo.Mobile = field.NewString(tableName, "mobile")
	_agentinfo.Createtime = field.NewString(tableName, "createtime")
	_agentinfo.Pid = field.NewUint32(tableName, "pid")
	_agentinfo.UID = field.NewUint32(tableName, "uid")
	_agentinfo.Commission = field.NewFloat64(tableName, "commission")
	_agentinfo.Score = field.NewUint64(tableName, "score")

	_agentinfo.fillFieldMap()

	return _agentinfo
}

type agentinfo struct {
	agentinfoDo

	ALL        field.Asterisk
	Aid        field.Uint32 // admin ID
	Level      field.Uint32
	Yqcode     field.String
	Name       field.String
	Wxname     field.String
	Mobile     field.String
	Createtime field.String
	Pid        field.Uint32 // 上级代理ID
	UID        field.Uint32 // 玩家ID
	Commission field.Float64
	Score      field.Uint64

	fieldMap map[string]field.Expr
}

func (a agentinfo) Table(newTableName string) *agentinfo {
	a.agentinfoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentinfo) As(alias string) *agentinfo {
	a.agentinfoDo.DO = *(a.agentinfoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentinfo) updateTableName(table string) *agentinfo {
	a.ALL = field.NewAsterisk(table)
	a.Aid = field.NewUint32(table, "aid")
	a.Level = field.NewUint32(table, "level")
	a.Yqcode = field.NewString(table, "yqcode")
	a.Name = field.NewString(table, "name")
	a.Wxname = field.NewString(table, "wxname")
	a.Mobile = field.NewString(table, "mobile")
	a.Createtime = field.NewString(table, "createtime")
	a.Pid = field.NewUint32(table, "pid")
	a.UID = field.NewUint32(table, "uid")
	a.Commission = field.NewFloat64(table, "commission")
	a.Score = field.NewUint64(table, "score")

	a.fillFieldMap()

	return a
}

func (a *agentinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentinfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["aid"] = a.Aid
	a.fieldMap["level"] = a.Level
	a.fieldMap["yqcode"] = a.Yqcode
	a.fieldMap["name"] = a.Name
	a.fieldMap["wxname"] = a.Wxname
	a.fieldMap["mobile"] = a.Mobile
	a.fieldMap["createtime"] = a.Createtime
	a.fieldMap["pid"] = a.Pid
	a.fieldMap["uid"] = a.UID
	a.fieldMap["commission"] = a.Commission
	a.fieldMap["score"] = a.Score
}

func (a agentinfo) clone(db *gorm.DB) agentinfo {
	a.agentinfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentinfo) replaceDB(db *gorm.DB) agentinfo {
	a.agentinfoDo.ReplaceDB(db)
	return a
}

type agentinfoDo struct{ gen.DO }

type IAgentinfoDo interface {
	gen.SubQuery
	Debug() IAgentinfoDo
	WithContext(ctx context.Context) IAgentinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentinfoDo
	WriteDB() IAgentinfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentinfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentinfoDo
	Not(conds ...gen.Condition) IAgentinfoDo
	Or(conds ...gen.Condition) IAgentinfoDo
	Select(conds ...field.Expr) IAgentinfoDo
	Where(conds ...gen.Condition) IAgentinfoDo
	Order(conds ...field.Expr) IAgentinfoDo
	Distinct(cols ...field.Expr) IAgentinfoDo
	Omit(cols ...field.Expr) IAgentinfoDo
	Join(table schema.Tabler, on ...field.Expr) IAgentinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentinfoDo
	Group(cols ...field.Expr) IAgentinfoDo
	Having(conds ...gen.Condition) IAgentinfoDo
	Limit(limit int) IAgentinfoDo
	Offset(offset int) IAgentinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentinfoDo
	Unscoped() IAgentinfoDo
	Create(values ...*model.Agentinfo) error
	CreateInBatches(values []*model.Agentinfo, batchSize int) error
	Save(values ...*model.Agentinfo) error
	First() (*model.Agentinfo, error)
	Take() (*model.Agentinfo, error)
	Last() (*model.Agentinfo, error)
	Find() ([]*model.Agentinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Agentinfo, err error)
	FindInBatches(result *[]*model.Agentinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Agentinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentinfoDo
	Assign(attrs ...field.AssignExpr) IAgentinfoDo
	Joins(fields ...field.RelationField) IAgentinfoDo
	Preload(fields ...field.RelationField) IAgentinfoDo
	FirstOrInit() (*model.Agentinfo, error)
	FirstOrCreate() (*model.Agentinfo, error)
	FindByPage(offset int, limit int) (result []*model.Agentinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentinfoDo) Debug() IAgentinfoDo {
	return a.withDO(a.DO.Debug())
}

func (a agentinfoDo) WithContext(ctx context.Context) IAgentinfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentinfoDo) ReadDB() IAgentinfoDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentinfoDo) WriteDB() IAgentinfoDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentinfoDo) Session(config *gorm.Session) IAgentinfoDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentinfoDo) Clauses(conds ...clause.Expression) IAgentinfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentinfoDo) Returning(value interface{}, columns ...string) IAgentinfoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentinfoDo) Not(conds ...gen.Condition) IAgentinfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentinfoDo) Or(conds ...gen.Condition) IAgentinfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentinfoDo) Select(conds ...field.Expr) IAgentinfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentinfoDo) Where(conds ...gen.Condition) IAgentinfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentinfoDo) Order(conds ...field.Expr) IAgentinfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentinfoDo) Distinct(cols ...field.Expr) IAgentinfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentinfoDo) Omit(cols ...field.Expr) IAgentinfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentinfoDo) Join(table schema.Tabler, on ...field.Expr) IAgentinfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentinfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentinfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentinfoDo) Group(cols ...field.Expr) IAgentinfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentinfoDo) Having(conds ...gen.Condition) IAgentinfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentinfoDo) Limit(limit int) IAgentinfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentinfoDo) Offset(offset int) IAgentinfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentinfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentinfoDo) Unscoped() IAgentinfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentinfoDo) Create(values ...*model.Agentinfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentinfoDo) CreateInBatches(values []*model.Agentinfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentinfoDo) Save(values ...*model.Agentinfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentinfoDo) First() (*model.Agentinfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Agentinfo), nil
	}
}

func (a agentinfoDo) Take() (*model.Agentinfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Agentinfo), nil
	}
}

func (a agentinfoDo) Last() (*model.Agentinfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Agentinfo), nil
	}
}

func (a agentinfoDo) Find() ([]*model.Agentinfo, error) {
	result, err := a.DO.Find()
	return result.([]*model.Agentinfo), err
}

func (a agentinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Agentinfo, err error) {
	buf := make([]*model.Agentinfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentinfoDo) FindInBatches(result *[]*model.Agentinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentinfoDo) Attrs(attrs ...field.AssignExpr) IAgentinfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentinfoDo) Assign(attrs ...field.AssignExpr) IAgentinfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentinfoDo) Joins(fields ...field.RelationField) IAgentinfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentinfoDo) Preload(fields ...field.RelationField) IAgentinfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentinfoDo) FirstOrInit() (*model.Agentinfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Agentinfo), nil
	}
}

func (a agentinfoDo) FirstOrCreate() (*model.Agentinfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Agentinfo), nil
	}
}

func (a agentinfoDo) FindByPage(offset int, limit int) (result []*model.Agentinfo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentinfoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentinfoDo) Delete(models ...*model.Agentinfo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentinfoDo) withDO(do gen.Dao) *agentinfoDo {
	a.DO = *do.(*gen.DO)
	return a
}
