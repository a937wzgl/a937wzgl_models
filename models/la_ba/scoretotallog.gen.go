// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package la_ba

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newScoretotallog(db *gorm.DB, opts ...gen.DOOption) scoretotallog {
	_scoretotallog := scoretotallog{}

	_scoretotallog.scoretotallogDo.UseDB(db, opts...)
	_scoretotallog.scoretotallogDo.UseModel(&model.Scoretotallog{})

	tableName := _scoretotallog.scoretotallogDo.TableName()
	_scoretotallog.ALL = field.NewAsterisk(tableName)
	_scoretotallog.ID = field.NewInt32(tableName, "id")
	_scoretotallog.ServeID = field.NewInt32(tableName, "serve_id")
	_scoretotallog.Winscore = field.NewFloat32(tableName, "winscore")
	_scoretotallog.LotteryCount = field.NewInt32(tableName, "lotteryCount")
	_scoretotallog.CreateTime = field.NewTime(tableName, "CreateTime")

	_scoretotallog.fillFieldMap()

	return _scoretotallog
}

type scoretotallog struct {
	scoretotallogDo

	ALL          field.Asterisk
	ID           field.Int32
	ServeID      field.Int32
	Winscore     field.Float32
	LotteryCount field.Int32
	CreateTime   field.Time

	fieldMap map[string]field.Expr
}

func (s scoretotallog) Table(newTableName string) *scoretotallog {
	s.scoretotallogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scoretotallog) As(alias string) *scoretotallog {
	s.scoretotallogDo.DO = *(s.scoretotallogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scoretotallog) updateTableName(table string) *scoretotallog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.ServeID = field.NewInt32(table, "serve_id")
	s.Winscore = field.NewFloat32(table, "winscore")
	s.LotteryCount = field.NewInt32(table, "lotteryCount")
	s.CreateTime = field.NewTime(table, "CreateTime")

	s.fillFieldMap()

	return s
}

func (s *scoretotallog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scoretotallog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["serve_id"] = s.ServeID
	s.fieldMap["winscore"] = s.Winscore
	s.fieldMap["lotteryCount"] = s.LotteryCount
	s.fieldMap["CreateTime"] = s.CreateTime
}

func (s scoretotallog) clone(db *gorm.DB) scoretotallog {
	s.scoretotallogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scoretotallog) replaceDB(db *gorm.DB) scoretotallog {
	s.scoretotallogDo.ReplaceDB(db)
	return s
}

type scoretotallogDo struct{ gen.DO }

type IScoretotallogDo interface {
	gen.SubQuery
	Debug() IScoretotallogDo
	WithContext(ctx context.Context) IScoretotallogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScoretotallogDo
	WriteDB() IScoretotallogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScoretotallogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScoretotallogDo
	Not(conds ...gen.Condition) IScoretotallogDo
	Or(conds ...gen.Condition) IScoretotallogDo
	Select(conds ...field.Expr) IScoretotallogDo
	Where(conds ...gen.Condition) IScoretotallogDo
	Order(conds ...field.Expr) IScoretotallogDo
	Distinct(cols ...field.Expr) IScoretotallogDo
	Omit(cols ...field.Expr) IScoretotallogDo
	Join(table schema.Tabler, on ...field.Expr) IScoretotallogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScoretotallogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScoretotallogDo
	Group(cols ...field.Expr) IScoretotallogDo
	Having(conds ...gen.Condition) IScoretotallogDo
	Limit(limit int) IScoretotallogDo
	Offset(offset int) IScoretotallogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScoretotallogDo
	Unscoped() IScoretotallogDo
	Create(values ...*model.Scoretotallog) error
	CreateInBatches(values []*model.Scoretotallog, batchSize int) error
	Save(values ...*model.Scoretotallog) error
	First() (*model.Scoretotallog, error)
	Take() (*model.Scoretotallog, error)
	Last() (*model.Scoretotallog, error)
	Find() ([]*model.Scoretotallog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Scoretotallog, err error)
	FindInBatches(result *[]*model.Scoretotallog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Scoretotallog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScoretotallogDo
	Assign(attrs ...field.AssignExpr) IScoretotallogDo
	Joins(fields ...field.RelationField) IScoretotallogDo
	Preload(fields ...field.RelationField) IScoretotallogDo
	FirstOrInit() (*model.Scoretotallog, error)
	FirstOrCreate() (*model.Scoretotallog, error)
	FindByPage(offset int, limit int) (result []*model.Scoretotallog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScoretotallogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scoretotallogDo) Debug() IScoretotallogDo {
	return s.withDO(s.DO.Debug())
}

func (s scoretotallogDo) WithContext(ctx context.Context) IScoretotallogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scoretotallogDo) ReadDB() IScoretotallogDo {
	return s.Clauses(dbresolver.Read)
}

func (s scoretotallogDo) WriteDB() IScoretotallogDo {
	return s.Clauses(dbresolver.Write)
}

func (s scoretotallogDo) Session(config *gorm.Session) IScoretotallogDo {
	return s.withDO(s.DO.Session(config))
}

func (s scoretotallogDo) Clauses(conds ...clause.Expression) IScoretotallogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scoretotallogDo) Returning(value interface{}, columns ...string) IScoretotallogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scoretotallogDo) Not(conds ...gen.Condition) IScoretotallogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scoretotallogDo) Or(conds ...gen.Condition) IScoretotallogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scoretotallogDo) Select(conds ...field.Expr) IScoretotallogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scoretotallogDo) Where(conds ...gen.Condition) IScoretotallogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scoretotallogDo) Order(conds ...field.Expr) IScoretotallogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scoretotallogDo) Distinct(cols ...field.Expr) IScoretotallogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scoretotallogDo) Omit(cols ...field.Expr) IScoretotallogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scoretotallogDo) Join(table schema.Tabler, on ...field.Expr) IScoretotallogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scoretotallogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScoretotallogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scoretotallogDo) RightJoin(table schema.Tabler, on ...field.Expr) IScoretotallogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scoretotallogDo) Group(cols ...field.Expr) IScoretotallogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scoretotallogDo) Having(conds ...gen.Condition) IScoretotallogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scoretotallogDo) Limit(limit int) IScoretotallogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scoretotallogDo) Offset(offset int) IScoretotallogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scoretotallogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScoretotallogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scoretotallogDo) Unscoped() IScoretotallogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scoretotallogDo) Create(values ...*model.Scoretotallog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scoretotallogDo) CreateInBatches(values []*model.Scoretotallog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scoretotallogDo) Save(values ...*model.Scoretotallog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scoretotallogDo) First() (*model.Scoretotallog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scoretotallog), nil
	}
}

func (s scoretotallogDo) Take() (*model.Scoretotallog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scoretotallog), nil
	}
}

func (s scoretotallogDo) Last() (*model.Scoretotallog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scoretotallog), nil
	}
}

func (s scoretotallogDo) Find() ([]*model.Scoretotallog, error) {
	result, err := s.DO.Find()
	return result.([]*model.Scoretotallog), err
}

func (s scoretotallogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Scoretotallog, err error) {
	buf := make([]*model.Scoretotallog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scoretotallogDo) FindInBatches(result *[]*model.Scoretotallog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scoretotallogDo) Attrs(attrs ...field.AssignExpr) IScoretotallogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scoretotallogDo) Assign(attrs ...field.AssignExpr) IScoretotallogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scoretotallogDo) Joins(fields ...field.RelationField) IScoretotallogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scoretotallogDo) Preload(fields ...field.RelationField) IScoretotallogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scoretotallogDo) FirstOrInit() (*model.Scoretotallog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scoretotallog), nil
	}
}

func (s scoretotallogDo) FirstOrCreate() (*model.Scoretotallog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scoretotallog), nil
	}
}

func (s scoretotallogDo) FindByPage(offset int, limit int) (result []*model.Scoretotallog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scoretotallogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scoretotallogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scoretotallogDo) Delete(models ...*model.Scoretotallog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scoretotallogDo) withDO(do gen.Dao) *scoretotallogDo {
	s.DO = *do.(*gen.DO)
	return s
}
