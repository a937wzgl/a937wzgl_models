// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fish

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newCatchChance(db *gorm.DB, opts ...gen.DOOption) catchChance {
	_catchChance := catchChance{}

	_catchChance.catchChanceDo.UseDB(db, opts...)
	_catchChance.catchChanceDo.UseModel(&model.CatchChance{})

	tableName := _catchChance.catchChanceDo.TableName()
	_catchChance.ALL = field.NewAsterisk(tableName)
	_catchChance.ServeID = field.NewInt32(tableName, "serveId")
	_catchChance.Chance = field.NewFloat64(tableName, "chance")

	_catchChance.fillFieldMap()

	return _catchChance
}

type catchChance struct {
	catchChanceDo

	ALL     field.Asterisk
	ServeID field.Int32
	Chance  field.Float64

	fieldMap map[string]field.Expr
}

func (c catchChance) Table(newTableName string) *catchChance {
	c.catchChanceDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c catchChance) As(alias string) *catchChance {
	c.catchChanceDo.DO = *(c.catchChanceDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *catchChance) updateTableName(table string) *catchChance {
	c.ALL = field.NewAsterisk(table)
	c.ServeID = field.NewInt32(table, "serveId")
	c.Chance = field.NewFloat64(table, "chance")

	c.fillFieldMap()

	return c
}

func (c *catchChance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *catchChance) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 2)
	c.fieldMap["serveId"] = c.ServeID
	c.fieldMap["chance"] = c.Chance
}

func (c catchChance) clone(db *gorm.DB) catchChance {
	c.catchChanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c catchChance) replaceDB(db *gorm.DB) catchChance {
	c.catchChanceDo.ReplaceDB(db)
	return c
}

type catchChanceDo struct{ gen.DO }

type ICatchChanceDo interface {
	gen.SubQuery
	Debug() ICatchChanceDo
	WithContext(ctx context.Context) ICatchChanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICatchChanceDo
	WriteDB() ICatchChanceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICatchChanceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICatchChanceDo
	Not(conds ...gen.Condition) ICatchChanceDo
	Or(conds ...gen.Condition) ICatchChanceDo
	Select(conds ...field.Expr) ICatchChanceDo
	Where(conds ...gen.Condition) ICatchChanceDo
	Order(conds ...field.Expr) ICatchChanceDo
	Distinct(cols ...field.Expr) ICatchChanceDo
	Omit(cols ...field.Expr) ICatchChanceDo
	Join(table schema.Tabler, on ...field.Expr) ICatchChanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICatchChanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICatchChanceDo
	Group(cols ...field.Expr) ICatchChanceDo
	Having(conds ...gen.Condition) ICatchChanceDo
	Limit(limit int) ICatchChanceDo
	Offset(offset int) ICatchChanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICatchChanceDo
	Unscoped() ICatchChanceDo
	Create(values ...*model.CatchChance) error
	CreateInBatches(values []*model.CatchChance, batchSize int) error
	Save(values ...*model.CatchChance) error
	First() (*model.CatchChance, error)
	Take() (*model.CatchChance, error)
	Last() (*model.CatchChance, error)
	Find() ([]*model.CatchChance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CatchChance, err error)
	FindInBatches(result *[]*model.CatchChance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CatchChance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICatchChanceDo
	Assign(attrs ...field.AssignExpr) ICatchChanceDo
	Joins(fields ...field.RelationField) ICatchChanceDo
	Preload(fields ...field.RelationField) ICatchChanceDo
	FirstOrInit() (*model.CatchChance, error)
	FirstOrCreate() (*model.CatchChance, error)
	FindByPage(offset int, limit int) (result []*model.CatchChance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICatchChanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c catchChanceDo) Debug() ICatchChanceDo {
	return c.withDO(c.DO.Debug())
}

func (c catchChanceDo) WithContext(ctx context.Context) ICatchChanceDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c catchChanceDo) ReadDB() ICatchChanceDo {
	return c.Clauses(dbresolver.Read)
}

func (c catchChanceDo) WriteDB() ICatchChanceDo {
	return c.Clauses(dbresolver.Write)
}

func (c catchChanceDo) Session(config *gorm.Session) ICatchChanceDo {
	return c.withDO(c.DO.Session(config))
}

func (c catchChanceDo) Clauses(conds ...clause.Expression) ICatchChanceDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c catchChanceDo) Returning(value interface{}, columns ...string) ICatchChanceDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c catchChanceDo) Not(conds ...gen.Condition) ICatchChanceDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c catchChanceDo) Or(conds ...gen.Condition) ICatchChanceDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c catchChanceDo) Select(conds ...field.Expr) ICatchChanceDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c catchChanceDo) Where(conds ...gen.Condition) ICatchChanceDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c catchChanceDo) Order(conds ...field.Expr) ICatchChanceDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c catchChanceDo) Distinct(cols ...field.Expr) ICatchChanceDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c catchChanceDo) Omit(cols ...field.Expr) ICatchChanceDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c catchChanceDo) Join(table schema.Tabler, on ...field.Expr) ICatchChanceDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c catchChanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICatchChanceDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c catchChanceDo) RightJoin(table schema.Tabler, on ...field.Expr) ICatchChanceDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c catchChanceDo) Group(cols ...field.Expr) ICatchChanceDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c catchChanceDo) Having(conds ...gen.Condition) ICatchChanceDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c catchChanceDo) Limit(limit int) ICatchChanceDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c catchChanceDo) Offset(offset int) ICatchChanceDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c catchChanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICatchChanceDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c catchChanceDo) Unscoped() ICatchChanceDo {
	return c.withDO(c.DO.Unscoped())
}

func (c catchChanceDo) Create(values ...*model.CatchChance) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c catchChanceDo) CreateInBatches(values []*model.CatchChance, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c catchChanceDo) Save(values ...*model.CatchChance) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c catchChanceDo) First() (*model.CatchChance, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CatchChance), nil
	}
}

func (c catchChanceDo) Take() (*model.CatchChance, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CatchChance), nil
	}
}

func (c catchChanceDo) Last() (*model.CatchChance, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CatchChance), nil
	}
}

func (c catchChanceDo) Find() ([]*model.CatchChance, error) {
	result, err := c.DO.Find()
	return result.([]*model.CatchChance), err
}

func (c catchChanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CatchChance, err error) {
	buf := make([]*model.CatchChance, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c catchChanceDo) FindInBatches(result *[]*model.CatchChance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c catchChanceDo) Attrs(attrs ...field.AssignExpr) ICatchChanceDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c catchChanceDo) Assign(attrs ...field.AssignExpr) ICatchChanceDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c catchChanceDo) Joins(fields ...field.RelationField) ICatchChanceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c catchChanceDo) Preload(fields ...field.RelationField) ICatchChanceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c catchChanceDo) FirstOrInit() (*model.CatchChance, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CatchChance), nil
	}
}

func (c catchChanceDo) FirstOrCreate() (*model.CatchChance, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CatchChance), nil
	}
}

func (c catchChanceDo) FindByPage(offset int, limit int) (result []*model.CatchChance, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c catchChanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c catchChanceDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c catchChanceDo) Delete(models ...*model.CatchChance) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *catchChanceDo) withDO(do gen.Dao) *catchChanceDo {
	c.DO = *do.(*gen.DO)
	return c
}
