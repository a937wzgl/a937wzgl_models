// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package la_ba

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLotterylog5201(db *gorm.DB, opts ...gen.DOOption) lotterylog5201 {
	_lotterylog5201 := lotterylog5201{}

	_lotterylog5201.lotterylog5201Do.UseDB(db, opts...)
	_lotterylog5201.lotterylog5201Do.UseModel(&model.Lotterylog5201{})

	tableName := _lotterylog5201.lotterylog5201Do.TableName()
	_lotterylog5201.ALL = field.NewAsterisk(tableName)
	_lotterylog5201.ID = field.NewInt32(tableName, "id")
	_lotterylog5201.ResultArray = field.NewString(tableName, "result_array")
	_lotterylog5201.LotteryTime = field.NewTime(tableName, "lotteryTime")

	_lotterylog5201.fillFieldMap()

	return _lotterylog5201
}

type lotterylog5201 struct {
	lotterylog5201Do

	ALL         field.Asterisk
	ID          field.Int32
	ResultArray field.String
	LotteryTime field.Time

	fieldMap map[string]field.Expr
}

func (l lotterylog5201) Table(newTableName string) *lotterylog5201 {
	l.lotterylog5201Do.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lotterylog5201) As(alias string) *lotterylog5201 {
	l.lotterylog5201Do.DO = *(l.lotterylog5201Do.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lotterylog5201) updateTableName(table string) *lotterylog5201 {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.ResultArray = field.NewString(table, "result_array")
	l.LotteryTime = field.NewTime(table, "lotteryTime")

	l.fillFieldMap()

	return l
}

func (l *lotterylog5201) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lotterylog5201) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 3)
	l.fieldMap["id"] = l.ID
	l.fieldMap["result_array"] = l.ResultArray
	l.fieldMap["lotteryTime"] = l.LotteryTime
}

func (l lotterylog5201) clone(db *gorm.DB) lotterylog5201 {
	l.lotterylog5201Do.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lotterylog5201) replaceDB(db *gorm.DB) lotterylog5201 {
	l.lotterylog5201Do.ReplaceDB(db)
	return l
}

type lotterylog5201Do struct{ gen.DO }

type ILotterylog5201Do interface {
	gen.SubQuery
	Debug() ILotterylog5201Do
	WithContext(ctx context.Context) ILotterylog5201Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILotterylog5201Do
	WriteDB() ILotterylog5201Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILotterylog5201Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILotterylog5201Do
	Not(conds ...gen.Condition) ILotterylog5201Do
	Or(conds ...gen.Condition) ILotterylog5201Do
	Select(conds ...field.Expr) ILotterylog5201Do
	Where(conds ...gen.Condition) ILotterylog5201Do
	Order(conds ...field.Expr) ILotterylog5201Do
	Distinct(cols ...field.Expr) ILotterylog5201Do
	Omit(cols ...field.Expr) ILotterylog5201Do
	Join(table schema.Tabler, on ...field.Expr) ILotterylog5201Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog5201Do
	RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog5201Do
	Group(cols ...field.Expr) ILotterylog5201Do
	Having(conds ...gen.Condition) ILotterylog5201Do
	Limit(limit int) ILotterylog5201Do
	Offset(offset int) ILotterylog5201Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog5201Do
	Unscoped() ILotterylog5201Do
	Create(values ...*model.Lotterylog5201) error
	CreateInBatches(values []*model.Lotterylog5201, batchSize int) error
	Save(values ...*model.Lotterylog5201) error
	First() (*model.Lotterylog5201, error)
	Take() (*model.Lotterylog5201, error)
	Last() (*model.Lotterylog5201, error)
	Find() ([]*model.Lotterylog5201, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog5201, err error)
	FindInBatches(result *[]*model.Lotterylog5201, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lotterylog5201) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILotterylog5201Do
	Assign(attrs ...field.AssignExpr) ILotterylog5201Do
	Joins(fields ...field.RelationField) ILotterylog5201Do
	Preload(fields ...field.RelationField) ILotterylog5201Do
	FirstOrInit() (*model.Lotterylog5201, error)
	FirstOrCreate() (*model.Lotterylog5201, error)
	FindByPage(offset int, limit int) (result []*model.Lotterylog5201, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILotterylog5201Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lotterylog5201Do) Debug() ILotterylog5201Do {
	return l.withDO(l.DO.Debug())
}

func (l lotterylog5201Do) WithContext(ctx context.Context) ILotterylog5201Do {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lotterylog5201Do) ReadDB() ILotterylog5201Do {
	return l.Clauses(dbresolver.Read)
}

func (l lotterylog5201Do) WriteDB() ILotterylog5201Do {
	return l.Clauses(dbresolver.Write)
}

func (l lotterylog5201Do) Session(config *gorm.Session) ILotterylog5201Do {
	return l.withDO(l.DO.Session(config))
}

func (l lotterylog5201Do) Clauses(conds ...clause.Expression) ILotterylog5201Do {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lotterylog5201Do) Returning(value interface{}, columns ...string) ILotterylog5201Do {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lotterylog5201Do) Not(conds ...gen.Condition) ILotterylog5201Do {
	return l.withDO(l.DO.Not(conds...))
}

func (l lotterylog5201Do) Or(conds ...gen.Condition) ILotterylog5201Do {
	return l.withDO(l.DO.Or(conds...))
}

func (l lotterylog5201Do) Select(conds ...field.Expr) ILotterylog5201Do {
	return l.withDO(l.DO.Select(conds...))
}

func (l lotterylog5201Do) Where(conds ...gen.Condition) ILotterylog5201Do {
	return l.withDO(l.DO.Where(conds...))
}

func (l lotterylog5201Do) Order(conds ...field.Expr) ILotterylog5201Do {
	return l.withDO(l.DO.Order(conds...))
}

func (l lotterylog5201Do) Distinct(cols ...field.Expr) ILotterylog5201Do {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lotterylog5201Do) Omit(cols ...field.Expr) ILotterylog5201Do {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lotterylog5201Do) Join(table schema.Tabler, on ...field.Expr) ILotterylog5201Do {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lotterylog5201Do) LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog5201Do {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lotterylog5201Do) RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog5201Do {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lotterylog5201Do) Group(cols ...field.Expr) ILotterylog5201Do {
	return l.withDO(l.DO.Group(cols...))
}

func (l lotterylog5201Do) Having(conds ...gen.Condition) ILotterylog5201Do {
	return l.withDO(l.DO.Having(conds...))
}

func (l lotterylog5201Do) Limit(limit int) ILotterylog5201Do {
	return l.withDO(l.DO.Limit(limit))
}

func (l lotterylog5201Do) Offset(offset int) ILotterylog5201Do {
	return l.withDO(l.DO.Offset(offset))
}

func (l lotterylog5201Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog5201Do {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lotterylog5201Do) Unscoped() ILotterylog5201Do {
	return l.withDO(l.DO.Unscoped())
}

func (l lotterylog5201Do) Create(values ...*model.Lotterylog5201) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lotterylog5201Do) CreateInBatches(values []*model.Lotterylog5201, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lotterylog5201Do) Save(values ...*model.Lotterylog5201) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lotterylog5201Do) First() (*model.Lotterylog5201, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog5201), nil
	}
}

func (l lotterylog5201Do) Take() (*model.Lotterylog5201, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog5201), nil
	}
}

func (l lotterylog5201Do) Last() (*model.Lotterylog5201, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog5201), nil
	}
}

func (l lotterylog5201Do) Find() ([]*model.Lotterylog5201, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lotterylog5201), err
}

func (l lotterylog5201Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog5201, err error) {
	buf := make([]*model.Lotterylog5201, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lotterylog5201Do) FindInBatches(result *[]*model.Lotterylog5201, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lotterylog5201Do) Attrs(attrs ...field.AssignExpr) ILotterylog5201Do {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lotterylog5201Do) Assign(attrs ...field.AssignExpr) ILotterylog5201Do {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lotterylog5201Do) Joins(fields ...field.RelationField) ILotterylog5201Do {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lotterylog5201Do) Preload(fields ...field.RelationField) ILotterylog5201Do {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lotterylog5201Do) FirstOrInit() (*model.Lotterylog5201, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog5201), nil
	}
}

func (l lotterylog5201Do) FirstOrCreate() (*model.Lotterylog5201, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog5201), nil
	}
}

func (l lotterylog5201Do) FindByPage(offset int, limit int) (result []*model.Lotterylog5201, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lotterylog5201Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lotterylog5201Do) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lotterylog5201Do) Delete(models ...*model.Lotterylog5201) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lotterylog5201Do) withDO(do gen.Dao) *lotterylog5201Do {
	l.DO = *do.(*gen.DO)
	return l
}
