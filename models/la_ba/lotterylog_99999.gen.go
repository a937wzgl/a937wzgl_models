// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package la_ba

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLotterylog99999(db *gorm.DB, opts ...gen.DOOption) lotterylog99999 {
	_lotterylog99999 := lotterylog99999{}

	_lotterylog99999.lotterylog99999Do.UseDB(db, opts...)
	_lotterylog99999.lotterylog99999Do.UseModel(&model.Lotterylog99999{})

	tableName := _lotterylog99999.lotterylog99999Do.TableName()
	_lotterylog99999.ALL = field.NewAsterisk(tableName)
	_lotterylog99999.ID = field.NewInt32(tableName, "id")
	_lotterylog99999.Userid = field.NewInt32(tableName, "userid")
	_lotterylog99999.Bet = field.NewInt32(tableName, "bet")
	_lotterylog99999.ScoreBefore = field.NewInt32(tableName, "score_before")
	_lotterylog99999.ScoreWin = field.NewInt32(tableName, "score_win")
	_lotterylog99999.ScoreCurrent = field.NewInt32(tableName, "score_current")
	_lotterylog99999.LotteryTime = field.NewTime(tableName, "lotteryTime")

	_lotterylog99999.fillFieldMap()

	return _lotterylog99999
}

type lotterylog99999 struct {
	lotterylog99999Do

	ALL          field.Asterisk
	ID           field.Int32
	Userid       field.Int32
	Bet          field.Int32
	ScoreBefore  field.Int32
	ScoreWin     field.Int32
	ScoreCurrent field.Int32
	LotteryTime  field.Time

	fieldMap map[string]field.Expr
}

func (l lotterylog99999) Table(newTableName string) *lotterylog99999 {
	l.lotterylog99999Do.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lotterylog99999) As(alias string) *lotterylog99999 {
	l.lotterylog99999Do.DO = *(l.lotterylog99999Do.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lotterylog99999) updateTableName(table string) *lotterylog99999 {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Userid = field.NewInt32(table, "userid")
	l.Bet = field.NewInt32(table, "bet")
	l.ScoreBefore = field.NewInt32(table, "score_before")
	l.ScoreWin = field.NewInt32(table, "score_win")
	l.ScoreCurrent = field.NewInt32(table, "score_current")
	l.LotteryTime = field.NewTime(table, "lotteryTime")

	l.fillFieldMap()

	return l
}

func (l *lotterylog99999) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lotterylog99999) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 7)
	l.fieldMap["id"] = l.ID
	l.fieldMap["userid"] = l.Userid
	l.fieldMap["bet"] = l.Bet
	l.fieldMap["score_before"] = l.ScoreBefore
	l.fieldMap["score_win"] = l.ScoreWin
	l.fieldMap["score_current"] = l.ScoreCurrent
	l.fieldMap["lotteryTime"] = l.LotteryTime
}

func (l lotterylog99999) clone(db *gorm.DB) lotterylog99999 {
	l.lotterylog99999Do.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lotterylog99999) replaceDB(db *gorm.DB) lotterylog99999 {
	l.lotterylog99999Do.ReplaceDB(db)
	return l
}

type lotterylog99999Do struct{ gen.DO }

type ILotterylog99999Do interface {
	gen.SubQuery
	Debug() ILotterylog99999Do
	WithContext(ctx context.Context) ILotterylog99999Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILotterylog99999Do
	WriteDB() ILotterylog99999Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILotterylog99999Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILotterylog99999Do
	Not(conds ...gen.Condition) ILotterylog99999Do
	Or(conds ...gen.Condition) ILotterylog99999Do
	Select(conds ...field.Expr) ILotterylog99999Do
	Where(conds ...gen.Condition) ILotterylog99999Do
	Order(conds ...field.Expr) ILotterylog99999Do
	Distinct(cols ...field.Expr) ILotterylog99999Do
	Omit(cols ...field.Expr) ILotterylog99999Do
	Join(table schema.Tabler, on ...field.Expr) ILotterylog99999Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog99999Do
	RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog99999Do
	Group(cols ...field.Expr) ILotterylog99999Do
	Having(conds ...gen.Condition) ILotterylog99999Do
	Limit(limit int) ILotterylog99999Do
	Offset(offset int) ILotterylog99999Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog99999Do
	Unscoped() ILotterylog99999Do
	Create(values ...*model.Lotterylog99999) error
	CreateInBatches(values []*model.Lotterylog99999, batchSize int) error
	Save(values ...*model.Lotterylog99999) error
	First() (*model.Lotterylog99999, error)
	Take() (*model.Lotterylog99999, error)
	Last() (*model.Lotterylog99999, error)
	Find() ([]*model.Lotterylog99999, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog99999, err error)
	FindInBatches(result *[]*model.Lotterylog99999, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lotterylog99999) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILotterylog99999Do
	Assign(attrs ...field.AssignExpr) ILotterylog99999Do
	Joins(fields ...field.RelationField) ILotterylog99999Do
	Preload(fields ...field.RelationField) ILotterylog99999Do
	FirstOrInit() (*model.Lotterylog99999, error)
	FirstOrCreate() (*model.Lotterylog99999, error)
	FindByPage(offset int, limit int) (result []*model.Lotterylog99999, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILotterylog99999Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lotterylog99999Do) Debug() ILotterylog99999Do {
	return l.withDO(l.DO.Debug())
}

func (l lotterylog99999Do) WithContext(ctx context.Context) ILotterylog99999Do {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lotterylog99999Do) ReadDB() ILotterylog99999Do {
	return l.Clauses(dbresolver.Read)
}

func (l lotterylog99999Do) WriteDB() ILotterylog99999Do {
	return l.Clauses(dbresolver.Write)
}

func (l lotterylog99999Do) Session(config *gorm.Session) ILotterylog99999Do {
	return l.withDO(l.DO.Session(config))
}

func (l lotterylog99999Do) Clauses(conds ...clause.Expression) ILotterylog99999Do {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lotterylog99999Do) Returning(value interface{}, columns ...string) ILotterylog99999Do {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lotterylog99999Do) Not(conds ...gen.Condition) ILotterylog99999Do {
	return l.withDO(l.DO.Not(conds...))
}

func (l lotterylog99999Do) Or(conds ...gen.Condition) ILotterylog99999Do {
	return l.withDO(l.DO.Or(conds...))
}

func (l lotterylog99999Do) Select(conds ...field.Expr) ILotterylog99999Do {
	return l.withDO(l.DO.Select(conds...))
}

func (l lotterylog99999Do) Where(conds ...gen.Condition) ILotterylog99999Do {
	return l.withDO(l.DO.Where(conds...))
}

func (l lotterylog99999Do) Order(conds ...field.Expr) ILotterylog99999Do {
	return l.withDO(l.DO.Order(conds...))
}

func (l lotterylog99999Do) Distinct(cols ...field.Expr) ILotterylog99999Do {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lotterylog99999Do) Omit(cols ...field.Expr) ILotterylog99999Do {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lotterylog99999Do) Join(table schema.Tabler, on ...field.Expr) ILotterylog99999Do {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lotterylog99999Do) LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog99999Do {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lotterylog99999Do) RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog99999Do {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lotterylog99999Do) Group(cols ...field.Expr) ILotterylog99999Do {
	return l.withDO(l.DO.Group(cols...))
}

func (l lotterylog99999Do) Having(conds ...gen.Condition) ILotterylog99999Do {
	return l.withDO(l.DO.Having(conds...))
}

func (l lotterylog99999Do) Limit(limit int) ILotterylog99999Do {
	return l.withDO(l.DO.Limit(limit))
}

func (l lotterylog99999Do) Offset(offset int) ILotterylog99999Do {
	return l.withDO(l.DO.Offset(offset))
}

func (l lotterylog99999Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog99999Do {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lotterylog99999Do) Unscoped() ILotterylog99999Do {
	return l.withDO(l.DO.Unscoped())
}

func (l lotterylog99999Do) Create(values ...*model.Lotterylog99999) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lotterylog99999Do) CreateInBatches(values []*model.Lotterylog99999, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lotterylog99999Do) Save(values ...*model.Lotterylog99999) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lotterylog99999Do) First() (*model.Lotterylog99999, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog99999), nil
	}
}

func (l lotterylog99999Do) Take() (*model.Lotterylog99999, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog99999), nil
	}
}

func (l lotterylog99999Do) Last() (*model.Lotterylog99999, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog99999), nil
	}
}

func (l lotterylog99999Do) Find() ([]*model.Lotterylog99999, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lotterylog99999), err
}

func (l lotterylog99999Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog99999, err error) {
	buf := make([]*model.Lotterylog99999, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lotterylog99999Do) FindInBatches(result *[]*model.Lotterylog99999, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lotterylog99999Do) Attrs(attrs ...field.AssignExpr) ILotterylog99999Do {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lotterylog99999Do) Assign(attrs ...field.AssignExpr) ILotterylog99999Do {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lotterylog99999Do) Joins(fields ...field.RelationField) ILotterylog99999Do {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lotterylog99999Do) Preload(fields ...field.RelationField) ILotterylog99999Do {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lotterylog99999Do) FirstOrInit() (*model.Lotterylog99999, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog99999), nil
	}
}

func (l lotterylog99999Do) FirstOrCreate() (*model.Lotterylog99999, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog99999), nil
	}
}

func (l lotterylog99999Do) FindByPage(offset int, limit int) (result []*model.Lotterylog99999, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lotterylog99999Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lotterylog99999Do) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lotterylog99999Do) Delete(models ...*model.Lotterylog99999) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lotterylog99999Do) withDO(do gen.Dao) *lotterylog99999Do {
	l.DO = *do.(*gen.DO)
	return l
}
