// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newFkrechargelog(db *gorm.DB, opts ...gen.DOOption) fkrechargelog {
	_fkrechargelog := fkrechargelog{}

	_fkrechargelog.fkrechargelogDo.UseDB(db, opts...)
	_fkrechargelog.fkrechargelogDo.UseModel(&model.Fkrechargelog{})

	tableName := _fkrechargelog.fkrechargelogDo.TableName()
	_fkrechargelog.ALL = field.NewAsterisk(tableName)
	_fkrechargelog.ID = field.NewUint32(tableName, "id")
	_fkrechargelog.Adminid = field.NewUint32(tableName, "adminid")
	_fkrechargelog.Userid = field.NewUint32(tableName, "userid")
	_fkrechargelog.Createtime = field.NewString(tableName, "createtime")
	_fkrechargelog.Czfee = field.NewUint64(tableName, "czfee")
	_fkrechargelog.Oldfee = field.NewUint64(tableName, "oldfee")
	_fkrechargelog.Newfee = field.NewUint64(tableName, "newfee")
	_fkrechargelog.Type = field.NewBool(tableName, "type")

	_fkrechargelog.fillFieldMap()

	return _fkrechargelog
}

type fkrechargelog struct {
	fkrechargelogDo

	ALL        field.Asterisk
	ID         field.Uint32
	Adminid    field.Uint32
	Userid     field.Uint32
	Createtime field.String
	Czfee      field.Uint64
	Oldfee     field.Uint64
	Newfee     field.Uint64
	Type       field.Bool // 0 -  1 +

	fieldMap map[string]field.Expr
}

func (f fkrechargelog) Table(newTableName string) *fkrechargelog {
	f.fkrechargelogDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fkrechargelog) As(alias string) *fkrechargelog {
	f.fkrechargelogDo.DO = *(f.fkrechargelogDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fkrechargelog) updateTableName(table string) *fkrechargelog {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint32(table, "id")
	f.Adminid = field.NewUint32(table, "adminid")
	f.Userid = field.NewUint32(table, "userid")
	f.Createtime = field.NewString(table, "createtime")
	f.Czfee = field.NewUint64(table, "czfee")
	f.Oldfee = field.NewUint64(table, "oldfee")
	f.Newfee = field.NewUint64(table, "newfee")
	f.Type = field.NewBool(table, "type")

	f.fillFieldMap()

	return f
}

func (f *fkrechargelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fkrechargelog) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 8)
	f.fieldMap["id"] = f.ID
	f.fieldMap["adminid"] = f.Adminid
	f.fieldMap["userid"] = f.Userid
	f.fieldMap["createtime"] = f.Createtime
	f.fieldMap["czfee"] = f.Czfee
	f.fieldMap["oldfee"] = f.Oldfee
	f.fieldMap["newfee"] = f.Newfee
	f.fieldMap["type"] = f.Type
}

func (f fkrechargelog) clone(db *gorm.DB) fkrechargelog {
	f.fkrechargelogDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fkrechargelog) replaceDB(db *gorm.DB) fkrechargelog {
	f.fkrechargelogDo.ReplaceDB(db)
	return f
}

type fkrechargelogDo struct{ gen.DO }

type IFkrechargelogDo interface {
	gen.SubQuery
	Debug() IFkrechargelogDo
	WithContext(ctx context.Context) IFkrechargelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFkrechargelogDo
	WriteDB() IFkrechargelogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFkrechargelogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFkrechargelogDo
	Not(conds ...gen.Condition) IFkrechargelogDo
	Or(conds ...gen.Condition) IFkrechargelogDo
	Select(conds ...field.Expr) IFkrechargelogDo
	Where(conds ...gen.Condition) IFkrechargelogDo
	Order(conds ...field.Expr) IFkrechargelogDo
	Distinct(cols ...field.Expr) IFkrechargelogDo
	Omit(cols ...field.Expr) IFkrechargelogDo
	Join(table schema.Tabler, on ...field.Expr) IFkrechargelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFkrechargelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFkrechargelogDo
	Group(cols ...field.Expr) IFkrechargelogDo
	Having(conds ...gen.Condition) IFkrechargelogDo
	Limit(limit int) IFkrechargelogDo
	Offset(offset int) IFkrechargelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFkrechargelogDo
	Unscoped() IFkrechargelogDo
	Create(values ...*model.Fkrechargelog) error
	CreateInBatches(values []*model.Fkrechargelog, batchSize int) error
	Save(values ...*model.Fkrechargelog) error
	First() (*model.Fkrechargelog, error)
	Take() (*model.Fkrechargelog, error)
	Last() (*model.Fkrechargelog, error)
	Find() ([]*model.Fkrechargelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Fkrechargelog, err error)
	FindInBatches(result *[]*model.Fkrechargelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Fkrechargelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFkrechargelogDo
	Assign(attrs ...field.AssignExpr) IFkrechargelogDo
	Joins(fields ...field.RelationField) IFkrechargelogDo
	Preload(fields ...field.RelationField) IFkrechargelogDo
	FirstOrInit() (*model.Fkrechargelog, error)
	FirstOrCreate() (*model.Fkrechargelog, error)
	FindByPage(offset int, limit int) (result []*model.Fkrechargelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFkrechargelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fkrechargelogDo) Debug() IFkrechargelogDo {
	return f.withDO(f.DO.Debug())
}

func (f fkrechargelogDo) WithContext(ctx context.Context) IFkrechargelogDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fkrechargelogDo) ReadDB() IFkrechargelogDo {
	return f.Clauses(dbresolver.Read)
}

func (f fkrechargelogDo) WriteDB() IFkrechargelogDo {
	return f.Clauses(dbresolver.Write)
}

func (f fkrechargelogDo) Session(config *gorm.Session) IFkrechargelogDo {
	return f.withDO(f.DO.Session(config))
}

func (f fkrechargelogDo) Clauses(conds ...clause.Expression) IFkrechargelogDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fkrechargelogDo) Returning(value interface{}, columns ...string) IFkrechargelogDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fkrechargelogDo) Not(conds ...gen.Condition) IFkrechargelogDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fkrechargelogDo) Or(conds ...gen.Condition) IFkrechargelogDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fkrechargelogDo) Select(conds ...field.Expr) IFkrechargelogDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fkrechargelogDo) Where(conds ...gen.Condition) IFkrechargelogDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fkrechargelogDo) Order(conds ...field.Expr) IFkrechargelogDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fkrechargelogDo) Distinct(cols ...field.Expr) IFkrechargelogDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fkrechargelogDo) Omit(cols ...field.Expr) IFkrechargelogDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fkrechargelogDo) Join(table schema.Tabler, on ...field.Expr) IFkrechargelogDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fkrechargelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFkrechargelogDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fkrechargelogDo) RightJoin(table schema.Tabler, on ...field.Expr) IFkrechargelogDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fkrechargelogDo) Group(cols ...field.Expr) IFkrechargelogDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fkrechargelogDo) Having(conds ...gen.Condition) IFkrechargelogDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fkrechargelogDo) Limit(limit int) IFkrechargelogDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fkrechargelogDo) Offset(offset int) IFkrechargelogDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fkrechargelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFkrechargelogDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fkrechargelogDo) Unscoped() IFkrechargelogDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fkrechargelogDo) Create(values ...*model.Fkrechargelog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fkrechargelogDo) CreateInBatches(values []*model.Fkrechargelog, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fkrechargelogDo) Save(values ...*model.Fkrechargelog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fkrechargelogDo) First() (*model.Fkrechargelog, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fkrechargelog), nil
	}
}

func (f fkrechargelogDo) Take() (*model.Fkrechargelog, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fkrechargelog), nil
	}
}

func (f fkrechargelogDo) Last() (*model.Fkrechargelog, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fkrechargelog), nil
	}
}

func (f fkrechargelogDo) Find() ([]*model.Fkrechargelog, error) {
	result, err := f.DO.Find()
	return result.([]*model.Fkrechargelog), err
}

func (f fkrechargelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Fkrechargelog, err error) {
	buf := make([]*model.Fkrechargelog, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fkrechargelogDo) FindInBatches(result *[]*model.Fkrechargelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fkrechargelogDo) Attrs(attrs ...field.AssignExpr) IFkrechargelogDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fkrechargelogDo) Assign(attrs ...field.AssignExpr) IFkrechargelogDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fkrechargelogDo) Joins(fields ...field.RelationField) IFkrechargelogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fkrechargelogDo) Preload(fields ...field.RelationField) IFkrechargelogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fkrechargelogDo) FirstOrInit() (*model.Fkrechargelog, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fkrechargelog), nil
	}
}

func (f fkrechargelogDo) FirstOrCreate() (*model.Fkrechargelog, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fkrechargelog), nil
	}
}

func (f fkrechargelogDo) FindByPage(offset int, limit int) (result []*model.Fkrechargelog, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fkrechargelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fkrechargelogDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fkrechargelogDo) Delete(models ...*model.Fkrechargelog) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fkrechargelogDo) withDO(do gen.Dao) *fkrechargelogDo {
	f.DO = *do.(*gen.DO)
	return f
}
