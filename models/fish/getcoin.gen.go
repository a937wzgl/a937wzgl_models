// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fish

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newGetcoin(db *gorm.DB, opts ...gen.DOOption) getcoin {
	_getcoin := getcoin{}

	_getcoin.getcoinDo.UseDB(db, opts...)
	_getcoin.getcoinDo.UseModel(&model.Getcoin{})

	tableName := _getcoin.getcoinDo.TableName()
	_getcoin.ALL = field.NewAsterisk(tableName)
	_getcoin.ID = field.NewInt32(tableName, "id")
	_getcoin.UserID = field.NewInt32(tableName, "userId")
	_getcoin.GetCoin = field.NewInt32(tableName, "getCoin")
	_getcoin.Adddate = field.NewTime(tableName, "adddate")
	_getcoin.Mark = field.NewBool(tableName, "mark")
	_getcoin.Isget = field.NewBool(tableName, "isget")
	_getcoin.Day = field.NewInt32(tableName, "day")

	_getcoin.fillFieldMap()

	return _getcoin
}

type getcoin struct {
	getcoinDo

	ALL     field.Asterisk
	ID      field.Int32
	UserID  field.Int32
	GetCoin field.Int32
	Adddate field.Time
	Mark    field.Bool
	Isget   field.Bool  // 是否可以领取
	Day     field.Int32 // 第几天

	fieldMap map[string]field.Expr
}

func (g getcoin) Table(newTableName string) *getcoin {
	g.getcoinDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g getcoin) As(alias string) *getcoin {
	g.getcoinDo.DO = *(g.getcoinDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *getcoin) updateTableName(table string) *getcoin {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.UserID = field.NewInt32(table, "userId")
	g.GetCoin = field.NewInt32(table, "getCoin")
	g.Adddate = field.NewTime(table, "adddate")
	g.Mark = field.NewBool(table, "mark")
	g.Isget = field.NewBool(table, "isget")
	g.Day = field.NewInt32(table, "day")

	g.fillFieldMap()

	return g
}

func (g *getcoin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *getcoin) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["id"] = g.ID
	g.fieldMap["userId"] = g.UserID
	g.fieldMap["getCoin"] = g.GetCoin
	g.fieldMap["adddate"] = g.Adddate
	g.fieldMap["mark"] = g.Mark
	g.fieldMap["isget"] = g.Isget
	g.fieldMap["day"] = g.Day
}

func (g getcoin) clone(db *gorm.DB) getcoin {
	g.getcoinDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g getcoin) replaceDB(db *gorm.DB) getcoin {
	g.getcoinDo.ReplaceDB(db)
	return g
}

type getcoinDo struct{ gen.DO }

type IGetcoinDo interface {
	gen.SubQuery
	Debug() IGetcoinDo
	WithContext(ctx context.Context) IGetcoinDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGetcoinDo
	WriteDB() IGetcoinDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGetcoinDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGetcoinDo
	Not(conds ...gen.Condition) IGetcoinDo
	Or(conds ...gen.Condition) IGetcoinDo
	Select(conds ...field.Expr) IGetcoinDo
	Where(conds ...gen.Condition) IGetcoinDo
	Order(conds ...field.Expr) IGetcoinDo
	Distinct(cols ...field.Expr) IGetcoinDo
	Omit(cols ...field.Expr) IGetcoinDo
	Join(table schema.Tabler, on ...field.Expr) IGetcoinDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGetcoinDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGetcoinDo
	Group(cols ...field.Expr) IGetcoinDo
	Having(conds ...gen.Condition) IGetcoinDo
	Limit(limit int) IGetcoinDo
	Offset(offset int) IGetcoinDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGetcoinDo
	Unscoped() IGetcoinDo
	Create(values ...*model.Getcoin) error
	CreateInBatches(values []*model.Getcoin, batchSize int) error
	Save(values ...*model.Getcoin) error
	First() (*model.Getcoin, error)
	Take() (*model.Getcoin, error)
	Last() (*model.Getcoin, error)
	Find() ([]*model.Getcoin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Getcoin, err error)
	FindInBatches(result *[]*model.Getcoin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Getcoin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGetcoinDo
	Assign(attrs ...field.AssignExpr) IGetcoinDo
	Joins(fields ...field.RelationField) IGetcoinDo
	Preload(fields ...field.RelationField) IGetcoinDo
	FirstOrInit() (*model.Getcoin, error)
	FirstOrCreate() (*model.Getcoin, error)
	FindByPage(offset int, limit int) (result []*model.Getcoin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGetcoinDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g getcoinDo) Debug() IGetcoinDo {
	return g.withDO(g.DO.Debug())
}

func (g getcoinDo) WithContext(ctx context.Context) IGetcoinDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g getcoinDo) ReadDB() IGetcoinDo {
	return g.Clauses(dbresolver.Read)
}

func (g getcoinDo) WriteDB() IGetcoinDo {
	return g.Clauses(dbresolver.Write)
}

func (g getcoinDo) Session(config *gorm.Session) IGetcoinDo {
	return g.withDO(g.DO.Session(config))
}

func (g getcoinDo) Clauses(conds ...clause.Expression) IGetcoinDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g getcoinDo) Returning(value interface{}, columns ...string) IGetcoinDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g getcoinDo) Not(conds ...gen.Condition) IGetcoinDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g getcoinDo) Or(conds ...gen.Condition) IGetcoinDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g getcoinDo) Select(conds ...field.Expr) IGetcoinDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g getcoinDo) Where(conds ...gen.Condition) IGetcoinDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g getcoinDo) Order(conds ...field.Expr) IGetcoinDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g getcoinDo) Distinct(cols ...field.Expr) IGetcoinDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g getcoinDo) Omit(cols ...field.Expr) IGetcoinDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g getcoinDo) Join(table schema.Tabler, on ...field.Expr) IGetcoinDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g getcoinDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGetcoinDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g getcoinDo) RightJoin(table schema.Tabler, on ...field.Expr) IGetcoinDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g getcoinDo) Group(cols ...field.Expr) IGetcoinDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g getcoinDo) Having(conds ...gen.Condition) IGetcoinDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g getcoinDo) Limit(limit int) IGetcoinDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g getcoinDo) Offset(offset int) IGetcoinDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g getcoinDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGetcoinDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g getcoinDo) Unscoped() IGetcoinDo {
	return g.withDO(g.DO.Unscoped())
}

func (g getcoinDo) Create(values ...*model.Getcoin) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g getcoinDo) CreateInBatches(values []*model.Getcoin, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g getcoinDo) Save(values ...*model.Getcoin) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g getcoinDo) First() (*model.Getcoin, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Getcoin), nil
	}
}

func (g getcoinDo) Take() (*model.Getcoin, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Getcoin), nil
	}
}

func (g getcoinDo) Last() (*model.Getcoin, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Getcoin), nil
	}
}

func (g getcoinDo) Find() ([]*model.Getcoin, error) {
	result, err := g.DO.Find()
	return result.([]*model.Getcoin), err
}

func (g getcoinDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Getcoin, err error) {
	buf := make([]*model.Getcoin, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g getcoinDo) FindInBatches(result *[]*model.Getcoin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g getcoinDo) Attrs(attrs ...field.AssignExpr) IGetcoinDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g getcoinDo) Assign(attrs ...field.AssignExpr) IGetcoinDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g getcoinDo) Joins(fields ...field.RelationField) IGetcoinDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g getcoinDo) Preload(fields ...field.RelationField) IGetcoinDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g getcoinDo) FirstOrInit() (*model.Getcoin, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Getcoin), nil
	}
}

func (g getcoinDo) FirstOrCreate() (*model.Getcoin, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Getcoin), nil
	}
}

func (g getcoinDo) FindByPage(offset int, limit int) (result []*model.Getcoin, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g getcoinDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g getcoinDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g getcoinDo) Delete(models ...*model.Getcoin) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *getcoinDo) withDO(do gen.Dao) *getcoinDo {
	g.DO = *do.(*gen.DO)
	return g
}
