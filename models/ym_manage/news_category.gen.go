// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newNewsCategory(db *gorm.DB, opts ...gen.DOOption) newsCategory {
	_newsCategory := newsCategory{}

	_newsCategory.newsCategoryDo.UseDB(db, opts...)
	_newsCategory.newsCategoryDo.UseModel(&model.NewsCategory{})

	tableName := _newsCategory.newsCategoryDo.TableName()
	_newsCategory.ALL = field.NewAsterisk(tableName)
	_newsCategory.ID = field.NewUint32(tableName, "id")
	_newsCategory.Name = field.NewString(tableName, "name")

	_newsCategory.fillFieldMap()

	return _newsCategory
}

type newsCategory struct {
	newsCategoryDo

	ALL  field.Asterisk
	ID   field.Uint32
	Name field.String

	fieldMap map[string]field.Expr
}

func (n newsCategory) Table(newTableName string) *newsCategory {
	n.newsCategoryDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n newsCategory) As(alias string) *newsCategory {
	n.newsCategoryDo.DO = *(n.newsCategoryDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *newsCategory) updateTableName(table string) *newsCategory {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewUint32(table, "id")
	n.Name = field.NewString(table, "name")

	n.fillFieldMap()

	return n
}

func (n *newsCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *newsCategory) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 2)
	n.fieldMap["id"] = n.ID
	n.fieldMap["name"] = n.Name
}

func (n newsCategory) clone(db *gorm.DB) newsCategory {
	n.newsCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n newsCategory) replaceDB(db *gorm.DB) newsCategory {
	n.newsCategoryDo.ReplaceDB(db)
	return n
}

type newsCategoryDo struct{ gen.DO }

type INewsCategoryDo interface {
	gen.SubQuery
	Debug() INewsCategoryDo
	WithContext(ctx context.Context) INewsCategoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INewsCategoryDo
	WriteDB() INewsCategoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INewsCategoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INewsCategoryDo
	Not(conds ...gen.Condition) INewsCategoryDo
	Or(conds ...gen.Condition) INewsCategoryDo
	Select(conds ...field.Expr) INewsCategoryDo
	Where(conds ...gen.Condition) INewsCategoryDo
	Order(conds ...field.Expr) INewsCategoryDo
	Distinct(cols ...field.Expr) INewsCategoryDo
	Omit(cols ...field.Expr) INewsCategoryDo
	Join(table schema.Tabler, on ...field.Expr) INewsCategoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INewsCategoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) INewsCategoryDo
	Group(cols ...field.Expr) INewsCategoryDo
	Having(conds ...gen.Condition) INewsCategoryDo
	Limit(limit int) INewsCategoryDo
	Offset(offset int) INewsCategoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INewsCategoryDo
	Unscoped() INewsCategoryDo
	Create(values ...*model.NewsCategory) error
	CreateInBatches(values []*model.NewsCategory, batchSize int) error
	Save(values ...*model.NewsCategory) error
	First() (*model.NewsCategory, error)
	Take() (*model.NewsCategory, error)
	Last() (*model.NewsCategory, error)
	Find() ([]*model.NewsCategory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NewsCategory, err error)
	FindInBatches(result *[]*model.NewsCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NewsCategory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INewsCategoryDo
	Assign(attrs ...field.AssignExpr) INewsCategoryDo
	Joins(fields ...field.RelationField) INewsCategoryDo
	Preload(fields ...field.RelationField) INewsCategoryDo
	FirstOrInit() (*model.NewsCategory, error)
	FirstOrCreate() (*model.NewsCategory, error)
	FindByPage(offset int, limit int) (result []*model.NewsCategory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INewsCategoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n newsCategoryDo) Debug() INewsCategoryDo {
	return n.withDO(n.DO.Debug())
}

func (n newsCategoryDo) WithContext(ctx context.Context) INewsCategoryDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n newsCategoryDo) ReadDB() INewsCategoryDo {
	return n.Clauses(dbresolver.Read)
}

func (n newsCategoryDo) WriteDB() INewsCategoryDo {
	return n.Clauses(dbresolver.Write)
}

func (n newsCategoryDo) Session(config *gorm.Session) INewsCategoryDo {
	return n.withDO(n.DO.Session(config))
}

func (n newsCategoryDo) Clauses(conds ...clause.Expression) INewsCategoryDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n newsCategoryDo) Returning(value interface{}, columns ...string) INewsCategoryDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n newsCategoryDo) Not(conds ...gen.Condition) INewsCategoryDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n newsCategoryDo) Or(conds ...gen.Condition) INewsCategoryDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n newsCategoryDo) Select(conds ...field.Expr) INewsCategoryDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n newsCategoryDo) Where(conds ...gen.Condition) INewsCategoryDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n newsCategoryDo) Order(conds ...field.Expr) INewsCategoryDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n newsCategoryDo) Distinct(cols ...field.Expr) INewsCategoryDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n newsCategoryDo) Omit(cols ...field.Expr) INewsCategoryDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n newsCategoryDo) Join(table schema.Tabler, on ...field.Expr) INewsCategoryDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n newsCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) INewsCategoryDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n newsCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) INewsCategoryDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n newsCategoryDo) Group(cols ...field.Expr) INewsCategoryDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n newsCategoryDo) Having(conds ...gen.Condition) INewsCategoryDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n newsCategoryDo) Limit(limit int) INewsCategoryDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n newsCategoryDo) Offset(offset int) INewsCategoryDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n newsCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INewsCategoryDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n newsCategoryDo) Unscoped() INewsCategoryDo {
	return n.withDO(n.DO.Unscoped())
}

func (n newsCategoryDo) Create(values ...*model.NewsCategory) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n newsCategoryDo) CreateInBatches(values []*model.NewsCategory, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n newsCategoryDo) Save(values ...*model.NewsCategory) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n newsCategoryDo) First() (*model.NewsCategory, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsCategory), nil
	}
}

func (n newsCategoryDo) Take() (*model.NewsCategory, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsCategory), nil
	}
}

func (n newsCategoryDo) Last() (*model.NewsCategory, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsCategory), nil
	}
}

func (n newsCategoryDo) Find() ([]*model.NewsCategory, error) {
	result, err := n.DO.Find()
	return result.([]*model.NewsCategory), err
}

func (n newsCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NewsCategory, err error) {
	buf := make([]*model.NewsCategory, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n newsCategoryDo) FindInBatches(result *[]*model.NewsCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n newsCategoryDo) Attrs(attrs ...field.AssignExpr) INewsCategoryDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n newsCategoryDo) Assign(attrs ...field.AssignExpr) INewsCategoryDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n newsCategoryDo) Joins(fields ...field.RelationField) INewsCategoryDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n newsCategoryDo) Preload(fields ...field.RelationField) INewsCategoryDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n newsCategoryDo) FirstOrInit() (*model.NewsCategory, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsCategory), nil
	}
}

func (n newsCategoryDo) FirstOrCreate() (*model.NewsCategory, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsCategory), nil
	}
}

func (n newsCategoryDo) FindByPage(offset int, limit int) (result []*model.NewsCategory, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n newsCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n newsCategoryDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n newsCategoryDo) Delete(models ...*model.NewsCategory) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *newsCategoryDo) withDO(do gen.Dao) *newsCategoryDo {
	n.DO = *do.(*gen.DO)
	return n
}
