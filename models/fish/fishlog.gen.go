// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fish

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newFishlog(db *gorm.DB, opts ...gen.DOOption) fishlog {
	_fishlog := fishlog{}

	_fishlog.fishlogDo.UseDB(db, opts...)
	_fishlog.fishlogDo.UseModel(&model.Fishlog{})

	tableName := _fishlog.fishlogDo.TableName()
	_fishlog.ALL = field.NewAsterisk(tableName)
	_fishlog.ID = field.NewInt32(tableName, "id")
	_fishlog.Userid = field.NewInt32(tableName, "userid")
	_fishlog.Usecoin = field.NewInt32(tableName, "usecoin")
	_fishlog.Wincoin = field.NewInt32(tableName, "wincoin")
	_fishlog.BalanceTime = field.NewTime(tableName, "balanceTime")
	_fishlog.Mark = field.NewBool(tableName, "mark")
	_fishlog.ServerID = field.NewInt32(tableName, "serverId")

	_fishlog.fillFieldMap()

	return _fishlog
}

type fishlog struct {
	fishlogDo

	ALL         field.Asterisk
	ID          field.Int32
	Userid      field.Int32
	Usecoin     field.Int32
	Wincoin     field.Int32
	BalanceTime field.Time
	Mark        field.Bool
	ServerID    field.Int32

	fieldMap map[string]field.Expr
}

func (f fishlog) Table(newTableName string) *fishlog {
	f.fishlogDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fishlog) As(alias string) *fishlog {
	f.fishlogDo.DO = *(f.fishlogDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fishlog) updateTableName(table string) *fishlog {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Userid = field.NewInt32(table, "userid")
	f.Usecoin = field.NewInt32(table, "usecoin")
	f.Wincoin = field.NewInt32(table, "wincoin")
	f.BalanceTime = field.NewTime(table, "balanceTime")
	f.Mark = field.NewBool(table, "mark")
	f.ServerID = field.NewInt32(table, "serverId")

	f.fillFieldMap()

	return f
}

func (f *fishlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fishlog) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["userid"] = f.Userid
	f.fieldMap["usecoin"] = f.Usecoin
	f.fieldMap["wincoin"] = f.Wincoin
	f.fieldMap["balanceTime"] = f.BalanceTime
	f.fieldMap["mark"] = f.Mark
	f.fieldMap["serverId"] = f.ServerID
}

func (f fishlog) clone(db *gorm.DB) fishlog {
	f.fishlogDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fishlog) replaceDB(db *gorm.DB) fishlog {
	f.fishlogDo.ReplaceDB(db)
	return f
}

type fishlogDo struct{ gen.DO }

type IFishlogDo interface {
	gen.SubQuery
	Debug() IFishlogDo
	WithContext(ctx context.Context) IFishlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFishlogDo
	WriteDB() IFishlogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFishlogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFishlogDo
	Not(conds ...gen.Condition) IFishlogDo
	Or(conds ...gen.Condition) IFishlogDo
	Select(conds ...field.Expr) IFishlogDo
	Where(conds ...gen.Condition) IFishlogDo
	Order(conds ...field.Expr) IFishlogDo
	Distinct(cols ...field.Expr) IFishlogDo
	Omit(cols ...field.Expr) IFishlogDo
	Join(table schema.Tabler, on ...field.Expr) IFishlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFishlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFishlogDo
	Group(cols ...field.Expr) IFishlogDo
	Having(conds ...gen.Condition) IFishlogDo
	Limit(limit int) IFishlogDo
	Offset(offset int) IFishlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFishlogDo
	Unscoped() IFishlogDo
	Create(values ...*model.Fishlog) error
	CreateInBatches(values []*model.Fishlog, batchSize int) error
	Save(values ...*model.Fishlog) error
	First() (*model.Fishlog, error)
	Take() (*model.Fishlog, error)
	Last() (*model.Fishlog, error)
	Find() ([]*model.Fishlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Fishlog, err error)
	FindInBatches(result *[]*model.Fishlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Fishlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFishlogDo
	Assign(attrs ...field.AssignExpr) IFishlogDo
	Joins(fields ...field.RelationField) IFishlogDo
	Preload(fields ...field.RelationField) IFishlogDo
	FirstOrInit() (*model.Fishlog, error)
	FirstOrCreate() (*model.Fishlog, error)
	FindByPage(offset int, limit int) (result []*model.Fishlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFishlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fishlogDo) Debug() IFishlogDo {
	return f.withDO(f.DO.Debug())
}

func (f fishlogDo) WithContext(ctx context.Context) IFishlogDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fishlogDo) ReadDB() IFishlogDo {
	return f.Clauses(dbresolver.Read)
}

func (f fishlogDo) WriteDB() IFishlogDo {
	return f.Clauses(dbresolver.Write)
}

func (f fishlogDo) Session(config *gorm.Session) IFishlogDo {
	return f.withDO(f.DO.Session(config))
}

func (f fishlogDo) Clauses(conds ...clause.Expression) IFishlogDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fishlogDo) Returning(value interface{}, columns ...string) IFishlogDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fishlogDo) Not(conds ...gen.Condition) IFishlogDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fishlogDo) Or(conds ...gen.Condition) IFishlogDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fishlogDo) Select(conds ...field.Expr) IFishlogDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fishlogDo) Where(conds ...gen.Condition) IFishlogDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fishlogDo) Order(conds ...field.Expr) IFishlogDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fishlogDo) Distinct(cols ...field.Expr) IFishlogDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fishlogDo) Omit(cols ...field.Expr) IFishlogDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fishlogDo) Join(table schema.Tabler, on ...field.Expr) IFishlogDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fishlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFishlogDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fishlogDo) RightJoin(table schema.Tabler, on ...field.Expr) IFishlogDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fishlogDo) Group(cols ...field.Expr) IFishlogDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fishlogDo) Having(conds ...gen.Condition) IFishlogDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fishlogDo) Limit(limit int) IFishlogDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fishlogDo) Offset(offset int) IFishlogDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fishlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFishlogDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fishlogDo) Unscoped() IFishlogDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fishlogDo) Create(values ...*model.Fishlog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fishlogDo) CreateInBatches(values []*model.Fishlog, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fishlogDo) Save(values ...*model.Fishlog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fishlogDo) First() (*model.Fishlog, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fishlog), nil
	}
}

func (f fishlogDo) Take() (*model.Fishlog, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fishlog), nil
	}
}

func (f fishlogDo) Last() (*model.Fishlog, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fishlog), nil
	}
}

func (f fishlogDo) Find() ([]*model.Fishlog, error) {
	result, err := f.DO.Find()
	return result.([]*model.Fishlog), err
}

func (f fishlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Fishlog, err error) {
	buf := make([]*model.Fishlog, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fishlogDo) FindInBatches(result *[]*model.Fishlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fishlogDo) Attrs(attrs ...field.AssignExpr) IFishlogDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fishlogDo) Assign(attrs ...field.AssignExpr) IFishlogDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fishlogDo) Joins(fields ...field.RelationField) IFishlogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fishlogDo) Preload(fields ...field.RelationField) IFishlogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fishlogDo) FirstOrInit() (*model.Fishlog, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fishlog), nil
	}
}

func (f fishlogDo) FirstOrCreate() (*model.Fishlog, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fishlog), nil
	}
}

func (f fishlogDo) FindByPage(offset int, limit int) (result []*model.Fishlog, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fishlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fishlogDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fishlogDo) Delete(models ...*model.Fishlog) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fishlogDo) withDO(do gen.Dao) *fishlogDo {
	f.DO = *do.(*gen.DO)
	return f
}
