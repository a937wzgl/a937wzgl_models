// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package landlords

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLogBaoming(db *gorm.DB, opts ...gen.DOOption) logBaoming {
	_logBaoming := logBaoming{}

	_logBaoming.logBaomingDo.UseDB(db, opts...)
	_logBaoming.logBaomingDo.UseModel(&model.LogBaoming{})

	tableName := _logBaoming.logBaomingDo.TableName()
	_logBaoming.ALL = field.NewAsterisk(tableName)
	_logBaoming.UID = field.NewUint32(tableName, "uid")
	_logBaoming.Allc = field.NewUint32(tableName, "allc")
	_logBaoming.Lostc = field.NewUint32(tableName, "lostc")
	_logBaoming.Play = field.NewUint32(tableName, "play")
	_logBaoming.WinAll = field.NewUint32(tableName, "win_all")
	_logBaoming.DizhuNum = field.NewUint32(tableName, "dizhu_num")
	_logBaoming.WinDizhu = field.NewUint32(tableName, "win_dizhu")
	_logBaoming.BmScore = field.NewUint32(tableName, "bm_score")
	_logBaoming.Result = field.NewUint32(tableName, "result")

	_logBaoming.fillFieldMap()

	return _logBaoming
}

type logBaoming struct {
	logBaomingDo

	ALL      field.Asterisk
	UID      field.Uint32
	Allc     field.Uint32
	Lostc    field.Uint32
	Play     field.Uint32
	WinAll   field.Uint32
	DizhuNum field.Uint32
	WinDizhu field.Uint32
	BmScore  field.Uint32
	Result   field.Uint32

	fieldMap map[string]field.Expr
}

func (l logBaoming) Table(newTableName string) *logBaoming {
	l.logBaomingDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logBaoming) As(alias string) *logBaoming {
	l.logBaomingDo.DO = *(l.logBaomingDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logBaoming) updateTableName(table string) *logBaoming {
	l.ALL = field.NewAsterisk(table)
	l.UID = field.NewUint32(table, "uid")
	l.Allc = field.NewUint32(table, "allc")
	l.Lostc = field.NewUint32(table, "lostc")
	l.Play = field.NewUint32(table, "play")
	l.WinAll = field.NewUint32(table, "win_all")
	l.DizhuNum = field.NewUint32(table, "dizhu_num")
	l.WinDizhu = field.NewUint32(table, "win_dizhu")
	l.BmScore = field.NewUint32(table, "bm_score")
	l.Result = field.NewUint32(table, "result")

	l.fillFieldMap()

	return l
}

func (l *logBaoming) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logBaoming) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 9)
	l.fieldMap["uid"] = l.UID
	l.fieldMap["allc"] = l.Allc
	l.fieldMap["lostc"] = l.Lostc
	l.fieldMap["play"] = l.Play
	l.fieldMap["win_all"] = l.WinAll
	l.fieldMap["dizhu_num"] = l.DizhuNum
	l.fieldMap["win_dizhu"] = l.WinDizhu
	l.fieldMap["bm_score"] = l.BmScore
	l.fieldMap["result"] = l.Result
}

func (l logBaoming) clone(db *gorm.DB) logBaoming {
	l.logBaomingDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logBaoming) replaceDB(db *gorm.DB) logBaoming {
	l.logBaomingDo.ReplaceDB(db)
	return l
}

type logBaomingDo struct{ gen.DO }

type ILogBaomingDo interface {
	gen.SubQuery
	Debug() ILogBaomingDo
	WithContext(ctx context.Context) ILogBaomingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILogBaomingDo
	WriteDB() ILogBaomingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILogBaomingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILogBaomingDo
	Not(conds ...gen.Condition) ILogBaomingDo
	Or(conds ...gen.Condition) ILogBaomingDo
	Select(conds ...field.Expr) ILogBaomingDo
	Where(conds ...gen.Condition) ILogBaomingDo
	Order(conds ...field.Expr) ILogBaomingDo
	Distinct(cols ...field.Expr) ILogBaomingDo
	Omit(cols ...field.Expr) ILogBaomingDo
	Join(table schema.Tabler, on ...field.Expr) ILogBaomingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILogBaomingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILogBaomingDo
	Group(cols ...field.Expr) ILogBaomingDo
	Having(conds ...gen.Condition) ILogBaomingDo
	Limit(limit int) ILogBaomingDo
	Offset(offset int) ILogBaomingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILogBaomingDo
	Unscoped() ILogBaomingDo
	Create(values ...*model.LogBaoming) error
	CreateInBatches(values []*model.LogBaoming, batchSize int) error
	Save(values ...*model.LogBaoming) error
	First() (*model.LogBaoming, error)
	Take() (*model.LogBaoming, error)
	Last() (*model.LogBaoming, error)
	Find() ([]*model.LogBaoming, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogBaoming, err error)
	FindInBatches(result *[]*model.LogBaoming, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LogBaoming) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILogBaomingDo
	Assign(attrs ...field.AssignExpr) ILogBaomingDo
	Joins(fields ...field.RelationField) ILogBaomingDo
	Preload(fields ...field.RelationField) ILogBaomingDo
	FirstOrInit() (*model.LogBaoming, error)
	FirstOrCreate() (*model.LogBaoming, error)
	FindByPage(offset int, limit int) (result []*model.LogBaoming, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILogBaomingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l logBaomingDo) Debug() ILogBaomingDo {
	return l.withDO(l.DO.Debug())
}

func (l logBaomingDo) WithContext(ctx context.Context) ILogBaomingDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logBaomingDo) ReadDB() ILogBaomingDo {
	return l.Clauses(dbresolver.Read)
}

func (l logBaomingDo) WriteDB() ILogBaomingDo {
	return l.Clauses(dbresolver.Write)
}

func (l logBaomingDo) Session(config *gorm.Session) ILogBaomingDo {
	return l.withDO(l.DO.Session(config))
}

func (l logBaomingDo) Clauses(conds ...clause.Expression) ILogBaomingDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logBaomingDo) Returning(value interface{}, columns ...string) ILogBaomingDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logBaomingDo) Not(conds ...gen.Condition) ILogBaomingDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logBaomingDo) Or(conds ...gen.Condition) ILogBaomingDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logBaomingDo) Select(conds ...field.Expr) ILogBaomingDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logBaomingDo) Where(conds ...gen.Condition) ILogBaomingDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logBaomingDo) Order(conds ...field.Expr) ILogBaomingDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logBaomingDo) Distinct(cols ...field.Expr) ILogBaomingDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logBaomingDo) Omit(cols ...field.Expr) ILogBaomingDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logBaomingDo) Join(table schema.Tabler, on ...field.Expr) ILogBaomingDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logBaomingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILogBaomingDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logBaomingDo) RightJoin(table schema.Tabler, on ...field.Expr) ILogBaomingDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logBaomingDo) Group(cols ...field.Expr) ILogBaomingDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logBaomingDo) Having(conds ...gen.Condition) ILogBaomingDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logBaomingDo) Limit(limit int) ILogBaomingDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logBaomingDo) Offset(offset int) ILogBaomingDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logBaomingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILogBaomingDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logBaomingDo) Unscoped() ILogBaomingDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logBaomingDo) Create(values ...*model.LogBaoming) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logBaomingDo) CreateInBatches(values []*model.LogBaoming, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logBaomingDo) Save(values ...*model.LogBaoming) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logBaomingDo) First() (*model.LogBaoming, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogBaoming), nil
	}
}

func (l logBaomingDo) Take() (*model.LogBaoming, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogBaoming), nil
	}
}

func (l logBaomingDo) Last() (*model.LogBaoming, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogBaoming), nil
	}
}

func (l logBaomingDo) Find() ([]*model.LogBaoming, error) {
	result, err := l.DO.Find()
	return result.([]*model.LogBaoming), err
}

func (l logBaomingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogBaoming, err error) {
	buf := make([]*model.LogBaoming, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logBaomingDo) FindInBatches(result *[]*model.LogBaoming, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logBaomingDo) Attrs(attrs ...field.AssignExpr) ILogBaomingDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logBaomingDo) Assign(attrs ...field.AssignExpr) ILogBaomingDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logBaomingDo) Joins(fields ...field.RelationField) ILogBaomingDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logBaomingDo) Preload(fields ...field.RelationField) ILogBaomingDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logBaomingDo) FirstOrInit() (*model.LogBaoming, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogBaoming), nil
	}
}

func (l logBaomingDo) FirstOrCreate() (*model.LogBaoming, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogBaoming), nil
	}
}

func (l logBaomingDo) FindByPage(offset int, limit int) (result []*model.LogBaoming, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logBaomingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logBaomingDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logBaomingDo) Delete(models ...*model.LogBaoming) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logBaomingDo) withDO(do gen.Dao) *logBaomingDo {
	l.DO = *do.(*gen.DO)
	return l
}
