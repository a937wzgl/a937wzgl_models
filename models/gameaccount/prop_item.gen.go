// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newPropItem(db *gorm.DB, opts ...gen.DOOption) propItem {
	_propItem := propItem{}

	_propItem.propItemDo.UseDB(db, opts...)
	_propItem.propItemDo.UseModel(&model.PropItem{})

	tableName := _propItem.propItemDo.TableName()
	_propItem.ALL = field.NewAsterisk(tableName)
	_propItem.Userid = field.NewUint32(tableName, "userid")
	_propItem.Propid = field.NewUint32(tableName, "propid")
	_propItem.Propcount = field.NewUint32(tableName, "propcount")

	_propItem.fillFieldMap()

	return _propItem
}

type propItem struct {
	propItemDo

	ALL       field.Asterisk
	Userid    field.Uint32 // 用户ID
	Propid    field.Uint32 // 道具ID 1礼品券 2喇叭
	Propcount field.Uint32 // 道具数量

	fieldMap map[string]field.Expr
}

func (p propItem) Table(newTableName string) *propItem {
	p.propItemDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p propItem) As(alias string) *propItem {
	p.propItemDo.DO = *(p.propItemDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *propItem) updateTableName(table string) *propItem {
	p.ALL = field.NewAsterisk(table)
	p.Userid = field.NewUint32(table, "userid")
	p.Propid = field.NewUint32(table, "propid")
	p.Propcount = field.NewUint32(table, "propcount")

	p.fillFieldMap()

	return p
}

func (p *propItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *propItem) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["userid"] = p.Userid
	p.fieldMap["propid"] = p.Propid
	p.fieldMap["propcount"] = p.Propcount
}

func (p propItem) clone(db *gorm.DB) propItem {
	p.propItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p propItem) replaceDB(db *gorm.DB) propItem {
	p.propItemDo.ReplaceDB(db)
	return p
}

type propItemDo struct{ gen.DO }

type IPropItemDo interface {
	gen.SubQuery
	Debug() IPropItemDo
	WithContext(ctx context.Context) IPropItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPropItemDo
	WriteDB() IPropItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPropItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPropItemDo
	Not(conds ...gen.Condition) IPropItemDo
	Or(conds ...gen.Condition) IPropItemDo
	Select(conds ...field.Expr) IPropItemDo
	Where(conds ...gen.Condition) IPropItemDo
	Order(conds ...field.Expr) IPropItemDo
	Distinct(cols ...field.Expr) IPropItemDo
	Omit(cols ...field.Expr) IPropItemDo
	Join(table schema.Tabler, on ...field.Expr) IPropItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPropItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPropItemDo
	Group(cols ...field.Expr) IPropItemDo
	Having(conds ...gen.Condition) IPropItemDo
	Limit(limit int) IPropItemDo
	Offset(offset int) IPropItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPropItemDo
	Unscoped() IPropItemDo
	Create(values ...*model.PropItem) error
	CreateInBatches(values []*model.PropItem, batchSize int) error
	Save(values ...*model.PropItem) error
	First() (*model.PropItem, error)
	Take() (*model.PropItem, error)
	Last() (*model.PropItem, error)
	Find() ([]*model.PropItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PropItem, err error)
	FindInBatches(result *[]*model.PropItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PropItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPropItemDo
	Assign(attrs ...field.AssignExpr) IPropItemDo
	Joins(fields ...field.RelationField) IPropItemDo
	Preload(fields ...field.RelationField) IPropItemDo
	FirstOrInit() (*model.PropItem, error)
	FirstOrCreate() (*model.PropItem, error)
	FindByPage(offset int, limit int) (result []*model.PropItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPropItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p propItemDo) Debug() IPropItemDo {
	return p.withDO(p.DO.Debug())
}

func (p propItemDo) WithContext(ctx context.Context) IPropItemDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p propItemDo) ReadDB() IPropItemDo {
	return p.Clauses(dbresolver.Read)
}

func (p propItemDo) WriteDB() IPropItemDo {
	return p.Clauses(dbresolver.Write)
}

func (p propItemDo) Session(config *gorm.Session) IPropItemDo {
	return p.withDO(p.DO.Session(config))
}

func (p propItemDo) Clauses(conds ...clause.Expression) IPropItemDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p propItemDo) Returning(value interface{}, columns ...string) IPropItemDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p propItemDo) Not(conds ...gen.Condition) IPropItemDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p propItemDo) Or(conds ...gen.Condition) IPropItemDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p propItemDo) Select(conds ...field.Expr) IPropItemDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p propItemDo) Where(conds ...gen.Condition) IPropItemDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p propItemDo) Order(conds ...field.Expr) IPropItemDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p propItemDo) Distinct(cols ...field.Expr) IPropItemDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p propItemDo) Omit(cols ...field.Expr) IPropItemDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p propItemDo) Join(table schema.Tabler, on ...field.Expr) IPropItemDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p propItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPropItemDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p propItemDo) RightJoin(table schema.Tabler, on ...field.Expr) IPropItemDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p propItemDo) Group(cols ...field.Expr) IPropItemDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p propItemDo) Having(conds ...gen.Condition) IPropItemDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p propItemDo) Limit(limit int) IPropItemDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p propItemDo) Offset(offset int) IPropItemDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p propItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPropItemDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p propItemDo) Unscoped() IPropItemDo {
	return p.withDO(p.DO.Unscoped())
}

func (p propItemDo) Create(values ...*model.PropItem) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p propItemDo) CreateInBatches(values []*model.PropItem, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p propItemDo) Save(values ...*model.PropItem) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p propItemDo) First() (*model.PropItem, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropItem), nil
	}
}

func (p propItemDo) Take() (*model.PropItem, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropItem), nil
	}
}

func (p propItemDo) Last() (*model.PropItem, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropItem), nil
	}
}

func (p propItemDo) Find() ([]*model.PropItem, error) {
	result, err := p.DO.Find()
	return result.([]*model.PropItem), err
}

func (p propItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PropItem, err error) {
	buf := make([]*model.PropItem, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p propItemDo) FindInBatches(result *[]*model.PropItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p propItemDo) Attrs(attrs ...field.AssignExpr) IPropItemDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p propItemDo) Assign(attrs ...field.AssignExpr) IPropItemDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p propItemDo) Joins(fields ...field.RelationField) IPropItemDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p propItemDo) Preload(fields ...field.RelationField) IPropItemDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p propItemDo) FirstOrInit() (*model.PropItem, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropItem), nil
	}
}

func (p propItemDo) FirstOrCreate() (*model.PropItem, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropItem), nil
	}
}

func (p propItemDo) FindByPage(offset int, limit int) (result []*model.PropItem, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p propItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p propItemDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p propItemDo) Delete(models ...*model.PropItem) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *propItemDo) withDO(do gen.Dao) *propItemDo {
	p.DO = *do.(*gen.DO)
	return p
}
