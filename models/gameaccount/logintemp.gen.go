// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLogintemp(db *gorm.DB, opts ...gen.DOOption) logintemp {
	_logintemp := logintemp{}

	_logintemp.logintempDo.UseDB(db, opts...)
	_logintemp.logintempDo.UseModel(&model.Logintemp{})

	tableName := _logintemp.logintempDo.TableName()
	_logintemp.ALL = field.NewAsterisk(tableName)
	_logintemp.Loginid = field.NewInt32(tableName, "loginid")
	_logintemp.Logincode = field.NewString(tableName, "logincode")
	_logintemp.LoginDate = field.NewTime(tableName, "loginDate")

	_logintemp.fillFieldMap()

	return _logintemp
}

type logintemp struct {
	logintempDo

	ALL       field.Asterisk
	Loginid   field.Int32
	Logincode field.String
	LoginDate field.Time

	fieldMap map[string]field.Expr
}

func (l logintemp) Table(newTableName string) *logintemp {
	l.logintempDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logintemp) As(alias string) *logintemp {
	l.logintempDo.DO = *(l.logintempDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logintemp) updateTableName(table string) *logintemp {
	l.ALL = field.NewAsterisk(table)
	l.Loginid = field.NewInt32(table, "loginid")
	l.Logincode = field.NewString(table, "logincode")
	l.LoginDate = field.NewTime(table, "loginDate")

	l.fillFieldMap()

	return l
}

func (l *logintemp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logintemp) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 3)
	l.fieldMap["loginid"] = l.Loginid
	l.fieldMap["logincode"] = l.Logincode
	l.fieldMap["loginDate"] = l.LoginDate
}

func (l logintemp) clone(db *gorm.DB) logintemp {
	l.logintempDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logintemp) replaceDB(db *gorm.DB) logintemp {
	l.logintempDo.ReplaceDB(db)
	return l
}

type logintempDo struct{ gen.DO }

type ILogintempDo interface {
	gen.SubQuery
	Debug() ILogintempDo
	WithContext(ctx context.Context) ILogintempDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILogintempDo
	WriteDB() ILogintempDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILogintempDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILogintempDo
	Not(conds ...gen.Condition) ILogintempDo
	Or(conds ...gen.Condition) ILogintempDo
	Select(conds ...field.Expr) ILogintempDo
	Where(conds ...gen.Condition) ILogintempDo
	Order(conds ...field.Expr) ILogintempDo
	Distinct(cols ...field.Expr) ILogintempDo
	Omit(cols ...field.Expr) ILogintempDo
	Join(table schema.Tabler, on ...field.Expr) ILogintempDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILogintempDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILogintempDo
	Group(cols ...field.Expr) ILogintempDo
	Having(conds ...gen.Condition) ILogintempDo
	Limit(limit int) ILogintempDo
	Offset(offset int) ILogintempDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILogintempDo
	Unscoped() ILogintempDo
	Create(values ...*model.Logintemp) error
	CreateInBatches(values []*model.Logintemp, batchSize int) error
	Save(values ...*model.Logintemp) error
	First() (*model.Logintemp, error)
	Take() (*model.Logintemp, error)
	Last() (*model.Logintemp, error)
	Find() ([]*model.Logintemp, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Logintemp, err error)
	FindInBatches(result *[]*model.Logintemp, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Logintemp) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILogintempDo
	Assign(attrs ...field.AssignExpr) ILogintempDo
	Joins(fields ...field.RelationField) ILogintempDo
	Preload(fields ...field.RelationField) ILogintempDo
	FirstOrInit() (*model.Logintemp, error)
	FirstOrCreate() (*model.Logintemp, error)
	FindByPage(offset int, limit int) (result []*model.Logintemp, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILogintempDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l logintempDo) Debug() ILogintempDo {
	return l.withDO(l.DO.Debug())
}

func (l logintempDo) WithContext(ctx context.Context) ILogintempDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logintempDo) ReadDB() ILogintempDo {
	return l.Clauses(dbresolver.Read)
}

func (l logintempDo) WriteDB() ILogintempDo {
	return l.Clauses(dbresolver.Write)
}

func (l logintempDo) Session(config *gorm.Session) ILogintempDo {
	return l.withDO(l.DO.Session(config))
}

func (l logintempDo) Clauses(conds ...clause.Expression) ILogintempDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logintempDo) Returning(value interface{}, columns ...string) ILogintempDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logintempDo) Not(conds ...gen.Condition) ILogintempDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logintempDo) Or(conds ...gen.Condition) ILogintempDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logintempDo) Select(conds ...field.Expr) ILogintempDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logintempDo) Where(conds ...gen.Condition) ILogintempDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logintempDo) Order(conds ...field.Expr) ILogintempDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logintempDo) Distinct(cols ...field.Expr) ILogintempDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logintempDo) Omit(cols ...field.Expr) ILogintempDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logintempDo) Join(table schema.Tabler, on ...field.Expr) ILogintempDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logintempDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILogintempDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logintempDo) RightJoin(table schema.Tabler, on ...field.Expr) ILogintempDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logintempDo) Group(cols ...field.Expr) ILogintempDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logintempDo) Having(conds ...gen.Condition) ILogintempDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logintempDo) Limit(limit int) ILogintempDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logintempDo) Offset(offset int) ILogintempDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logintempDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILogintempDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logintempDo) Unscoped() ILogintempDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logintempDo) Create(values ...*model.Logintemp) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logintempDo) CreateInBatches(values []*model.Logintemp, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logintempDo) Save(values ...*model.Logintemp) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logintempDo) First() (*model.Logintemp, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Logintemp), nil
	}
}

func (l logintempDo) Take() (*model.Logintemp, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Logintemp), nil
	}
}

func (l logintempDo) Last() (*model.Logintemp, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Logintemp), nil
	}
}

func (l logintempDo) Find() ([]*model.Logintemp, error) {
	result, err := l.DO.Find()
	return result.([]*model.Logintemp), err
}

func (l logintempDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Logintemp, err error) {
	buf := make([]*model.Logintemp, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logintempDo) FindInBatches(result *[]*model.Logintemp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logintempDo) Attrs(attrs ...field.AssignExpr) ILogintempDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logintempDo) Assign(attrs ...field.AssignExpr) ILogintempDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logintempDo) Joins(fields ...field.RelationField) ILogintempDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logintempDo) Preload(fields ...field.RelationField) ILogintempDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logintempDo) FirstOrInit() (*model.Logintemp, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Logintemp), nil
	}
}

func (l logintempDo) FirstOrCreate() (*model.Logintemp, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Logintemp), nil
	}
}

func (l logintempDo) FindByPage(offset int, limit int) (result []*model.Logintemp, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logintempDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logintempDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logintempDo) Delete(models ...*model.Logintemp) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logintempDo) withDO(do gen.Dao) *logintempDo {
	l.DO = *do.(*gen.DO)
	return l
}
