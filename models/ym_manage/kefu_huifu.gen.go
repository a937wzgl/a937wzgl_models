// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newKefuHuifu(db *gorm.DB, opts ...gen.DOOption) kefuHuifu {
	_kefuHuifu := kefuHuifu{}

	_kefuHuifu.kefuHuifuDo.UseDB(db, opts...)
	_kefuHuifu.kefuHuifuDo.UseModel(&model.KefuHuifu{})

	tableName := _kefuHuifu.kefuHuifuDo.TableName()
	_kefuHuifu.ALL = field.NewAsterisk(tableName)
	_kefuHuifu.ID = field.NewUint32(tableName, "id")
	_kefuHuifu.Key = field.NewString(tableName, "key")
	_kefuHuifu.Txt1 = field.NewString(tableName, "txt1")
	_kefuHuifu.Txt2 = field.NewString(tableName, "txt2")
	_kefuHuifu.Value1 = field.NewString(tableName, "value1")
	_kefuHuifu.Value2 = field.NewString(tableName, "value2")
	_kefuHuifu.Value3 = field.NewString(tableName, "value3")
	_kefuHuifu.Value4 = field.NewString(tableName, "value4")

	_kefuHuifu.fillFieldMap()

	return _kefuHuifu
}

type kefuHuifu struct {
	kefuHuifuDo

	ALL    field.Asterisk
	ID     field.Uint32
	Key    field.String
	Txt1   field.String
	Txt2   field.String
	Value1 field.String
	Value2 field.String
	Value3 field.String
	Value4 field.String

	fieldMap map[string]field.Expr
}

func (k kefuHuifu) Table(newTableName string) *kefuHuifu {
	k.kefuHuifuDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k kefuHuifu) As(alias string) *kefuHuifu {
	k.kefuHuifuDo.DO = *(k.kefuHuifuDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *kefuHuifu) updateTableName(table string) *kefuHuifu {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewUint32(table, "id")
	k.Key = field.NewString(table, "key")
	k.Txt1 = field.NewString(table, "txt1")
	k.Txt2 = field.NewString(table, "txt2")
	k.Value1 = field.NewString(table, "value1")
	k.Value2 = field.NewString(table, "value2")
	k.Value3 = field.NewString(table, "value3")
	k.Value4 = field.NewString(table, "value4")

	k.fillFieldMap()

	return k
}

func (k *kefuHuifu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *kefuHuifu) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 8)
	k.fieldMap["id"] = k.ID
	k.fieldMap["key"] = k.Key
	k.fieldMap["txt1"] = k.Txt1
	k.fieldMap["txt2"] = k.Txt2
	k.fieldMap["value1"] = k.Value1
	k.fieldMap["value2"] = k.Value2
	k.fieldMap["value3"] = k.Value3
	k.fieldMap["value4"] = k.Value4
}

func (k kefuHuifu) clone(db *gorm.DB) kefuHuifu {
	k.kefuHuifuDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k kefuHuifu) replaceDB(db *gorm.DB) kefuHuifu {
	k.kefuHuifuDo.ReplaceDB(db)
	return k
}

type kefuHuifuDo struct{ gen.DO }

type IKefuHuifuDo interface {
	gen.SubQuery
	Debug() IKefuHuifuDo
	WithContext(ctx context.Context) IKefuHuifuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IKefuHuifuDo
	WriteDB() IKefuHuifuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IKefuHuifuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IKefuHuifuDo
	Not(conds ...gen.Condition) IKefuHuifuDo
	Or(conds ...gen.Condition) IKefuHuifuDo
	Select(conds ...field.Expr) IKefuHuifuDo
	Where(conds ...gen.Condition) IKefuHuifuDo
	Order(conds ...field.Expr) IKefuHuifuDo
	Distinct(cols ...field.Expr) IKefuHuifuDo
	Omit(cols ...field.Expr) IKefuHuifuDo
	Join(table schema.Tabler, on ...field.Expr) IKefuHuifuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IKefuHuifuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IKefuHuifuDo
	Group(cols ...field.Expr) IKefuHuifuDo
	Having(conds ...gen.Condition) IKefuHuifuDo
	Limit(limit int) IKefuHuifuDo
	Offset(offset int) IKefuHuifuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IKefuHuifuDo
	Unscoped() IKefuHuifuDo
	Create(values ...*model.KefuHuifu) error
	CreateInBatches(values []*model.KefuHuifu, batchSize int) error
	Save(values ...*model.KefuHuifu) error
	First() (*model.KefuHuifu, error)
	Take() (*model.KefuHuifu, error)
	Last() (*model.KefuHuifu, error)
	Find() ([]*model.KefuHuifu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KefuHuifu, err error)
	FindInBatches(result *[]*model.KefuHuifu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.KefuHuifu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IKefuHuifuDo
	Assign(attrs ...field.AssignExpr) IKefuHuifuDo
	Joins(fields ...field.RelationField) IKefuHuifuDo
	Preload(fields ...field.RelationField) IKefuHuifuDo
	FirstOrInit() (*model.KefuHuifu, error)
	FirstOrCreate() (*model.KefuHuifu, error)
	FindByPage(offset int, limit int) (result []*model.KefuHuifu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IKefuHuifuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (k kefuHuifuDo) Debug() IKefuHuifuDo {
	return k.withDO(k.DO.Debug())
}

func (k kefuHuifuDo) WithContext(ctx context.Context) IKefuHuifuDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k kefuHuifuDo) ReadDB() IKefuHuifuDo {
	return k.Clauses(dbresolver.Read)
}

func (k kefuHuifuDo) WriteDB() IKefuHuifuDo {
	return k.Clauses(dbresolver.Write)
}

func (k kefuHuifuDo) Session(config *gorm.Session) IKefuHuifuDo {
	return k.withDO(k.DO.Session(config))
}

func (k kefuHuifuDo) Clauses(conds ...clause.Expression) IKefuHuifuDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k kefuHuifuDo) Returning(value interface{}, columns ...string) IKefuHuifuDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k kefuHuifuDo) Not(conds ...gen.Condition) IKefuHuifuDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k kefuHuifuDo) Or(conds ...gen.Condition) IKefuHuifuDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k kefuHuifuDo) Select(conds ...field.Expr) IKefuHuifuDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k kefuHuifuDo) Where(conds ...gen.Condition) IKefuHuifuDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k kefuHuifuDo) Order(conds ...field.Expr) IKefuHuifuDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k kefuHuifuDo) Distinct(cols ...field.Expr) IKefuHuifuDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k kefuHuifuDo) Omit(cols ...field.Expr) IKefuHuifuDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k kefuHuifuDo) Join(table schema.Tabler, on ...field.Expr) IKefuHuifuDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k kefuHuifuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IKefuHuifuDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k kefuHuifuDo) RightJoin(table schema.Tabler, on ...field.Expr) IKefuHuifuDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k kefuHuifuDo) Group(cols ...field.Expr) IKefuHuifuDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k kefuHuifuDo) Having(conds ...gen.Condition) IKefuHuifuDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k kefuHuifuDo) Limit(limit int) IKefuHuifuDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k kefuHuifuDo) Offset(offset int) IKefuHuifuDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k kefuHuifuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IKefuHuifuDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k kefuHuifuDo) Unscoped() IKefuHuifuDo {
	return k.withDO(k.DO.Unscoped())
}

func (k kefuHuifuDo) Create(values ...*model.KefuHuifu) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k kefuHuifuDo) CreateInBatches(values []*model.KefuHuifu, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k kefuHuifuDo) Save(values ...*model.KefuHuifu) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k kefuHuifuDo) First() (*model.KefuHuifu, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuHuifu), nil
	}
}

func (k kefuHuifuDo) Take() (*model.KefuHuifu, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuHuifu), nil
	}
}

func (k kefuHuifuDo) Last() (*model.KefuHuifu, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuHuifu), nil
	}
}

func (k kefuHuifuDo) Find() ([]*model.KefuHuifu, error) {
	result, err := k.DO.Find()
	return result.([]*model.KefuHuifu), err
}

func (k kefuHuifuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KefuHuifu, err error) {
	buf := make([]*model.KefuHuifu, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k kefuHuifuDo) FindInBatches(result *[]*model.KefuHuifu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k kefuHuifuDo) Attrs(attrs ...field.AssignExpr) IKefuHuifuDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k kefuHuifuDo) Assign(attrs ...field.AssignExpr) IKefuHuifuDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k kefuHuifuDo) Joins(fields ...field.RelationField) IKefuHuifuDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k kefuHuifuDo) Preload(fields ...field.RelationField) IKefuHuifuDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k kefuHuifuDo) FirstOrInit() (*model.KefuHuifu, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuHuifu), nil
	}
}

func (k kefuHuifuDo) FirstOrCreate() (*model.KefuHuifu, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuHuifu), nil
	}
}

func (k kefuHuifuDo) FindByPage(offset int, limit int) (result []*model.KefuHuifu, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k kefuHuifuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k kefuHuifuDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k kefuHuifuDo) Delete(models ...*model.KefuHuifu) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *kefuHuifuDo) withDO(do gen.Dao) *kefuHuifuDo {
	k.DO = *do.(*gen.DO)
	return k
}
