// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newDongshanzaiqi(db *gorm.DB, opts ...gen.DOOption) dongshanzaiqi {
	_dongshanzaiqi := dongshanzaiqi{}

	_dongshanzaiqi.dongshanzaiqiDo.UseDB(db, opts...)
	_dongshanzaiqi.dongshanzaiqiDo.UseModel(&model.Dongshanzaiqi{})

	tableName := _dongshanzaiqi.dongshanzaiqiDo.TableName()
	_dongshanzaiqi.ALL = field.NewAsterisk(tableName)
	_dongshanzaiqi.UserID = field.NewInt32(tableName, "userId")
	_dongshanzaiqi.Dcount = field.NewInt32(tableName, "dcount")
	_dongshanzaiqi.Dtime = field.NewTime(tableName, "dtime")

	_dongshanzaiqi.fillFieldMap()

	return _dongshanzaiqi
}

type dongshanzaiqi struct {
	dongshanzaiqiDo

	ALL    field.Asterisk
	UserID field.Int32
	Dcount field.Int32
	Dtime  field.Time

	fieldMap map[string]field.Expr
}

func (d dongshanzaiqi) Table(newTableName string) *dongshanzaiqi {
	d.dongshanzaiqiDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dongshanzaiqi) As(alias string) *dongshanzaiqi {
	d.dongshanzaiqiDo.DO = *(d.dongshanzaiqiDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dongshanzaiqi) updateTableName(table string) *dongshanzaiqi {
	d.ALL = field.NewAsterisk(table)
	d.UserID = field.NewInt32(table, "userId")
	d.Dcount = field.NewInt32(table, "dcount")
	d.Dtime = field.NewTime(table, "dtime")

	d.fillFieldMap()

	return d
}

func (d *dongshanzaiqi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dongshanzaiqi) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["userId"] = d.UserID
	d.fieldMap["dcount"] = d.Dcount
	d.fieldMap["dtime"] = d.Dtime
}

func (d dongshanzaiqi) clone(db *gorm.DB) dongshanzaiqi {
	d.dongshanzaiqiDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dongshanzaiqi) replaceDB(db *gorm.DB) dongshanzaiqi {
	d.dongshanzaiqiDo.ReplaceDB(db)
	return d
}

type dongshanzaiqiDo struct{ gen.DO }

type IDongshanzaiqiDo interface {
	gen.SubQuery
	Debug() IDongshanzaiqiDo
	WithContext(ctx context.Context) IDongshanzaiqiDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDongshanzaiqiDo
	WriteDB() IDongshanzaiqiDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDongshanzaiqiDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDongshanzaiqiDo
	Not(conds ...gen.Condition) IDongshanzaiqiDo
	Or(conds ...gen.Condition) IDongshanzaiqiDo
	Select(conds ...field.Expr) IDongshanzaiqiDo
	Where(conds ...gen.Condition) IDongshanzaiqiDo
	Order(conds ...field.Expr) IDongshanzaiqiDo
	Distinct(cols ...field.Expr) IDongshanzaiqiDo
	Omit(cols ...field.Expr) IDongshanzaiqiDo
	Join(table schema.Tabler, on ...field.Expr) IDongshanzaiqiDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDongshanzaiqiDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDongshanzaiqiDo
	Group(cols ...field.Expr) IDongshanzaiqiDo
	Having(conds ...gen.Condition) IDongshanzaiqiDo
	Limit(limit int) IDongshanzaiqiDo
	Offset(offset int) IDongshanzaiqiDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDongshanzaiqiDo
	Unscoped() IDongshanzaiqiDo
	Create(values ...*model.Dongshanzaiqi) error
	CreateInBatches(values []*model.Dongshanzaiqi, batchSize int) error
	Save(values ...*model.Dongshanzaiqi) error
	First() (*model.Dongshanzaiqi, error)
	Take() (*model.Dongshanzaiqi, error)
	Last() (*model.Dongshanzaiqi, error)
	Find() ([]*model.Dongshanzaiqi, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dongshanzaiqi, err error)
	FindInBatches(result *[]*model.Dongshanzaiqi, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Dongshanzaiqi) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDongshanzaiqiDo
	Assign(attrs ...field.AssignExpr) IDongshanzaiqiDo
	Joins(fields ...field.RelationField) IDongshanzaiqiDo
	Preload(fields ...field.RelationField) IDongshanzaiqiDo
	FirstOrInit() (*model.Dongshanzaiqi, error)
	FirstOrCreate() (*model.Dongshanzaiqi, error)
	FindByPage(offset int, limit int) (result []*model.Dongshanzaiqi, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDongshanzaiqiDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dongshanzaiqiDo) Debug() IDongshanzaiqiDo {
	return d.withDO(d.DO.Debug())
}

func (d dongshanzaiqiDo) WithContext(ctx context.Context) IDongshanzaiqiDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dongshanzaiqiDo) ReadDB() IDongshanzaiqiDo {
	return d.Clauses(dbresolver.Read)
}

func (d dongshanzaiqiDo) WriteDB() IDongshanzaiqiDo {
	return d.Clauses(dbresolver.Write)
}

func (d dongshanzaiqiDo) Session(config *gorm.Session) IDongshanzaiqiDo {
	return d.withDO(d.DO.Session(config))
}

func (d dongshanzaiqiDo) Clauses(conds ...clause.Expression) IDongshanzaiqiDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dongshanzaiqiDo) Returning(value interface{}, columns ...string) IDongshanzaiqiDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dongshanzaiqiDo) Not(conds ...gen.Condition) IDongshanzaiqiDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dongshanzaiqiDo) Or(conds ...gen.Condition) IDongshanzaiqiDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dongshanzaiqiDo) Select(conds ...field.Expr) IDongshanzaiqiDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dongshanzaiqiDo) Where(conds ...gen.Condition) IDongshanzaiqiDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dongshanzaiqiDo) Order(conds ...field.Expr) IDongshanzaiqiDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dongshanzaiqiDo) Distinct(cols ...field.Expr) IDongshanzaiqiDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dongshanzaiqiDo) Omit(cols ...field.Expr) IDongshanzaiqiDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dongshanzaiqiDo) Join(table schema.Tabler, on ...field.Expr) IDongshanzaiqiDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dongshanzaiqiDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDongshanzaiqiDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dongshanzaiqiDo) RightJoin(table schema.Tabler, on ...field.Expr) IDongshanzaiqiDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dongshanzaiqiDo) Group(cols ...field.Expr) IDongshanzaiqiDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dongshanzaiqiDo) Having(conds ...gen.Condition) IDongshanzaiqiDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dongshanzaiqiDo) Limit(limit int) IDongshanzaiqiDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dongshanzaiqiDo) Offset(offset int) IDongshanzaiqiDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dongshanzaiqiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDongshanzaiqiDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dongshanzaiqiDo) Unscoped() IDongshanzaiqiDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dongshanzaiqiDo) Create(values ...*model.Dongshanzaiqi) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dongshanzaiqiDo) CreateInBatches(values []*model.Dongshanzaiqi, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dongshanzaiqiDo) Save(values ...*model.Dongshanzaiqi) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dongshanzaiqiDo) First() (*model.Dongshanzaiqi, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dongshanzaiqi), nil
	}
}

func (d dongshanzaiqiDo) Take() (*model.Dongshanzaiqi, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dongshanzaiqi), nil
	}
}

func (d dongshanzaiqiDo) Last() (*model.Dongshanzaiqi, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dongshanzaiqi), nil
	}
}

func (d dongshanzaiqiDo) Find() ([]*model.Dongshanzaiqi, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dongshanzaiqi), err
}

func (d dongshanzaiqiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dongshanzaiqi, err error) {
	buf := make([]*model.Dongshanzaiqi, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dongshanzaiqiDo) FindInBatches(result *[]*model.Dongshanzaiqi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dongshanzaiqiDo) Attrs(attrs ...field.AssignExpr) IDongshanzaiqiDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dongshanzaiqiDo) Assign(attrs ...field.AssignExpr) IDongshanzaiqiDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dongshanzaiqiDo) Joins(fields ...field.RelationField) IDongshanzaiqiDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dongshanzaiqiDo) Preload(fields ...field.RelationField) IDongshanzaiqiDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dongshanzaiqiDo) FirstOrInit() (*model.Dongshanzaiqi, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dongshanzaiqi), nil
	}
}

func (d dongshanzaiqiDo) FirstOrCreate() (*model.Dongshanzaiqi, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dongshanzaiqi), nil
	}
}

func (d dongshanzaiqiDo) FindByPage(offset int, limit int) (result []*model.Dongshanzaiqi, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dongshanzaiqiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dongshanzaiqiDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dongshanzaiqiDo) Delete(models ...*model.Dongshanzaiqi) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dongshanzaiqiDo) withDO(do gen.Dao) *dongshanzaiqiDo {
	d.DO = *do.(*gen.DO)
	return d
}
