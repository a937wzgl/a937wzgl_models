// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package game

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newTSellLog(db *gorm.DB, opts ...gen.DOOption) tSellLog {
	_tSellLog := tSellLog{}

	_tSellLog.tSellLogDo.UseDB(db, opts...)
	_tSellLog.tSellLogDo.UseModel(&model.TSellLog{})

	tableName := _tSellLog.tSellLogDo.TableName()
	_tSellLog.ALL = field.NewAsterisk(tableName)
	_tSellLog.ID = field.NewUint32(tableName, "id")
	_tSellLog.Userid = field.NewInt32(tableName, "userid")
	_tSellLog.GemsNum = field.NewUint32(tableName, "gems_num")
	_tSellLog.SellerID = field.NewUint32(tableName, "seller_id")
	_tSellLog.ChargeType = field.NewUint32(tableName, "charge_type")
	_tSellLog.Addtime = field.NewInt32(tableName, "addtime")
	_tSellLog.Batchno = field.NewString(tableName, "batchno")

	_tSellLog.fillFieldMap()

	return _tSellLog
}

type tSellLog struct {
	tSellLogDo

	ALL        field.Asterisk
	ID         field.Uint32 // 充值id
	Userid     field.Int32  // 用户id
	GemsNum    field.Uint32 // 金币数量
	SellerID   field.Uint32 // 发放金币人id
	ChargeType field.Uint32 // 类型:1:会员 2:管理员
	Addtime    field.Int32  // 充值时间
	Batchno    field.String // 批次号

	fieldMap map[string]field.Expr
}

func (t tSellLog) Table(newTableName string) *tSellLog {
	t.tSellLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSellLog) As(alias string) *tSellLog {
	t.tSellLogDo.DO = *(t.tSellLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSellLog) updateTableName(table string) *tSellLog {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint32(table, "id")
	t.Userid = field.NewInt32(table, "userid")
	t.GemsNum = field.NewUint32(table, "gems_num")
	t.SellerID = field.NewUint32(table, "seller_id")
	t.ChargeType = field.NewUint32(table, "charge_type")
	t.Addtime = field.NewInt32(table, "addtime")
	t.Batchno = field.NewString(table, "batchno")

	t.fillFieldMap()

	return t
}

func (t *tSellLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSellLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["userid"] = t.Userid
	t.fieldMap["gems_num"] = t.GemsNum
	t.fieldMap["seller_id"] = t.SellerID
	t.fieldMap["charge_type"] = t.ChargeType
	t.fieldMap["addtime"] = t.Addtime
	t.fieldMap["batchno"] = t.Batchno
}

func (t tSellLog) clone(db *gorm.DB) tSellLog {
	t.tSellLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tSellLog) replaceDB(db *gorm.DB) tSellLog {
	t.tSellLogDo.ReplaceDB(db)
	return t
}

type tSellLogDo struct{ gen.DO }

type ITSellLogDo interface {
	gen.SubQuery
	Debug() ITSellLogDo
	WithContext(ctx context.Context) ITSellLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITSellLogDo
	WriteDB() ITSellLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITSellLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITSellLogDo
	Not(conds ...gen.Condition) ITSellLogDo
	Or(conds ...gen.Condition) ITSellLogDo
	Select(conds ...field.Expr) ITSellLogDo
	Where(conds ...gen.Condition) ITSellLogDo
	Order(conds ...field.Expr) ITSellLogDo
	Distinct(cols ...field.Expr) ITSellLogDo
	Omit(cols ...field.Expr) ITSellLogDo
	Join(table schema.Tabler, on ...field.Expr) ITSellLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITSellLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITSellLogDo
	Group(cols ...field.Expr) ITSellLogDo
	Having(conds ...gen.Condition) ITSellLogDo
	Limit(limit int) ITSellLogDo
	Offset(offset int) ITSellLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITSellLogDo
	Unscoped() ITSellLogDo
	Create(values ...*model.TSellLog) error
	CreateInBatches(values []*model.TSellLog, batchSize int) error
	Save(values ...*model.TSellLog) error
	First() (*model.TSellLog, error)
	Take() (*model.TSellLog, error)
	Last() (*model.TSellLog, error)
	Find() ([]*model.TSellLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSellLog, err error)
	FindInBatches(result *[]*model.TSellLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TSellLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITSellLogDo
	Assign(attrs ...field.AssignExpr) ITSellLogDo
	Joins(fields ...field.RelationField) ITSellLogDo
	Preload(fields ...field.RelationField) ITSellLogDo
	FirstOrInit() (*model.TSellLog, error)
	FirstOrCreate() (*model.TSellLog, error)
	FindByPage(offset int, limit int) (result []*model.TSellLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITSellLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tSellLogDo) Debug() ITSellLogDo {
	return t.withDO(t.DO.Debug())
}

func (t tSellLogDo) WithContext(ctx context.Context) ITSellLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSellLogDo) ReadDB() ITSellLogDo {
	return t.Clauses(dbresolver.Read)
}

func (t tSellLogDo) WriteDB() ITSellLogDo {
	return t.Clauses(dbresolver.Write)
}

func (t tSellLogDo) Session(config *gorm.Session) ITSellLogDo {
	return t.withDO(t.DO.Session(config))
}

func (t tSellLogDo) Clauses(conds ...clause.Expression) ITSellLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSellLogDo) Returning(value interface{}, columns ...string) ITSellLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSellLogDo) Not(conds ...gen.Condition) ITSellLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSellLogDo) Or(conds ...gen.Condition) ITSellLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSellLogDo) Select(conds ...field.Expr) ITSellLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSellLogDo) Where(conds ...gen.Condition) ITSellLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSellLogDo) Order(conds ...field.Expr) ITSellLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSellLogDo) Distinct(cols ...field.Expr) ITSellLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSellLogDo) Omit(cols ...field.Expr) ITSellLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSellLogDo) Join(table schema.Tabler, on ...field.Expr) ITSellLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSellLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITSellLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSellLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ITSellLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSellLogDo) Group(cols ...field.Expr) ITSellLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSellLogDo) Having(conds ...gen.Condition) ITSellLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSellLogDo) Limit(limit int) ITSellLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSellLogDo) Offset(offset int) ITSellLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSellLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITSellLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSellLogDo) Unscoped() ITSellLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSellLogDo) Create(values ...*model.TSellLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSellLogDo) CreateInBatches(values []*model.TSellLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSellLogDo) Save(values ...*model.TSellLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSellLogDo) First() (*model.TSellLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSellLog), nil
	}
}

func (t tSellLogDo) Take() (*model.TSellLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSellLog), nil
	}
}

func (t tSellLogDo) Last() (*model.TSellLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSellLog), nil
	}
}

func (t tSellLogDo) Find() ([]*model.TSellLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSellLog), err
}

func (t tSellLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSellLog, err error) {
	buf := make([]*model.TSellLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSellLogDo) FindInBatches(result *[]*model.TSellLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSellLogDo) Attrs(attrs ...field.AssignExpr) ITSellLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSellLogDo) Assign(attrs ...field.AssignExpr) ITSellLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSellLogDo) Joins(fields ...field.RelationField) ITSellLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tSellLogDo) Preload(fields ...field.RelationField) ITSellLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tSellLogDo) FirstOrInit() (*model.TSellLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSellLog), nil
	}
}

func (t tSellLogDo) FirstOrCreate() (*model.TSellLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSellLog), nil
	}
}

func (t tSellLogDo) FindByPage(offset int, limit int) (result []*model.TSellLog, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSellLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tSellLogDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tSellLogDo) Delete(models ...*model.TSellLog) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tSellLogDo) withDO(do gen.Dao) *tSellLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
