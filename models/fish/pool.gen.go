// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fish

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newPool(db *gorm.DB, opts ...gen.DOOption) pool {
	_pool := pool{}

	_pool.poolDo.UseDB(db, opts...)
	_pool.poolDo.UseModel(&model.Pool{})

	tableName := _pool.poolDo.TableName()
	_pool.ALL = field.NewAsterisk(tableName)
	_pool.ServeID = field.NewInt32(tableName, "serveId")
	_pool.Pool = field.NewInt64(tableName, "pool")
	_pool.VirtualPool = field.NewInt64(tableName, "virtualPool")

	_pool.fillFieldMap()

	return _pool
}

type pool struct {
	poolDo

	ALL         field.Asterisk
	ServeID     field.Int32
	Pool        field.Int64
	VirtualPool field.Int64

	fieldMap map[string]field.Expr
}

func (p pool) Table(newTableName string) *pool {
	p.poolDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pool) As(alias string) *pool {
	p.poolDo.DO = *(p.poolDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pool) updateTableName(table string) *pool {
	p.ALL = field.NewAsterisk(table)
	p.ServeID = field.NewInt32(table, "serveId")
	p.Pool = field.NewInt64(table, "pool")
	p.VirtualPool = field.NewInt64(table, "virtualPool")

	p.fillFieldMap()

	return p
}

func (p *pool) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pool) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["serveId"] = p.ServeID
	p.fieldMap["pool"] = p.Pool
	p.fieldMap["virtualPool"] = p.VirtualPool
}

func (p pool) clone(db *gorm.DB) pool {
	p.poolDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pool) replaceDB(db *gorm.DB) pool {
	p.poolDo.ReplaceDB(db)
	return p
}

type poolDo struct{ gen.DO }

type IPoolDo interface {
	gen.SubQuery
	Debug() IPoolDo
	WithContext(ctx context.Context) IPoolDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPoolDo
	WriteDB() IPoolDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPoolDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPoolDo
	Not(conds ...gen.Condition) IPoolDo
	Or(conds ...gen.Condition) IPoolDo
	Select(conds ...field.Expr) IPoolDo
	Where(conds ...gen.Condition) IPoolDo
	Order(conds ...field.Expr) IPoolDo
	Distinct(cols ...field.Expr) IPoolDo
	Omit(cols ...field.Expr) IPoolDo
	Join(table schema.Tabler, on ...field.Expr) IPoolDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPoolDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPoolDo
	Group(cols ...field.Expr) IPoolDo
	Having(conds ...gen.Condition) IPoolDo
	Limit(limit int) IPoolDo
	Offset(offset int) IPoolDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPoolDo
	Unscoped() IPoolDo
	Create(values ...*model.Pool) error
	CreateInBatches(values []*model.Pool, batchSize int) error
	Save(values ...*model.Pool) error
	First() (*model.Pool, error)
	Take() (*model.Pool, error)
	Last() (*model.Pool, error)
	Find() ([]*model.Pool, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Pool, err error)
	FindInBatches(result *[]*model.Pool, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Pool) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPoolDo
	Assign(attrs ...field.AssignExpr) IPoolDo
	Joins(fields ...field.RelationField) IPoolDo
	Preload(fields ...field.RelationField) IPoolDo
	FirstOrInit() (*model.Pool, error)
	FirstOrCreate() (*model.Pool, error)
	FindByPage(offset int, limit int) (result []*model.Pool, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPoolDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p poolDo) Debug() IPoolDo {
	return p.withDO(p.DO.Debug())
}

func (p poolDo) WithContext(ctx context.Context) IPoolDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p poolDo) ReadDB() IPoolDo {
	return p.Clauses(dbresolver.Read)
}

func (p poolDo) WriteDB() IPoolDo {
	return p.Clauses(dbresolver.Write)
}

func (p poolDo) Session(config *gorm.Session) IPoolDo {
	return p.withDO(p.DO.Session(config))
}

func (p poolDo) Clauses(conds ...clause.Expression) IPoolDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p poolDo) Returning(value interface{}, columns ...string) IPoolDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p poolDo) Not(conds ...gen.Condition) IPoolDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p poolDo) Or(conds ...gen.Condition) IPoolDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p poolDo) Select(conds ...field.Expr) IPoolDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p poolDo) Where(conds ...gen.Condition) IPoolDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p poolDo) Order(conds ...field.Expr) IPoolDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p poolDo) Distinct(cols ...field.Expr) IPoolDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p poolDo) Omit(cols ...field.Expr) IPoolDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p poolDo) Join(table schema.Tabler, on ...field.Expr) IPoolDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p poolDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPoolDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p poolDo) RightJoin(table schema.Tabler, on ...field.Expr) IPoolDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p poolDo) Group(cols ...field.Expr) IPoolDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p poolDo) Having(conds ...gen.Condition) IPoolDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p poolDo) Limit(limit int) IPoolDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p poolDo) Offset(offset int) IPoolDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p poolDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPoolDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p poolDo) Unscoped() IPoolDo {
	return p.withDO(p.DO.Unscoped())
}

func (p poolDo) Create(values ...*model.Pool) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p poolDo) CreateInBatches(values []*model.Pool, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p poolDo) Save(values ...*model.Pool) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p poolDo) First() (*model.Pool, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pool), nil
	}
}

func (p poolDo) Take() (*model.Pool, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pool), nil
	}
}

func (p poolDo) Last() (*model.Pool, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pool), nil
	}
}

func (p poolDo) Find() ([]*model.Pool, error) {
	result, err := p.DO.Find()
	return result.([]*model.Pool), err
}

func (p poolDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Pool, err error) {
	buf := make([]*model.Pool, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p poolDo) FindInBatches(result *[]*model.Pool, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p poolDo) Attrs(attrs ...field.AssignExpr) IPoolDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p poolDo) Assign(attrs ...field.AssignExpr) IPoolDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p poolDo) Joins(fields ...field.RelationField) IPoolDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p poolDo) Preload(fields ...field.RelationField) IPoolDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p poolDo) FirstOrInit() (*model.Pool, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pool), nil
	}
}

func (p poolDo) FirstOrCreate() (*model.Pool, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pool), nil
	}
}

func (p poolDo) FindByPage(offset int, limit int) (result []*model.Pool, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p poolDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p poolDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p poolDo) Delete(models ...*model.Pool) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *poolDo) withDO(do gen.Dao) *poolDo {
	p.DO = *do.(*gen.DO)
	return p
}
