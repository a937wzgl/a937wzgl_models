// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fish

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newUsecoin(db *gorm.DB, opts ...gen.DOOption) usecoin {
	_usecoin := usecoin{}

	_usecoin.usecoinDo.UseDB(db, opts...)
	_usecoin.usecoinDo.UseModel(&model.Usecoin{})

	tableName := _usecoin.usecoinDo.TableName()
	_usecoin.ALL = field.NewAsterisk(tableName)
	_usecoin.UserID = field.NewInt32(tableName, "userId")
	_usecoin.UseCoin = field.NewInt32(tableName, "useCoin")
	_usecoin.Getprizelv = field.NewInt32(tableName, "getprizelv")

	_usecoin.fillFieldMap()

	return _usecoin
}

type usecoin struct {
	usecoinDo

	ALL        field.Asterisk
	UserID     field.Int32
	UseCoin    field.Int32
	Getprizelv field.Int32

	fieldMap map[string]field.Expr
}

func (u usecoin) Table(newTableName string) *usecoin {
	u.usecoinDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usecoin) As(alias string) *usecoin {
	u.usecoinDo.DO = *(u.usecoinDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usecoin) updateTableName(table string) *usecoin {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt32(table, "userId")
	u.UseCoin = field.NewInt32(table, "useCoin")
	u.Getprizelv = field.NewInt32(table, "getprizelv")

	u.fillFieldMap()

	return u
}

func (u *usecoin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usecoin) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["userId"] = u.UserID
	u.fieldMap["useCoin"] = u.UseCoin
	u.fieldMap["getprizelv"] = u.Getprizelv
}

func (u usecoin) clone(db *gorm.DB) usecoin {
	u.usecoinDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u usecoin) replaceDB(db *gorm.DB) usecoin {
	u.usecoinDo.ReplaceDB(db)
	return u
}

type usecoinDo struct{ gen.DO }

type IUsecoinDo interface {
	gen.SubQuery
	Debug() IUsecoinDo
	WithContext(ctx context.Context) IUsecoinDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUsecoinDo
	WriteDB() IUsecoinDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUsecoinDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUsecoinDo
	Not(conds ...gen.Condition) IUsecoinDo
	Or(conds ...gen.Condition) IUsecoinDo
	Select(conds ...field.Expr) IUsecoinDo
	Where(conds ...gen.Condition) IUsecoinDo
	Order(conds ...field.Expr) IUsecoinDo
	Distinct(cols ...field.Expr) IUsecoinDo
	Omit(cols ...field.Expr) IUsecoinDo
	Join(table schema.Tabler, on ...field.Expr) IUsecoinDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUsecoinDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUsecoinDo
	Group(cols ...field.Expr) IUsecoinDo
	Having(conds ...gen.Condition) IUsecoinDo
	Limit(limit int) IUsecoinDo
	Offset(offset int) IUsecoinDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUsecoinDo
	Unscoped() IUsecoinDo
	Create(values ...*model.Usecoin) error
	CreateInBatches(values []*model.Usecoin, batchSize int) error
	Save(values ...*model.Usecoin) error
	First() (*model.Usecoin, error)
	Take() (*model.Usecoin, error)
	Last() (*model.Usecoin, error)
	Find() ([]*model.Usecoin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Usecoin, err error)
	FindInBatches(result *[]*model.Usecoin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Usecoin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUsecoinDo
	Assign(attrs ...field.AssignExpr) IUsecoinDo
	Joins(fields ...field.RelationField) IUsecoinDo
	Preload(fields ...field.RelationField) IUsecoinDo
	FirstOrInit() (*model.Usecoin, error)
	FirstOrCreate() (*model.Usecoin, error)
	FindByPage(offset int, limit int) (result []*model.Usecoin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUsecoinDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u usecoinDo) Debug() IUsecoinDo {
	return u.withDO(u.DO.Debug())
}

func (u usecoinDo) WithContext(ctx context.Context) IUsecoinDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usecoinDo) ReadDB() IUsecoinDo {
	return u.Clauses(dbresolver.Read)
}

func (u usecoinDo) WriteDB() IUsecoinDo {
	return u.Clauses(dbresolver.Write)
}

func (u usecoinDo) Session(config *gorm.Session) IUsecoinDo {
	return u.withDO(u.DO.Session(config))
}

func (u usecoinDo) Clauses(conds ...clause.Expression) IUsecoinDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usecoinDo) Returning(value interface{}, columns ...string) IUsecoinDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usecoinDo) Not(conds ...gen.Condition) IUsecoinDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usecoinDo) Or(conds ...gen.Condition) IUsecoinDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usecoinDo) Select(conds ...field.Expr) IUsecoinDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usecoinDo) Where(conds ...gen.Condition) IUsecoinDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usecoinDo) Order(conds ...field.Expr) IUsecoinDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usecoinDo) Distinct(cols ...field.Expr) IUsecoinDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usecoinDo) Omit(cols ...field.Expr) IUsecoinDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usecoinDo) Join(table schema.Tabler, on ...field.Expr) IUsecoinDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usecoinDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUsecoinDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usecoinDo) RightJoin(table schema.Tabler, on ...field.Expr) IUsecoinDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usecoinDo) Group(cols ...field.Expr) IUsecoinDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usecoinDo) Having(conds ...gen.Condition) IUsecoinDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usecoinDo) Limit(limit int) IUsecoinDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usecoinDo) Offset(offset int) IUsecoinDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usecoinDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUsecoinDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usecoinDo) Unscoped() IUsecoinDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usecoinDo) Create(values ...*model.Usecoin) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usecoinDo) CreateInBatches(values []*model.Usecoin, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usecoinDo) Save(values ...*model.Usecoin) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usecoinDo) First() (*model.Usecoin, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Usecoin), nil
	}
}

func (u usecoinDo) Take() (*model.Usecoin, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Usecoin), nil
	}
}

func (u usecoinDo) Last() (*model.Usecoin, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Usecoin), nil
	}
}

func (u usecoinDo) Find() ([]*model.Usecoin, error) {
	result, err := u.DO.Find()
	return result.([]*model.Usecoin), err
}

func (u usecoinDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Usecoin, err error) {
	buf := make([]*model.Usecoin, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usecoinDo) FindInBatches(result *[]*model.Usecoin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usecoinDo) Attrs(attrs ...field.AssignExpr) IUsecoinDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usecoinDo) Assign(attrs ...field.AssignExpr) IUsecoinDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usecoinDo) Joins(fields ...field.RelationField) IUsecoinDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usecoinDo) Preload(fields ...field.RelationField) IUsecoinDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usecoinDo) FirstOrInit() (*model.Usecoin, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Usecoin), nil
	}
}

func (u usecoinDo) FirstOrCreate() (*model.Usecoin, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Usecoin), nil
	}
}

func (u usecoinDo) FindByPage(offset int, limit int) (result []*model.Usecoin, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usecoinDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usecoinDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usecoinDo) Delete(models ...*model.Usecoin) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usecoinDo) withDO(do gen.Dao) *usecoinDo {
	u.DO = *do.(*gen.DO)
	return u
}
