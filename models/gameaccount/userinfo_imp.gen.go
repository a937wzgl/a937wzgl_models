// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newUserinfoImp(db *gorm.DB, opts ...gen.DOOption) userinfoImp {
	_userinfoImp := userinfoImp{}

	_userinfoImp.userinfoImpDo.UseDB(db, opts...)
	_userinfoImp.userinfoImpDo.UseModel(&model.UserinfoImp{})

	tableName := _userinfoImp.userinfoImpDo.TableName()
	_userinfoImp.ALL = field.NewAsterisk(tableName)
	_userinfoImp.UserID = field.NewInt32(tableName, "userId")
	_userinfoImp.Score = field.NewInt64(tableName, "score")
	_userinfoImp.Diamond = field.NewInt64(tableName, "diamond")
	_userinfoImp.GiftTicket = field.NewInt32(tableName, "giftTicket")

	_userinfoImp.fillFieldMap()

	return _userinfoImp
}

type userinfoImp struct {
	userinfoImpDo

	ALL        field.Asterisk
	UserID     field.Int32
	Score      field.Int64
	Diamond    field.Int64
	GiftTicket field.Int32

	fieldMap map[string]field.Expr
}

func (u userinfoImp) Table(newTableName string) *userinfoImp {
	u.userinfoImpDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userinfoImp) As(alias string) *userinfoImp {
	u.userinfoImpDo.DO = *(u.userinfoImpDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userinfoImp) updateTableName(table string) *userinfoImp {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt32(table, "userId")
	u.Score = field.NewInt64(table, "score")
	u.Diamond = field.NewInt64(table, "diamond")
	u.GiftTicket = field.NewInt32(table, "giftTicket")

	u.fillFieldMap()

	return u
}

func (u *userinfoImp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userinfoImp) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["userId"] = u.UserID
	u.fieldMap["score"] = u.Score
	u.fieldMap["diamond"] = u.Diamond
	u.fieldMap["giftTicket"] = u.GiftTicket
}

func (u userinfoImp) clone(db *gorm.DB) userinfoImp {
	u.userinfoImpDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userinfoImp) replaceDB(db *gorm.DB) userinfoImp {
	u.userinfoImpDo.ReplaceDB(db)
	return u
}

type userinfoImpDo struct{ gen.DO }

type IUserinfoImpDo interface {
	gen.SubQuery
	Debug() IUserinfoImpDo
	WithContext(ctx context.Context) IUserinfoImpDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserinfoImpDo
	WriteDB() IUserinfoImpDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserinfoImpDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserinfoImpDo
	Not(conds ...gen.Condition) IUserinfoImpDo
	Or(conds ...gen.Condition) IUserinfoImpDo
	Select(conds ...field.Expr) IUserinfoImpDo
	Where(conds ...gen.Condition) IUserinfoImpDo
	Order(conds ...field.Expr) IUserinfoImpDo
	Distinct(cols ...field.Expr) IUserinfoImpDo
	Omit(cols ...field.Expr) IUserinfoImpDo
	Join(table schema.Tabler, on ...field.Expr) IUserinfoImpDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserinfoImpDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserinfoImpDo
	Group(cols ...field.Expr) IUserinfoImpDo
	Having(conds ...gen.Condition) IUserinfoImpDo
	Limit(limit int) IUserinfoImpDo
	Offset(offset int) IUserinfoImpDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserinfoImpDo
	Unscoped() IUserinfoImpDo
	Create(values ...*model.UserinfoImp) error
	CreateInBatches(values []*model.UserinfoImp, batchSize int) error
	Save(values ...*model.UserinfoImp) error
	First() (*model.UserinfoImp, error)
	Take() (*model.UserinfoImp, error)
	Last() (*model.UserinfoImp, error)
	Find() ([]*model.UserinfoImp, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserinfoImp, err error)
	FindInBatches(result *[]*model.UserinfoImp, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserinfoImp) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserinfoImpDo
	Assign(attrs ...field.AssignExpr) IUserinfoImpDo
	Joins(fields ...field.RelationField) IUserinfoImpDo
	Preload(fields ...field.RelationField) IUserinfoImpDo
	FirstOrInit() (*model.UserinfoImp, error)
	FirstOrCreate() (*model.UserinfoImp, error)
	FindByPage(offset int, limit int) (result []*model.UserinfoImp, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserinfoImpDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userinfoImpDo) Debug() IUserinfoImpDo {
	return u.withDO(u.DO.Debug())
}

func (u userinfoImpDo) WithContext(ctx context.Context) IUserinfoImpDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userinfoImpDo) ReadDB() IUserinfoImpDo {
	return u.Clauses(dbresolver.Read)
}

func (u userinfoImpDo) WriteDB() IUserinfoImpDo {
	return u.Clauses(dbresolver.Write)
}

func (u userinfoImpDo) Session(config *gorm.Session) IUserinfoImpDo {
	return u.withDO(u.DO.Session(config))
}

func (u userinfoImpDo) Clauses(conds ...clause.Expression) IUserinfoImpDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userinfoImpDo) Returning(value interface{}, columns ...string) IUserinfoImpDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userinfoImpDo) Not(conds ...gen.Condition) IUserinfoImpDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userinfoImpDo) Or(conds ...gen.Condition) IUserinfoImpDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userinfoImpDo) Select(conds ...field.Expr) IUserinfoImpDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userinfoImpDo) Where(conds ...gen.Condition) IUserinfoImpDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userinfoImpDo) Order(conds ...field.Expr) IUserinfoImpDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userinfoImpDo) Distinct(cols ...field.Expr) IUserinfoImpDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userinfoImpDo) Omit(cols ...field.Expr) IUserinfoImpDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userinfoImpDo) Join(table schema.Tabler, on ...field.Expr) IUserinfoImpDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userinfoImpDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserinfoImpDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userinfoImpDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserinfoImpDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userinfoImpDo) Group(cols ...field.Expr) IUserinfoImpDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userinfoImpDo) Having(conds ...gen.Condition) IUserinfoImpDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userinfoImpDo) Limit(limit int) IUserinfoImpDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userinfoImpDo) Offset(offset int) IUserinfoImpDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userinfoImpDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserinfoImpDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userinfoImpDo) Unscoped() IUserinfoImpDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userinfoImpDo) Create(values ...*model.UserinfoImp) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userinfoImpDo) CreateInBatches(values []*model.UserinfoImp, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userinfoImpDo) Save(values ...*model.UserinfoImp) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userinfoImpDo) First() (*model.UserinfoImp, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserinfoImp), nil
	}
}

func (u userinfoImpDo) Take() (*model.UserinfoImp, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserinfoImp), nil
	}
}

func (u userinfoImpDo) Last() (*model.UserinfoImp, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserinfoImp), nil
	}
}

func (u userinfoImpDo) Find() ([]*model.UserinfoImp, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserinfoImp), err
}

func (u userinfoImpDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserinfoImp, err error) {
	buf := make([]*model.UserinfoImp, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userinfoImpDo) FindInBatches(result *[]*model.UserinfoImp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userinfoImpDo) Attrs(attrs ...field.AssignExpr) IUserinfoImpDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userinfoImpDo) Assign(attrs ...field.AssignExpr) IUserinfoImpDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userinfoImpDo) Joins(fields ...field.RelationField) IUserinfoImpDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userinfoImpDo) Preload(fields ...field.RelationField) IUserinfoImpDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userinfoImpDo) FirstOrInit() (*model.UserinfoImp, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserinfoImp), nil
	}
}

func (u userinfoImpDo) FirstOrCreate() (*model.UserinfoImp, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserinfoImp), nil
	}
}

func (u userinfoImpDo) FindByPage(offset int, limit int) (result []*model.UserinfoImp, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userinfoImpDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userinfoImpDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userinfoImpDo) Delete(models ...*model.UserinfoImp) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userinfoImpDo) withDO(do gen.Dao) *userinfoImpDo {
	u.DO = *do.(*gen.DO)
	return u
}
