// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package la_ba

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLotterylog105(db *gorm.DB, opts ...gen.DOOption) lotterylog105 {
	_lotterylog105 := lotterylog105{}

	_lotterylog105.lotterylog105Do.UseDB(db, opts...)
	_lotterylog105.lotterylog105Do.UseModel(&model.Lotterylog105{})

	tableName := _lotterylog105.lotterylog105Do.TableName()
	_lotterylog105.ALL = field.NewAsterisk(tableName)
	_lotterylog105.ID = field.NewInt32(tableName, "id")
	_lotterylog105.Userid = field.NewInt32(tableName, "userid")
	_lotterylog105.Bet = field.NewInt32(tableName, "bet")
	_lotterylog105.LineS = field.NewInt32(tableName, "line_s")
	_lotterylog105.ScoreBefore = field.NewInt32(tableName, "score_before")
	_lotterylog105.ScoreLinescore = field.NewInt32(tableName, "score_linescore")
	_lotterylog105.ScoreWin = field.NewInt32(tableName, "score_win")
	_lotterylog105.ScoreCurrent = field.NewInt32(tableName, "score_current")
	_lotterylog105.FreeCountBefore = field.NewInt32(tableName, "free_count_before")
	_lotterylog105.FreeCountWin = field.NewInt32(tableName, "free_count_win")
	_lotterylog105.FreeCountCurrent = field.NewInt32(tableName, "free_count_current")
	_lotterylog105.ResultArray = field.NewString(tableName, "result_array")
	_lotterylog105.LotteryTime = field.NewTime(tableName, "lotteryTime")
	_lotterylog105.Mark = field.NewBool(tableName, "mark")

	_lotterylog105.fillFieldMap()

	return _lotterylog105
}

type lotterylog105 struct {
	lotterylog105Do

	ALL              field.Asterisk
	ID               field.Int32
	Userid           field.Int32
	Bet              field.Int32
	LineS            field.Int32
	ScoreBefore      field.Int32
	ScoreLinescore   field.Int32
	ScoreWin         field.Int32
	ScoreCurrent     field.Int32
	FreeCountBefore  field.Int32
	FreeCountWin     field.Int32
	FreeCountCurrent field.Int32
	ResultArray      field.String
	LotteryTime      field.Time
	Mark             field.Bool

	fieldMap map[string]field.Expr
}

func (l lotterylog105) Table(newTableName string) *lotterylog105 {
	l.lotterylog105Do.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lotterylog105) As(alias string) *lotterylog105 {
	l.lotterylog105Do.DO = *(l.lotterylog105Do.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lotterylog105) updateTableName(table string) *lotterylog105 {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Userid = field.NewInt32(table, "userid")
	l.Bet = field.NewInt32(table, "bet")
	l.LineS = field.NewInt32(table, "line_s")
	l.ScoreBefore = field.NewInt32(table, "score_before")
	l.ScoreLinescore = field.NewInt32(table, "score_linescore")
	l.ScoreWin = field.NewInt32(table, "score_win")
	l.ScoreCurrent = field.NewInt32(table, "score_current")
	l.FreeCountBefore = field.NewInt32(table, "free_count_before")
	l.FreeCountWin = field.NewInt32(table, "free_count_win")
	l.FreeCountCurrent = field.NewInt32(table, "free_count_current")
	l.ResultArray = field.NewString(table, "result_array")
	l.LotteryTime = field.NewTime(table, "lotteryTime")
	l.Mark = field.NewBool(table, "mark")

	l.fillFieldMap()

	return l
}

func (l *lotterylog105) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lotterylog105) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["id"] = l.ID
	l.fieldMap["userid"] = l.Userid
	l.fieldMap["bet"] = l.Bet
	l.fieldMap["line_s"] = l.LineS
	l.fieldMap["score_before"] = l.ScoreBefore
	l.fieldMap["score_linescore"] = l.ScoreLinescore
	l.fieldMap["score_win"] = l.ScoreWin
	l.fieldMap["score_current"] = l.ScoreCurrent
	l.fieldMap["free_count_before"] = l.FreeCountBefore
	l.fieldMap["free_count_win"] = l.FreeCountWin
	l.fieldMap["free_count_current"] = l.FreeCountCurrent
	l.fieldMap["result_array"] = l.ResultArray
	l.fieldMap["lotteryTime"] = l.LotteryTime
	l.fieldMap["mark"] = l.Mark
}

func (l lotterylog105) clone(db *gorm.DB) lotterylog105 {
	l.lotterylog105Do.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lotterylog105) replaceDB(db *gorm.DB) lotterylog105 {
	l.lotterylog105Do.ReplaceDB(db)
	return l
}

type lotterylog105Do struct{ gen.DO }

type ILotterylog105Do interface {
	gen.SubQuery
	Debug() ILotterylog105Do
	WithContext(ctx context.Context) ILotterylog105Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILotterylog105Do
	WriteDB() ILotterylog105Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILotterylog105Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILotterylog105Do
	Not(conds ...gen.Condition) ILotterylog105Do
	Or(conds ...gen.Condition) ILotterylog105Do
	Select(conds ...field.Expr) ILotterylog105Do
	Where(conds ...gen.Condition) ILotterylog105Do
	Order(conds ...field.Expr) ILotterylog105Do
	Distinct(cols ...field.Expr) ILotterylog105Do
	Omit(cols ...field.Expr) ILotterylog105Do
	Join(table schema.Tabler, on ...field.Expr) ILotterylog105Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog105Do
	RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog105Do
	Group(cols ...field.Expr) ILotterylog105Do
	Having(conds ...gen.Condition) ILotterylog105Do
	Limit(limit int) ILotterylog105Do
	Offset(offset int) ILotterylog105Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog105Do
	Unscoped() ILotterylog105Do
	Create(values ...*model.Lotterylog105) error
	CreateInBatches(values []*model.Lotterylog105, batchSize int) error
	Save(values ...*model.Lotterylog105) error
	First() (*model.Lotterylog105, error)
	Take() (*model.Lotterylog105, error)
	Last() (*model.Lotterylog105, error)
	Find() ([]*model.Lotterylog105, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog105, err error)
	FindInBatches(result *[]*model.Lotterylog105, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lotterylog105) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILotterylog105Do
	Assign(attrs ...field.AssignExpr) ILotterylog105Do
	Joins(fields ...field.RelationField) ILotterylog105Do
	Preload(fields ...field.RelationField) ILotterylog105Do
	FirstOrInit() (*model.Lotterylog105, error)
	FirstOrCreate() (*model.Lotterylog105, error)
	FindByPage(offset int, limit int) (result []*model.Lotterylog105, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILotterylog105Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lotterylog105Do) Debug() ILotterylog105Do {
	return l.withDO(l.DO.Debug())
}

func (l lotterylog105Do) WithContext(ctx context.Context) ILotterylog105Do {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lotterylog105Do) ReadDB() ILotterylog105Do {
	return l.Clauses(dbresolver.Read)
}

func (l lotterylog105Do) WriteDB() ILotterylog105Do {
	return l.Clauses(dbresolver.Write)
}

func (l lotterylog105Do) Session(config *gorm.Session) ILotterylog105Do {
	return l.withDO(l.DO.Session(config))
}

func (l lotterylog105Do) Clauses(conds ...clause.Expression) ILotterylog105Do {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lotterylog105Do) Returning(value interface{}, columns ...string) ILotterylog105Do {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lotterylog105Do) Not(conds ...gen.Condition) ILotterylog105Do {
	return l.withDO(l.DO.Not(conds...))
}

func (l lotterylog105Do) Or(conds ...gen.Condition) ILotterylog105Do {
	return l.withDO(l.DO.Or(conds...))
}

func (l lotterylog105Do) Select(conds ...field.Expr) ILotterylog105Do {
	return l.withDO(l.DO.Select(conds...))
}

func (l lotterylog105Do) Where(conds ...gen.Condition) ILotterylog105Do {
	return l.withDO(l.DO.Where(conds...))
}

func (l lotterylog105Do) Order(conds ...field.Expr) ILotterylog105Do {
	return l.withDO(l.DO.Order(conds...))
}

func (l lotterylog105Do) Distinct(cols ...field.Expr) ILotterylog105Do {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lotterylog105Do) Omit(cols ...field.Expr) ILotterylog105Do {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lotterylog105Do) Join(table schema.Tabler, on ...field.Expr) ILotterylog105Do {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lotterylog105Do) LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog105Do {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lotterylog105Do) RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog105Do {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lotterylog105Do) Group(cols ...field.Expr) ILotterylog105Do {
	return l.withDO(l.DO.Group(cols...))
}

func (l lotterylog105Do) Having(conds ...gen.Condition) ILotterylog105Do {
	return l.withDO(l.DO.Having(conds...))
}

func (l lotterylog105Do) Limit(limit int) ILotterylog105Do {
	return l.withDO(l.DO.Limit(limit))
}

func (l lotterylog105Do) Offset(offset int) ILotterylog105Do {
	return l.withDO(l.DO.Offset(offset))
}

func (l lotterylog105Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog105Do {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lotterylog105Do) Unscoped() ILotterylog105Do {
	return l.withDO(l.DO.Unscoped())
}

func (l lotterylog105Do) Create(values ...*model.Lotterylog105) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lotterylog105Do) CreateInBatches(values []*model.Lotterylog105, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lotterylog105Do) Save(values ...*model.Lotterylog105) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lotterylog105Do) First() (*model.Lotterylog105, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog105), nil
	}
}

func (l lotterylog105Do) Take() (*model.Lotterylog105, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog105), nil
	}
}

func (l lotterylog105Do) Last() (*model.Lotterylog105, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog105), nil
	}
}

func (l lotterylog105Do) Find() ([]*model.Lotterylog105, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lotterylog105), err
}

func (l lotterylog105Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog105, err error) {
	buf := make([]*model.Lotterylog105, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lotterylog105Do) FindInBatches(result *[]*model.Lotterylog105, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lotterylog105Do) Attrs(attrs ...field.AssignExpr) ILotterylog105Do {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lotterylog105Do) Assign(attrs ...field.AssignExpr) ILotterylog105Do {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lotterylog105Do) Joins(fields ...field.RelationField) ILotterylog105Do {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lotterylog105Do) Preload(fields ...field.RelationField) ILotterylog105Do {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lotterylog105Do) FirstOrInit() (*model.Lotterylog105, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog105), nil
	}
}

func (l lotterylog105Do) FirstOrCreate() (*model.Lotterylog105, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog105), nil
	}
}

func (l lotterylog105Do) FindByPage(offset int, limit int) (result []*model.Lotterylog105, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lotterylog105Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lotterylog105Do) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lotterylog105Do) Delete(models ...*model.Lotterylog105) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lotterylog105Do) withDO(do gen.Dao) *lotterylog105Do {
	l.DO = *do.(*gen.DO)
	return l
}
