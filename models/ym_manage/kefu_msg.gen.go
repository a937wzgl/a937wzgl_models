// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newKefuMsg(db *gorm.DB, opts ...gen.DOOption) kefuMsg {
	_kefuMsg := kefuMsg{}

	_kefuMsg.kefuMsgDo.UseDB(db, opts...)
	_kefuMsg.kefuMsgDo.UseModel(&model.KefuMsg{})

	tableName := _kefuMsg.kefuMsgDo.TableName()
	_kefuMsg.ALL = field.NewAsterisk(tableName)
	_kefuMsg.ID = field.NewUint32(tableName, "id")
	_kefuMsg.Kfid = field.NewUint32(tableName, "kfid")
	_kefuMsg.Kfname = field.NewString(tableName, "kfname")
	_kefuMsg.UID = field.NewUint32(tableName, "uid")
	_kefuMsg.Uname = field.NewString(tableName, "uname")
	_kefuMsg.Msg = field.NewString(tableName, "msg")
	_kefuMsg.Createtime = field.NewString(tableName, "createtime")
	_kefuMsg.Type = field.NewBool(tableName, "type")

	_kefuMsg.fillFieldMap()

	return _kefuMsg
}

type kefuMsg struct {
	kefuMsgDo

	ALL        field.Asterisk
	ID         field.Uint32
	Kfid       field.Uint32
	Kfname     field.String
	UID        field.Uint32
	Uname      field.String
	Msg        field.String
	Createtime field.String
	Type       field.Bool // 1user send 2kefu send

	fieldMap map[string]field.Expr
}

func (k kefuMsg) Table(newTableName string) *kefuMsg {
	k.kefuMsgDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k kefuMsg) As(alias string) *kefuMsg {
	k.kefuMsgDo.DO = *(k.kefuMsgDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *kefuMsg) updateTableName(table string) *kefuMsg {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewUint32(table, "id")
	k.Kfid = field.NewUint32(table, "kfid")
	k.Kfname = field.NewString(table, "kfname")
	k.UID = field.NewUint32(table, "uid")
	k.Uname = field.NewString(table, "uname")
	k.Msg = field.NewString(table, "msg")
	k.Createtime = field.NewString(table, "createtime")
	k.Type = field.NewBool(table, "type")

	k.fillFieldMap()

	return k
}

func (k *kefuMsg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *kefuMsg) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 8)
	k.fieldMap["id"] = k.ID
	k.fieldMap["kfid"] = k.Kfid
	k.fieldMap["kfname"] = k.Kfname
	k.fieldMap["uid"] = k.UID
	k.fieldMap["uname"] = k.Uname
	k.fieldMap["msg"] = k.Msg
	k.fieldMap["createtime"] = k.Createtime
	k.fieldMap["type"] = k.Type
}

func (k kefuMsg) clone(db *gorm.DB) kefuMsg {
	k.kefuMsgDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k kefuMsg) replaceDB(db *gorm.DB) kefuMsg {
	k.kefuMsgDo.ReplaceDB(db)
	return k
}

type kefuMsgDo struct{ gen.DO }

type IKefuMsgDo interface {
	gen.SubQuery
	Debug() IKefuMsgDo
	WithContext(ctx context.Context) IKefuMsgDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IKefuMsgDo
	WriteDB() IKefuMsgDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IKefuMsgDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IKefuMsgDo
	Not(conds ...gen.Condition) IKefuMsgDo
	Or(conds ...gen.Condition) IKefuMsgDo
	Select(conds ...field.Expr) IKefuMsgDo
	Where(conds ...gen.Condition) IKefuMsgDo
	Order(conds ...field.Expr) IKefuMsgDo
	Distinct(cols ...field.Expr) IKefuMsgDo
	Omit(cols ...field.Expr) IKefuMsgDo
	Join(table schema.Tabler, on ...field.Expr) IKefuMsgDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IKefuMsgDo
	RightJoin(table schema.Tabler, on ...field.Expr) IKefuMsgDo
	Group(cols ...field.Expr) IKefuMsgDo
	Having(conds ...gen.Condition) IKefuMsgDo
	Limit(limit int) IKefuMsgDo
	Offset(offset int) IKefuMsgDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IKefuMsgDo
	Unscoped() IKefuMsgDo
	Create(values ...*model.KefuMsg) error
	CreateInBatches(values []*model.KefuMsg, batchSize int) error
	Save(values ...*model.KefuMsg) error
	First() (*model.KefuMsg, error)
	Take() (*model.KefuMsg, error)
	Last() (*model.KefuMsg, error)
	Find() ([]*model.KefuMsg, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KefuMsg, err error)
	FindInBatches(result *[]*model.KefuMsg, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.KefuMsg) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IKefuMsgDo
	Assign(attrs ...field.AssignExpr) IKefuMsgDo
	Joins(fields ...field.RelationField) IKefuMsgDo
	Preload(fields ...field.RelationField) IKefuMsgDo
	FirstOrInit() (*model.KefuMsg, error)
	FirstOrCreate() (*model.KefuMsg, error)
	FindByPage(offset int, limit int) (result []*model.KefuMsg, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IKefuMsgDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (k kefuMsgDo) Debug() IKefuMsgDo {
	return k.withDO(k.DO.Debug())
}

func (k kefuMsgDo) WithContext(ctx context.Context) IKefuMsgDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k kefuMsgDo) ReadDB() IKefuMsgDo {
	return k.Clauses(dbresolver.Read)
}

func (k kefuMsgDo) WriteDB() IKefuMsgDo {
	return k.Clauses(dbresolver.Write)
}

func (k kefuMsgDo) Session(config *gorm.Session) IKefuMsgDo {
	return k.withDO(k.DO.Session(config))
}

func (k kefuMsgDo) Clauses(conds ...clause.Expression) IKefuMsgDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k kefuMsgDo) Returning(value interface{}, columns ...string) IKefuMsgDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k kefuMsgDo) Not(conds ...gen.Condition) IKefuMsgDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k kefuMsgDo) Or(conds ...gen.Condition) IKefuMsgDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k kefuMsgDo) Select(conds ...field.Expr) IKefuMsgDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k kefuMsgDo) Where(conds ...gen.Condition) IKefuMsgDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k kefuMsgDo) Order(conds ...field.Expr) IKefuMsgDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k kefuMsgDo) Distinct(cols ...field.Expr) IKefuMsgDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k kefuMsgDo) Omit(cols ...field.Expr) IKefuMsgDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k kefuMsgDo) Join(table schema.Tabler, on ...field.Expr) IKefuMsgDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k kefuMsgDo) LeftJoin(table schema.Tabler, on ...field.Expr) IKefuMsgDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k kefuMsgDo) RightJoin(table schema.Tabler, on ...field.Expr) IKefuMsgDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k kefuMsgDo) Group(cols ...field.Expr) IKefuMsgDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k kefuMsgDo) Having(conds ...gen.Condition) IKefuMsgDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k kefuMsgDo) Limit(limit int) IKefuMsgDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k kefuMsgDo) Offset(offset int) IKefuMsgDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k kefuMsgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IKefuMsgDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k kefuMsgDo) Unscoped() IKefuMsgDo {
	return k.withDO(k.DO.Unscoped())
}

func (k kefuMsgDo) Create(values ...*model.KefuMsg) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k kefuMsgDo) CreateInBatches(values []*model.KefuMsg, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k kefuMsgDo) Save(values ...*model.KefuMsg) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k kefuMsgDo) First() (*model.KefuMsg, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuMsg), nil
	}
}

func (k kefuMsgDo) Take() (*model.KefuMsg, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuMsg), nil
	}
}

func (k kefuMsgDo) Last() (*model.KefuMsg, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuMsg), nil
	}
}

func (k kefuMsgDo) Find() ([]*model.KefuMsg, error) {
	result, err := k.DO.Find()
	return result.([]*model.KefuMsg), err
}

func (k kefuMsgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KefuMsg, err error) {
	buf := make([]*model.KefuMsg, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k kefuMsgDo) FindInBatches(result *[]*model.KefuMsg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k kefuMsgDo) Attrs(attrs ...field.AssignExpr) IKefuMsgDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k kefuMsgDo) Assign(attrs ...field.AssignExpr) IKefuMsgDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k kefuMsgDo) Joins(fields ...field.RelationField) IKefuMsgDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k kefuMsgDo) Preload(fields ...field.RelationField) IKefuMsgDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k kefuMsgDo) FirstOrInit() (*model.KefuMsg, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuMsg), nil
	}
}

func (k kefuMsgDo) FirstOrCreate() (*model.KefuMsg, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuMsg), nil
	}
}

func (k kefuMsgDo) FindByPage(offset int, limit int) (result []*model.KefuMsg, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k kefuMsgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k kefuMsgDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k kefuMsgDo) Delete(models ...*model.KefuMsg) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *kefuMsgDo) withDO(do gen.Dao) *kefuMsgDo {
	k.DO = *do.(*gen.DO)
	return k
}
