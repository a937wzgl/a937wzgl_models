// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newGameRecord(db *gorm.DB, opts ...gen.DOOption) gameRecord {
	_gameRecord := gameRecord{}

	_gameRecord.gameRecordDo.UseDB(db, opts...)
	_gameRecord.gameRecordDo.UseModel(&model.GameRecord{})

	tableName := _gameRecord.gameRecordDo.TableName()
	_gameRecord.ALL = field.NewAsterisk(tableName)
	_gameRecord.ID = field.NewString(tableName, "id")
	_gameRecord.GameID = field.NewString(tableName, "game_id")
	_gameRecord.UserID = field.NewString(tableName, "user_id")
	_gameRecord.Amount = field.NewInt64(tableName, "amount")
	_gameRecord.Balance = field.NewInt64(tableName, "balance")
	_gameRecord.Type = field.NewString(tableName, "type")
	_gameRecord.CreatedAt = field.NewTime(tableName, "created_at")

	_gameRecord.fillFieldMap()

	return _gameRecord
}

type gameRecord struct {
	gameRecordDo

	ALL       field.Asterisk
	ID        field.String
	GameID    field.String
	UserID    field.String
	Amount    field.Int64
	Balance   field.Int64
	Type      field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (g gameRecord) Table(newTableName string) *gameRecord {
	g.gameRecordDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameRecord) As(alias string) *gameRecord {
	g.gameRecordDo.DO = *(g.gameRecordDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameRecord) updateTableName(table string) *gameRecord {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewString(table, "id")
	g.GameID = field.NewString(table, "game_id")
	g.UserID = field.NewString(table, "user_id")
	g.Amount = field.NewInt64(table, "amount")
	g.Balance = field.NewInt64(table, "balance")
	g.Type = field.NewString(table, "type")
	g.CreatedAt = field.NewTime(table, "created_at")

	g.fillFieldMap()

	return g
}

func (g *gameRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameRecord) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["id"] = g.ID
	g.fieldMap["game_id"] = g.GameID
	g.fieldMap["user_id"] = g.UserID
	g.fieldMap["amount"] = g.Amount
	g.fieldMap["balance"] = g.Balance
	g.fieldMap["type"] = g.Type
	g.fieldMap["created_at"] = g.CreatedAt
}

func (g gameRecord) clone(db *gorm.DB) gameRecord {
	g.gameRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameRecord) replaceDB(db *gorm.DB) gameRecord {
	g.gameRecordDo.ReplaceDB(db)
	return g
}

type gameRecordDo struct{ gen.DO }

type IGameRecordDo interface {
	gen.SubQuery
	Debug() IGameRecordDo
	WithContext(ctx context.Context) IGameRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGameRecordDo
	WriteDB() IGameRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGameRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGameRecordDo
	Not(conds ...gen.Condition) IGameRecordDo
	Or(conds ...gen.Condition) IGameRecordDo
	Select(conds ...field.Expr) IGameRecordDo
	Where(conds ...gen.Condition) IGameRecordDo
	Order(conds ...field.Expr) IGameRecordDo
	Distinct(cols ...field.Expr) IGameRecordDo
	Omit(cols ...field.Expr) IGameRecordDo
	Join(table schema.Tabler, on ...field.Expr) IGameRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGameRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGameRecordDo
	Group(cols ...field.Expr) IGameRecordDo
	Having(conds ...gen.Condition) IGameRecordDo
	Limit(limit int) IGameRecordDo
	Offset(offset int) IGameRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGameRecordDo
	Unscoped() IGameRecordDo
	Create(values ...*model.GameRecord) error
	CreateInBatches(values []*model.GameRecord, batchSize int) error
	Save(values ...*model.GameRecord) error
	First() (*model.GameRecord, error)
	Take() (*model.GameRecord, error)
	Last() (*model.GameRecord, error)
	Find() ([]*model.GameRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameRecord, err error)
	FindInBatches(result *[]*model.GameRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GameRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGameRecordDo
	Assign(attrs ...field.AssignExpr) IGameRecordDo
	Joins(fields ...field.RelationField) IGameRecordDo
	Preload(fields ...field.RelationField) IGameRecordDo
	FirstOrInit() (*model.GameRecord, error)
	FirstOrCreate() (*model.GameRecord, error)
	FindByPage(offset int, limit int) (result []*model.GameRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGameRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gameRecordDo) Debug() IGameRecordDo {
	return g.withDO(g.DO.Debug())
}

func (g gameRecordDo) WithContext(ctx context.Context) IGameRecordDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameRecordDo) ReadDB() IGameRecordDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameRecordDo) WriteDB() IGameRecordDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameRecordDo) Session(config *gorm.Session) IGameRecordDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameRecordDo) Clauses(conds ...clause.Expression) IGameRecordDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameRecordDo) Returning(value interface{}, columns ...string) IGameRecordDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameRecordDo) Not(conds ...gen.Condition) IGameRecordDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameRecordDo) Or(conds ...gen.Condition) IGameRecordDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameRecordDo) Select(conds ...field.Expr) IGameRecordDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameRecordDo) Where(conds ...gen.Condition) IGameRecordDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameRecordDo) Order(conds ...field.Expr) IGameRecordDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameRecordDo) Distinct(cols ...field.Expr) IGameRecordDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameRecordDo) Omit(cols ...field.Expr) IGameRecordDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameRecordDo) Join(table schema.Tabler, on ...field.Expr) IGameRecordDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGameRecordDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IGameRecordDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameRecordDo) Group(cols ...field.Expr) IGameRecordDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameRecordDo) Having(conds ...gen.Condition) IGameRecordDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameRecordDo) Limit(limit int) IGameRecordDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameRecordDo) Offset(offset int) IGameRecordDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGameRecordDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameRecordDo) Unscoped() IGameRecordDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameRecordDo) Create(values ...*model.GameRecord) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameRecordDo) CreateInBatches(values []*model.GameRecord, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameRecordDo) Save(values ...*model.GameRecord) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameRecordDo) First() (*model.GameRecord, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameRecord), nil
	}
}

func (g gameRecordDo) Take() (*model.GameRecord, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameRecord), nil
	}
}

func (g gameRecordDo) Last() (*model.GameRecord, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameRecord), nil
	}
}

func (g gameRecordDo) Find() ([]*model.GameRecord, error) {
	result, err := g.DO.Find()
	return result.([]*model.GameRecord), err
}

func (g gameRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameRecord, err error) {
	buf := make([]*model.GameRecord, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameRecordDo) FindInBatches(result *[]*model.GameRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameRecordDo) Attrs(attrs ...field.AssignExpr) IGameRecordDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameRecordDo) Assign(attrs ...field.AssignExpr) IGameRecordDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameRecordDo) Joins(fields ...field.RelationField) IGameRecordDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameRecordDo) Preload(fields ...field.RelationField) IGameRecordDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameRecordDo) FirstOrInit() (*model.GameRecord, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameRecord), nil
	}
}

func (g gameRecordDo) FirstOrCreate() (*model.GameRecord, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameRecord), nil
	}
}

func (g gameRecordDo) FindByPage(offset int, limit int) (result []*model.GameRecord, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameRecordDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameRecordDo) Delete(models ...*model.GameRecord) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameRecordDo) withDO(do gen.Dao) *gameRecordDo {
	g.DO = *do.(*gen.DO)
	return g
}
