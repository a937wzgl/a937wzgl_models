// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package la_ba

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLotterylog5201User(db *gorm.DB, opts ...gen.DOOption) lotterylog5201User {
	_lotterylog5201User := lotterylog5201User{}

	_lotterylog5201User.lotterylog5201UserDo.UseDB(db, opts...)
	_lotterylog5201User.lotterylog5201UserDo.UseModel(&model.Lotterylog5201User{})

	tableName := _lotterylog5201User.lotterylog5201UserDo.TableName()
	_lotterylog5201User.ALL = field.NewAsterisk(tableName)
	_lotterylog5201User.ID = field.NewInt32(tableName, "id")
	_lotterylog5201User.Userid = field.NewInt32(tableName, "userid")
	_lotterylog5201User.Bet = field.NewInt32(tableName, "bet")
	_lotterylog5201User.LineS = field.NewInt32(tableName, "line_s")
	_lotterylog5201User.ScoreBefore = field.NewInt32(tableName, "score_before")
	_lotterylog5201User.ScoreLinescore = field.NewInt32(tableName, "score_linescore")
	_lotterylog5201User.ScoreWin = field.NewInt32(tableName, "score_win")
	_lotterylog5201User.ScoreCurrent = field.NewInt32(tableName, "score_current")
	_lotterylog5201User.FreeCountBefore = field.NewInt32(tableName, "free_count_before")
	_lotterylog5201User.FreeCountWin = field.NewInt32(tableName, "free_count_win")
	_lotterylog5201User.FreeCountCurrent = field.NewInt32(tableName, "free_count_current")
	_lotterylog5201User.ResultArray = field.NewString(tableName, "result_array")
	_lotterylog5201User.LotteryTime = field.NewTime(tableName, "lotteryTime")
	_lotterylog5201User.Mark = field.NewBool(tableName, "mark")

	_lotterylog5201User.fillFieldMap()

	return _lotterylog5201User
}

type lotterylog5201User struct {
	lotterylog5201UserDo

	ALL              field.Asterisk
	ID               field.Int32
	Userid           field.Int32
	Bet              field.Int32
	LineS            field.Int32
	ScoreBefore      field.Int32
	ScoreLinescore   field.Int32
	ScoreWin         field.Int32
	ScoreCurrent     field.Int32
	FreeCountBefore  field.Int32
	FreeCountWin     field.Int32
	FreeCountCurrent field.Int32
	ResultArray      field.String
	LotteryTime      field.Time
	Mark             field.Bool

	fieldMap map[string]field.Expr
}

func (l lotterylog5201User) Table(newTableName string) *lotterylog5201User {
	l.lotterylog5201UserDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lotterylog5201User) As(alias string) *lotterylog5201User {
	l.lotterylog5201UserDo.DO = *(l.lotterylog5201UserDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lotterylog5201User) updateTableName(table string) *lotterylog5201User {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Userid = field.NewInt32(table, "userid")
	l.Bet = field.NewInt32(table, "bet")
	l.LineS = field.NewInt32(table, "line_s")
	l.ScoreBefore = field.NewInt32(table, "score_before")
	l.ScoreLinescore = field.NewInt32(table, "score_linescore")
	l.ScoreWin = field.NewInt32(table, "score_win")
	l.ScoreCurrent = field.NewInt32(table, "score_current")
	l.FreeCountBefore = field.NewInt32(table, "free_count_before")
	l.FreeCountWin = field.NewInt32(table, "free_count_win")
	l.FreeCountCurrent = field.NewInt32(table, "free_count_current")
	l.ResultArray = field.NewString(table, "result_array")
	l.LotteryTime = field.NewTime(table, "lotteryTime")
	l.Mark = field.NewBool(table, "mark")

	l.fillFieldMap()

	return l
}

func (l *lotterylog5201User) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lotterylog5201User) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["id"] = l.ID
	l.fieldMap["userid"] = l.Userid
	l.fieldMap["bet"] = l.Bet
	l.fieldMap["line_s"] = l.LineS
	l.fieldMap["score_before"] = l.ScoreBefore
	l.fieldMap["score_linescore"] = l.ScoreLinescore
	l.fieldMap["score_win"] = l.ScoreWin
	l.fieldMap["score_current"] = l.ScoreCurrent
	l.fieldMap["free_count_before"] = l.FreeCountBefore
	l.fieldMap["free_count_win"] = l.FreeCountWin
	l.fieldMap["free_count_current"] = l.FreeCountCurrent
	l.fieldMap["result_array"] = l.ResultArray
	l.fieldMap["lotteryTime"] = l.LotteryTime
	l.fieldMap["mark"] = l.Mark
}

func (l lotterylog5201User) clone(db *gorm.DB) lotterylog5201User {
	l.lotterylog5201UserDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lotterylog5201User) replaceDB(db *gorm.DB) lotterylog5201User {
	l.lotterylog5201UserDo.ReplaceDB(db)
	return l
}

type lotterylog5201UserDo struct{ gen.DO }

type ILotterylog5201UserDo interface {
	gen.SubQuery
	Debug() ILotterylog5201UserDo
	WithContext(ctx context.Context) ILotterylog5201UserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILotterylog5201UserDo
	WriteDB() ILotterylog5201UserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILotterylog5201UserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILotterylog5201UserDo
	Not(conds ...gen.Condition) ILotterylog5201UserDo
	Or(conds ...gen.Condition) ILotterylog5201UserDo
	Select(conds ...field.Expr) ILotterylog5201UserDo
	Where(conds ...gen.Condition) ILotterylog5201UserDo
	Order(conds ...field.Expr) ILotterylog5201UserDo
	Distinct(cols ...field.Expr) ILotterylog5201UserDo
	Omit(cols ...field.Expr) ILotterylog5201UserDo
	Join(table schema.Tabler, on ...field.Expr) ILotterylog5201UserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog5201UserDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog5201UserDo
	Group(cols ...field.Expr) ILotterylog5201UserDo
	Having(conds ...gen.Condition) ILotterylog5201UserDo
	Limit(limit int) ILotterylog5201UserDo
	Offset(offset int) ILotterylog5201UserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog5201UserDo
	Unscoped() ILotterylog5201UserDo
	Create(values ...*model.Lotterylog5201User) error
	CreateInBatches(values []*model.Lotterylog5201User, batchSize int) error
	Save(values ...*model.Lotterylog5201User) error
	First() (*model.Lotterylog5201User, error)
	Take() (*model.Lotterylog5201User, error)
	Last() (*model.Lotterylog5201User, error)
	Find() ([]*model.Lotterylog5201User, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog5201User, err error)
	FindInBatches(result *[]*model.Lotterylog5201User, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lotterylog5201User) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILotterylog5201UserDo
	Assign(attrs ...field.AssignExpr) ILotterylog5201UserDo
	Joins(fields ...field.RelationField) ILotterylog5201UserDo
	Preload(fields ...field.RelationField) ILotterylog5201UserDo
	FirstOrInit() (*model.Lotterylog5201User, error)
	FirstOrCreate() (*model.Lotterylog5201User, error)
	FindByPage(offset int, limit int) (result []*model.Lotterylog5201User, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILotterylog5201UserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lotterylog5201UserDo) Debug() ILotterylog5201UserDo {
	return l.withDO(l.DO.Debug())
}

func (l lotterylog5201UserDo) WithContext(ctx context.Context) ILotterylog5201UserDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lotterylog5201UserDo) ReadDB() ILotterylog5201UserDo {
	return l.Clauses(dbresolver.Read)
}

func (l lotterylog5201UserDo) WriteDB() ILotterylog5201UserDo {
	return l.Clauses(dbresolver.Write)
}

func (l lotterylog5201UserDo) Session(config *gorm.Session) ILotterylog5201UserDo {
	return l.withDO(l.DO.Session(config))
}

func (l lotterylog5201UserDo) Clauses(conds ...clause.Expression) ILotterylog5201UserDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lotterylog5201UserDo) Returning(value interface{}, columns ...string) ILotterylog5201UserDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lotterylog5201UserDo) Not(conds ...gen.Condition) ILotterylog5201UserDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lotterylog5201UserDo) Or(conds ...gen.Condition) ILotterylog5201UserDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lotterylog5201UserDo) Select(conds ...field.Expr) ILotterylog5201UserDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lotterylog5201UserDo) Where(conds ...gen.Condition) ILotterylog5201UserDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lotterylog5201UserDo) Order(conds ...field.Expr) ILotterylog5201UserDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lotterylog5201UserDo) Distinct(cols ...field.Expr) ILotterylog5201UserDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lotterylog5201UserDo) Omit(cols ...field.Expr) ILotterylog5201UserDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lotterylog5201UserDo) Join(table schema.Tabler, on ...field.Expr) ILotterylog5201UserDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lotterylog5201UserDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog5201UserDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lotterylog5201UserDo) RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog5201UserDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lotterylog5201UserDo) Group(cols ...field.Expr) ILotterylog5201UserDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lotterylog5201UserDo) Having(conds ...gen.Condition) ILotterylog5201UserDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lotterylog5201UserDo) Limit(limit int) ILotterylog5201UserDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lotterylog5201UserDo) Offset(offset int) ILotterylog5201UserDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lotterylog5201UserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog5201UserDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lotterylog5201UserDo) Unscoped() ILotterylog5201UserDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lotterylog5201UserDo) Create(values ...*model.Lotterylog5201User) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lotterylog5201UserDo) CreateInBatches(values []*model.Lotterylog5201User, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lotterylog5201UserDo) Save(values ...*model.Lotterylog5201User) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lotterylog5201UserDo) First() (*model.Lotterylog5201User, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog5201User), nil
	}
}

func (l lotterylog5201UserDo) Take() (*model.Lotterylog5201User, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog5201User), nil
	}
}

func (l lotterylog5201UserDo) Last() (*model.Lotterylog5201User, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog5201User), nil
	}
}

func (l lotterylog5201UserDo) Find() ([]*model.Lotterylog5201User, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lotterylog5201User), err
}

func (l lotterylog5201UserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog5201User, err error) {
	buf := make([]*model.Lotterylog5201User, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lotterylog5201UserDo) FindInBatches(result *[]*model.Lotterylog5201User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lotterylog5201UserDo) Attrs(attrs ...field.AssignExpr) ILotterylog5201UserDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lotterylog5201UserDo) Assign(attrs ...field.AssignExpr) ILotterylog5201UserDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lotterylog5201UserDo) Joins(fields ...field.RelationField) ILotterylog5201UserDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lotterylog5201UserDo) Preload(fields ...field.RelationField) ILotterylog5201UserDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lotterylog5201UserDo) FirstOrInit() (*model.Lotterylog5201User, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog5201User), nil
	}
}

func (l lotterylog5201UserDo) FirstOrCreate() (*model.Lotterylog5201User, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog5201User), nil
	}
}

func (l lotterylog5201UserDo) FindByPage(offset int, limit int) (result []*model.Lotterylog5201User, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lotterylog5201UserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lotterylog5201UserDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lotterylog5201UserDo) Delete(models ...*model.Lotterylog5201User) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lotterylog5201UserDo) withDO(do gen.Dao) *lotterylog5201UserDo {
	l.DO = *do.(*gen.DO)
	return l
}
