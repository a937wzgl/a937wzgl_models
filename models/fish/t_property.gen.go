// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fish

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newTProperty(db *gorm.DB, opts ...gen.DOOption) tProperty {
	_tProperty := tProperty{}

	_tProperty.tPropertyDo.UseDB(db, opts...)
	_tProperty.tPropertyDo.UseModel(&model.TProperty{})

	tableName := _tProperty.tPropertyDo.TableName()
	_tProperty.ALL = field.NewAsterisk(tableName)
	_tProperty.PropID = field.NewInt32(tableName, "propId")
	_tProperty.Userid = field.NewInt32(tableName, "userid")
	_tProperty.Ice = field.NewInt32(tableName, "ice")

	_tProperty.fillFieldMap()

	return _tProperty
}

type tProperty struct {
	tPropertyDo

	ALL    field.Asterisk
	PropID field.Int32
	Userid field.Int32
	Ice    field.Int32

	fieldMap map[string]field.Expr
}

func (t tProperty) Table(newTableName string) *tProperty {
	t.tPropertyDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tProperty) As(alias string) *tProperty {
	t.tPropertyDo.DO = *(t.tPropertyDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tProperty) updateTableName(table string) *tProperty {
	t.ALL = field.NewAsterisk(table)
	t.PropID = field.NewInt32(table, "propId")
	t.Userid = field.NewInt32(table, "userid")
	t.Ice = field.NewInt32(table, "ice")

	t.fillFieldMap()

	return t
}

func (t *tProperty) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tProperty) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["propId"] = t.PropID
	t.fieldMap["userid"] = t.Userid
	t.fieldMap["ice"] = t.Ice
}

func (t tProperty) clone(db *gorm.DB) tProperty {
	t.tPropertyDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tProperty) replaceDB(db *gorm.DB) tProperty {
	t.tPropertyDo.ReplaceDB(db)
	return t
}

type tPropertyDo struct{ gen.DO }

type ITPropertyDo interface {
	gen.SubQuery
	Debug() ITPropertyDo
	WithContext(ctx context.Context) ITPropertyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITPropertyDo
	WriteDB() ITPropertyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITPropertyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITPropertyDo
	Not(conds ...gen.Condition) ITPropertyDo
	Or(conds ...gen.Condition) ITPropertyDo
	Select(conds ...field.Expr) ITPropertyDo
	Where(conds ...gen.Condition) ITPropertyDo
	Order(conds ...field.Expr) ITPropertyDo
	Distinct(cols ...field.Expr) ITPropertyDo
	Omit(cols ...field.Expr) ITPropertyDo
	Join(table schema.Tabler, on ...field.Expr) ITPropertyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITPropertyDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITPropertyDo
	Group(cols ...field.Expr) ITPropertyDo
	Having(conds ...gen.Condition) ITPropertyDo
	Limit(limit int) ITPropertyDo
	Offset(offset int) ITPropertyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITPropertyDo
	Unscoped() ITPropertyDo
	Create(values ...*model.TProperty) error
	CreateInBatches(values []*model.TProperty, batchSize int) error
	Save(values ...*model.TProperty) error
	First() (*model.TProperty, error)
	Take() (*model.TProperty, error)
	Last() (*model.TProperty, error)
	Find() ([]*model.TProperty, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TProperty, err error)
	FindInBatches(result *[]*model.TProperty, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TProperty) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITPropertyDo
	Assign(attrs ...field.AssignExpr) ITPropertyDo
	Joins(fields ...field.RelationField) ITPropertyDo
	Preload(fields ...field.RelationField) ITPropertyDo
	FirstOrInit() (*model.TProperty, error)
	FirstOrCreate() (*model.TProperty, error)
	FindByPage(offset int, limit int) (result []*model.TProperty, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITPropertyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tPropertyDo) Debug() ITPropertyDo {
	return t.withDO(t.DO.Debug())
}

func (t tPropertyDo) WithContext(ctx context.Context) ITPropertyDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPropertyDo) ReadDB() ITPropertyDo {
	return t.Clauses(dbresolver.Read)
}

func (t tPropertyDo) WriteDB() ITPropertyDo {
	return t.Clauses(dbresolver.Write)
}

func (t tPropertyDo) Session(config *gorm.Session) ITPropertyDo {
	return t.withDO(t.DO.Session(config))
}

func (t tPropertyDo) Clauses(conds ...clause.Expression) ITPropertyDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPropertyDo) Returning(value interface{}, columns ...string) ITPropertyDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPropertyDo) Not(conds ...gen.Condition) ITPropertyDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPropertyDo) Or(conds ...gen.Condition) ITPropertyDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPropertyDo) Select(conds ...field.Expr) ITPropertyDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPropertyDo) Where(conds ...gen.Condition) ITPropertyDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPropertyDo) Order(conds ...field.Expr) ITPropertyDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPropertyDo) Distinct(cols ...field.Expr) ITPropertyDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPropertyDo) Omit(cols ...field.Expr) ITPropertyDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPropertyDo) Join(table schema.Tabler, on ...field.Expr) ITPropertyDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPropertyDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITPropertyDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPropertyDo) RightJoin(table schema.Tabler, on ...field.Expr) ITPropertyDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPropertyDo) Group(cols ...field.Expr) ITPropertyDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPropertyDo) Having(conds ...gen.Condition) ITPropertyDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPropertyDo) Limit(limit int) ITPropertyDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPropertyDo) Offset(offset int) ITPropertyDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPropertyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITPropertyDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPropertyDo) Unscoped() ITPropertyDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPropertyDo) Create(values ...*model.TProperty) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPropertyDo) CreateInBatches(values []*model.TProperty, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPropertyDo) Save(values ...*model.TProperty) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPropertyDo) First() (*model.TProperty, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TProperty), nil
	}
}

func (t tPropertyDo) Take() (*model.TProperty, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TProperty), nil
	}
}

func (t tPropertyDo) Last() (*model.TProperty, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TProperty), nil
	}
}

func (t tPropertyDo) Find() ([]*model.TProperty, error) {
	result, err := t.DO.Find()
	return result.([]*model.TProperty), err
}

func (t tPropertyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TProperty, err error) {
	buf := make([]*model.TProperty, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPropertyDo) FindInBatches(result *[]*model.TProperty, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPropertyDo) Attrs(attrs ...field.AssignExpr) ITPropertyDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPropertyDo) Assign(attrs ...field.AssignExpr) ITPropertyDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPropertyDo) Joins(fields ...field.RelationField) ITPropertyDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tPropertyDo) Preload(fields ...field.RelationField) ITPropertyDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tPropertyDo) FirstOrInit() (*model.TProperty, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TProperty), nil
	}
}

func (t tPropertyDo) FirstOrCreate() (*model.TProperty, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TProperty), nil
	}
}

func (t tPropertyDo) FindByPage(offset int, limit int) (result []*model.TProperty, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPropertyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tPropertyDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tPropertyDo) Delete(models ...*model.TProperty) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tPropertyDo) withDO(do gen.Dao) *tPropertyDo {
	t.DO = *do.(*gen.DO)
	return t
}
