// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package game

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newTScene(db *gorm.DB, opts ...gen.DOOption) tScene {
	_tScene := tScene{}

	_tScene.tSceneDo.UseDB(db, opts...)
	_tScene.tSceneDo.UseModel(&model.TScene{})

	tableName := _tScene.tSceneDo.TableName()
	_tScene.ALL = field.NewAsterisk(tableName)
	_tScene.ID = field.NewUint32(tableName, "id")
	_tScene.RoomType = field.NewInt32(tableName, "room_type")
	_tScene.Scene = field.NewInt32(tableName, "scene")
	_tScene.Genre = field.NewInt32(tableName, "genre")
	_tScene.Type = field.NewString(tableName, "type")
	_tScene.Time = field.NewInt32(tableName, "time")
	_tScene.LimitType = field.NewInt32(tableName, "limit_type")
	_tScene.LimitNum = field.NewInt32(tableName, "limit_num")
	_tScene.LimitDanzhu = field.NewInt32(tableName, "limit_danzhu")
	_tScene.ConsumeType = field.NewInt32(tableName, "consume_type")
	_tScene.ConsumeNum = field.NewInt32(tableName, "consume_num")
	_tScene.Tax = field.NewInt32(tableName, "tax")
	_tScene.Online = field.NewInt32(tableName, "online")

	_tScene.fillFieldMap()

	return _tScene
}

type tScene struct {
	tSceneDo

	ALL         field.Asterisk
	ID          field.Uint32
	RoomType    field.Int32 // 房间类型
	Scene       field.Int32 // 场景编号
	Genre       field.Int32
	Type        field.String // 游戏类型
	Time        field.Int32
	LimitType   field.Int32 // 进房消费类型
	LimitNum    field.Int32 // 进房最低需要携带金额
	LimitDanzhu field.Int32 // 单注
	ConsumeType field.Int32 // 消费类型
	ConsumeNum  field.Int32 // 小盲注
	Tax         field.Int32 // 税收比率
	Online      field.Int32 // 在线人数

	fieldMap map[string]field.Expr
}

func (t tScene) Table(newTableName string) *tScene {
	t.tSceneDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tScene) As(alias string) *tScene {
	t.tSceneDo.DO = *(t.tSceneDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tScene) updateTableName(table string) *tScene {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint32(table, "id")
	t.RoomType = field.NewInt32(table, "room_type")
	t.Scene = field.NewInt32(table, "scene")
	t.Genre = field.NewInt32(table, "genre")
	t.Type = field.NewString(table, "type")
	t.Time = field.NewInt32(table, "time")
	t.LimitType = field.NewInt32(table, "limit_type")
	t.LimitNum = field.NewInt32(table, "limit_num")
	t.LimitDanzhu = field.NewInt32(table, "limit_danzhu")
	t.ConsumeType = field.NewInt32(table, "consume_type")
	t.ConsumeNum = field.NewInt32(table, "consume_num")
	t.Tax = field.NewInt32(table, "tax")
	t.Online = field.NewInt32(table, "online")

	t.fillFieldMap()

	return t
}

func (t *tScene) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tScene) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.ID
	t.fieldMap["room_type"] = t.RoomType
	t.fieldMap["scene"] = t.Scene
	t.fieldMap["genre"] = t.Genre
	t.fieldMap["type"] = t.Type
	t.fieldMap["time"] = t.Time
	t.fieldMap["limit_type"] = t.LimitType
	t.fieldMap["limit_num"] = t.LimitNum
	t.fieldMap["limit_danzhu"] = t.LimitDanzhu
	t.fieldMap["consume_type"] = t.ConsumeType
	t.fieldMap["consume_num"] = t.ConsumeNum
	t.fieldMap["tax"] = t.Tax
	t.fieldMap["online"] = t.Online
}

func (t tScene) clone(db *gorm.DB) tScene {
	t.tSceneDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tScene) replaceDB(db *gorm.DB) tScene {
	t.tSceneDo.ReplaceDB(db)
	return t
}

type tSceneDo struct{ gen.DO }

type ITSceneDo interface {
	gen.SubQuery
	Debug() ITSceneDo
	WithContext(ctx context.Context) ITSceneDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITSceneDo
	WriteDB() ITSceneDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITSceneDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITSceneDo
	Not(conds ...gen.Condition) ITSceneDo
	Or(conds ...gen.Condition) ITSceneDo
	Select(conds ...field.Expr) ITSceneDo
	Where(conds ...gen.Condition) ITSceneDo
	Order(conds ...field.Expr) ITSceneDo
	Distinct(cols ...field.Expr) ITSceneDo
	Omit(cols ...field.Expr) ITSceneDo
	Join(table schema.Tabler, on ...field.Expr) ITSceneDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITSceneDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITSceneDo
	Group(cols ...field.Expr) ITSceneDo
	Having(conds ...gen.Condition) ITSceneDo
	Limit(limit int) ITSceneDo
	Offset(offset int) ITSceneDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITSceneDo
	Unscoped() ITSceneDo
	Create(values ...*model.TScene) error
	CreateInBatches(values []*model.TScene, batchSize int) error
	Save(values ...*model.TScene) error
	First() (*model.TScene, error)
	Take() (*model.TScene, error)
	Last() (*model.TScene, error)
	Find() ([]*model.TScene, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TScene, err error)
	FindInBatches(result *[]*model.TScene, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TScene) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITSceneDo
	Assign(attrs ...field.AssignExpr) ITSceneDo
	Joins(fields ...field.RelationField) ITSceneDo
	Preload(fields ...field.RelationField) ITSceneDo
	FirstOrInit() (*model.TScene, error)
	FirstOrCreate() (*model.TScene, error)
	FindByPage(offset int, limit int) (result []*model.TScene, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITSceneDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tSceneDo) Debug() ITSceneDo {
	return t.withDO(t.DO.Debug())
}

func (t tSceneDo) WithContext(ctx context.Context) ITSceneDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSceneDo) ReadDB() ITSceneDo {
	return t.Clauses(dbresolver.Read)
}

func (t tSceneDo) WriteDB() ITSceneDo {
	return t.Clauses(dbresolver.Write)
}

func (t tSceneDo) Session(config *gorm.Session) ITSceneDo {
	return t.withDO(t.DO.Session(config))
}

func (t tSceneDo) Clauses(conds ...clause.Expression) ITSceneDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSceneDo) Returning(value interface{}, columns ...string) ITSceneDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSceneDo) Not(conds ...gen.Condition) ITSceneDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSceneDo) Or(conds ...gen.Condition) ITSceneDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSceneDo) Select(conds ...field.Expr) ITSceneDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSceneDo) Where(conds ...gen.Condition) ITSceneDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSceneDo) Order(conds ...field.Expr) ITSceneDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSceneDo) Distinct(cols ...field.Expr) ITSceneDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSceneDo) Omit(cols ...field.Expr) ITSceneDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSceneDo) Join(table schema.Tabler, on ...field.Expr) ITSceneDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSceneDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITSceneDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSceneDo) RightJoin(table schema.Tabler, on ...field.Expr) ITSceneDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSceneDo) Group(cols ...field.Expr) ITSceneDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSceneDo) Having(conds ...gen.Condition) ITSceneDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSceneDo) Limit(limit int) ITSceneDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSceneDo) Offset(offset int) ITSceneDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSceneDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITSceneDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSceneDo) Unscoped() ITSceneDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSceneDo) Create(values ...*model.TScene) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSceneDo) CreateInBatches(values []*model.TScene, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSceneDo) Save(values ...*model.TScene) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSceneDo) First() (*model.TScene, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TScene), nil
	}
}

func (t tSceneDo) Take() (*model.TScene, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TScene), nil
	}
}

func (t tSceneDo) Last() (*model.TScene, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TScene), nil
	}
}

func (t tSceneDo) Find() ([]*model.TScene, error) {
	result, err := t.DO.Find()
	return result.([]*model.TScene), err
}

func (t tSceneDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TScene, err error) {
	buf := make([]*model.TScene, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSceneDo) FindInBatches(result *[]*model.TScene, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSceneDo) Attrs(attrs ...field.AssignExpr) ITSceneDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSceneDo) Assign(attrs ...field.AssignExpr) ITSceneDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSceneDo) Joins(fields ...field.RelationField) ITSceneDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tSceneDo) Preload(fields ...field.RelationField) ITSceneDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tSceneDo) FirstOrInit() (*model.TScene, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TScene), nil
	}
}

func (t tSceneDo) FirstOrCreate() (*model.TScene, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TScene), nil
	}
}

func (t tSceneDo) FindByPage(offset int, limit int) (result []*model.TScene, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSceneDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tSceneDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tSceneDo) Delete(models ...*model.TScene) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tSceneDo) withDO(do gen.Dao) *tSceneDo {
	t.DO = *do.(*gen.DO)
	return t
}
