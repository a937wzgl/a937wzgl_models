// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newGameRoom(db *gorm.DB, opts ...gen.DOOption) gameRoom {
	_gameRoom := gameRoom{}

	_gameRoom.gameRoomDo.UseDB(db, opts...)
	_gameRoom.gameRoomDo.UseModel(&model.GameRoom{})

	tableName := _gameRoom.gameRoomDo.TableName()
	_gameRoom.ALL = field.NewAsterisk(tableName)
	_gameRoom.ID = field.NewString(tableName, "id")
	_gameRoom.Type = field.NewString(tableName, "type")
	_gameRoom.Name = field.NewString(tableName, "name")
	_gameRoom.MaxPlayers = field.NewInt32(tableName, "max_players")
	_gameRoom.CurrentPlayers = field.NewInt32(tableName, "current_players")
	_gameRoom.Status = field.NewInt32(tableName, "status")
	_gameRoom.CreatedBy = field.NewString(tableName, "created_by")
	_gameRoom.CreatedAt = field.NewTime(tableName, "created_at")

	_gameRoom.fillFieldMap()

	return _gameRoom
}

type gameRoom struct {
	gameRoomDo

	ALL            field.Asterisk
	ID             field.String
	Type           field.String
	Name           field.String
	MaxPlayers     field.Int32
	CurrentPlayers field.Int32
	Status         field.Int32
	CreatedBy      field.String
	CreatedAt      field.Time

	fieldMap map[string]field.Expr
}

func (g gameRoom) Table(newTableName string) *gameRoom {
	g.gameRoomDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameRoom) As(alias string) *gameRoom {
	g.gameRoomDo.DO = *(g.gameRoomDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameRoom) updateTableName(table string) *gameRoom {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewString(table, "id")
	g.Type = field.NewString(table, "type")
	g.Name = field.NewString(table, "name")
	g.MaxPlayers = field.NewInt32(table, "max_players")
	g.CurrentPlayers = field.NewInt32(table, "current_players")
	g.Status = field.NewInt32(table, "status")
	g.CreatedBy = field.NewString(table, "created_by")
	g.CreatedAt = field.NewTime(table, "created_at")

	g.fillFieldMap()

	return g
}

func (g *gameRoom) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameRoom) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["id"] = g.ID
	g.fieldMap["type"] = g.Type
	g.fieldMap["name"] = g.Name
	g.fieldMap["max_players"] = g.MaxPlayers
	g.fieldMap["current_players"] = g.CurrentPlayers
	g.fieldMap["status"] = g.Status
	g.fieldMap["created_by"] = g.CreatedBy
	g.fieldMap["created_at"] = g.CreatedAt
}

func (g gameRoom) clone(db *gorm.DB) gameRoom {
	g.gameRoomDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameRoom) replaceDB(db *gorm.DB) gameRoom {
	g.gameRoomDo.ReplaceDB(db)
	return g
}

type gameRoomDo struct{ gen.DO }

type IGameRoomDo interface {
	gen.SubQuery
	Debug() IGameRoomDo
	WithContext(ctx context.Context) IGameRoomDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGameRoomDo
	WriteDB() IGameRoomDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGameRoomDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGameRoomDo
	Not(conds ...gen.Condition) IGameRoomDo
	Or(conds ...gen.Condition) IGameRoomDo
	Select(conds ...field.Expr) IGameRoomDo
	Where(conds ...gen.Condition) IGameRoomDo
	Order(conds ...field.Expr) IGameRoomDo
	Distinct(cols ...field.Expr) IGameRoomDo
	Omit(cols ...field.Expr) IGameRoomDo
	Join(table schema.Tabler, on ...field.Expr) IGameRoomDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGameRoomDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGameRoomDo
	Group(cols ...field.Expr) IGameRoomDo
	Having(conds ...gen.Condition) IGameRoomDo
	Limit(limit int) IGameRoomDo
	Offset(offset int) IGameRoomDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGameRoomDo
	Unscoped() IGameRoomDo
	Create(values ...*model.GameRoom) error
	CreateInBatches(values []*model.GameRoom, batchSize int) error
	Save(values ...*model.GameRoom) error
	First() (*model.GameRoom, error)
	Take() (*model.GameRoom, error)
	Last() (*model.GameRoom, error)
	Find() ([]*model.GameRoom, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameRoom, err error)
	FindInBatches(result *[]*model.GameRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GameRoom) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGameRoomDo
	Assign(attrs ...field.AssignExpr) IGameRoomDo
	Joins(fields ...field.RelationField) IGameRoomDo
	Preload(fields ...field.RelationField) IGameRoomDo
	FirstOrInit() (*model.GameRoom, error)
	FirstOrCreate() (*model.GameRoom, error)
	FindByPage(offset int, limit int) (result []*model.GameRoom, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGameRoomDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gameRoomDo) Debug() IGameRoomDo {
	return g.withDO(g.DO.Debug())
}

func (g gameRoomDo) WithContext(ctx context.Context) IGameRoomDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameRoomDo) ReadDB() IGameRoomDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameRoomDo) WriteDB() IGameRoomDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameRoomDo) Session(config *gorm.Session) IGameRoomDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameRoomDo) Clauses(conds ...clause.Expression) IGameRoomDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameRoomDo) Returning(value interface{}, columns ...string) IGameRoomDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameRoomDo) Not(conds ...gen.Condition) IGameRoomDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameRoomDo) Or(conds ...gen.Condition) IGameRoomDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameRoomDo) Select(conds ...field.Expr) IGameRoomDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameRoomDo) Where(conds ...gen.Condition) IGameRoomDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameRoomDo) Order(conds ...field.Expr) IGameRoomDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameRoomDo) Distinct(cols ...field.Expr) IGameRoomDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameRoomDo) Omit(cols ...field.Expr) IGameRoomDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameRoomDo) Join(table schema.Tabler, on ...field.Expr) IGameRoomDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameRoomDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGameRoomDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameRoomDo) RightJoin(table schema.Tabler, on ...field.Expr) IGameRoomDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameRoomDo) Group(cols ...field.Expr) IGameRoomDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameRoomDo) Having(conds ...gen.Condition) IGameRoomDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameRoomDo) Limit(limit int) IGameRoomDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameRoomDo) Offset(offset int) IGameRoomDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameRoomDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGameRoomDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameRoomDo) Unscoped() IGameRoomDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameRoomDo) Create(values ...*model.GameRoom) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameRoomDo) CreateInBatches(values []*model.GameRoom, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameRoomDo) Save(values ...*model.GameRoom) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameRoomDo) First() (*model.GameRoom, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameRoom), nil
	}
}

func (g gameRoomDo) Take() (*model.GameRoom, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameRoom), nil
	}
}

func (g gameRoomDo) Last() (*model.GameRoom, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameRoom), nil
	}
}

func (g gameRoomDo) Find() ([]*model.GameRoom, error) {
	result, err := g.DO.Find()
	return result.([]*model.GameRoom), err
}

func (g gameRoomDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameRoom, err error) {
	buf := make([]*model.GameRoom, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameRoomDo) FindInBatches(result *[]*model.GameRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameRoomDo) Attrs(attrs ...field.AssignExpr) IGameRoomDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameRoomDo) Assign(attrs ...field.AssignExpr) IGameRoomDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameRoomDo) Joins(fields ...field.RelationField) IGameRoomDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameRoomDo) Preload(fields ...field.RelationField) IGameRoomDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameRoomDo) FirstOrInit() (*model.GameRoom, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameRoom), nil
	}
}

func (g gameRoomDo) FirstOrCreate() (*model.GameRoom, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameRoom), nil
	}
}

func (g gameRoomDo) FindByPage(offset int, limit int) (result []*model.GameRoom, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameRoomDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameRoomDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameRoomDo) Delete(models ...*model.GameRoom) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameRoomDo) withDO(do gen.Dao) *gameRoomDo {
	g.DO = *do.(*gen.DO)
	return g
}
