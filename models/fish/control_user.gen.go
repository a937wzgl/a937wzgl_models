// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fish

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newControlUser(db *gorm.DB, opts ...gen.DOOption) controlUser {
	_controlUser := controlUser{}

	_controlUser.controlUserDo.UseDB(db, opts...)
	_controlUser.controlUserDo.UseModel(&model.ControlUser{})

	tableName := _controlUser.controlUserDo.TableName()
	_controlUser.ALL = field.NewAsterisk(tableName)
	_controlUser.UID = field.NewInt32(tableName, "uid")
	_controlUser.Chance = field.NewFloat64(tableName, "chance")

	_controlUser.fillFieldMap()

	return _controlUser
}

type controlUser struct {
	controlUserDo

	ALL    field.Asterisk
	UID    field.Int32
	Chance field.Float64

	fieldMap map[string]field.Expr
}

func (c controlUser) Table(newTableName string) *controlUser {
	c.controlUserDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c controlUser) As(alias string) *controlUser {
	c.controlUserDo.DO = *(c.controlUserDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *controlUser) updateTableName(table string) *controlUser {
	c.ALL = field.NewAsterisk(table)
	c.UID = field.NewInt32(table, "uid")
	c.Chance = field.NewFloat64(table, "chance")

	c.fillFieldMap()

	return c
}

func (c *controlUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *controlUser) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 2)
	c.fieldMap["uid"] = c.UID
	c.fieldMap["chance"] = c.Chance
}

func (c controlUser) clone(db *gorm.DB) controlUser {
	c.controlUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c controlUser) replaceDB(db *gorm.DB) controlUser {
	c.controlUserDo.ReplaceDB(db)
	return c
}

type controlUserDo struct{ gen.DO }

type IControlUserDo interface {
	gen.SubQuery
	Debug() IControlUserDo
	WithContext(ctx context.Context) IControlUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IControlUserDo
	WriteDB() IControlUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IControlUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IControlUserDo
	Not(conds ...gen.Condition) IControlUserDo
	Or(conds ...gen.Condition) IControlUserDo
	Select(conds ...field.Expr) IControlUserDo
	Where(conds ...gen.Condition) IControlUserDo
	Order(conds ...field.Expr) IControlUserDo
	Distinct(cols ...field.Expr) IControlUserDo
	Omit(cols ...field.Expr) IControlUserDo
	Join(table schema.Tabler, on ...field.Expr) IControlUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IControlUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IControlUserDo
	Group(cols ...field.Expr) IControlUserDo
	Having(conds ...gen.Condition) IControlUserDo
	Limit(limit int) IControlUserDo
	Offset(offset int) IControlUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IControlUserDo
	Unscoped() IControlUserDo
	Create(values ...*model.ControlUser) error
	CreateInBatches(values []*model.ControlUser, batchSize int) error
	Save(values ...*model.ControlUser) error
	First() (*model.ControlUser, error)
	Take() (*model.ControlUser, error)
	Last() (*model.ControlUser, error)
	Find() ([]*model.ControlUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ControlUser, err error)
	FindInBatches(result *[]*model.ControlUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ControlUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IControlUserDo
	Assign(attrs ...field.AssignExpr) IControlUserDo
	Joins(fields ...field.RelationField) IControlUserDo
	Preload(fields ...field.RelationField) IControlUserDo
	FirstOrInit() (*model.ControlUser, error)
	FirstOrCreate() (*model.ControlUser, error)
	FindByPage(offset int, limit int) (result []*model.ControlUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IControlUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c controlUserDo) Debug() IControlUserDo {
	return c.withDO(c.DO.Debug())
}

func (c controlUserDo) WithContext(ctx context.Context) IControlUserDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c controlUserDo) ReadDB() IControlUserDo {
	return c.Clauses(dbresolver.Read)
}

func (c controlUserDo) WriteDB() IControlUserDo {
	return c.Clauses(dbresolver.Write)
}

func (c controlUserDo) Session(config *gorm.Session) IControlUserDo {
	return c.withDO(c.DO.Session(config))
}

func (c controlUserDo) Clauses(conds ...clause.Expression) IControlUserDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c controlUserDo) Returning(value interface{}, columns ...string) IControlUserDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c controlUserDo) Not(conds ...gen.Condition) IControlUserDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c controlUserDo) Or(conds ...gen.Condition) IControlUserDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c controlUserDo) Select(conds ...field.Expr) IControlUserDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c controlUserDo) Where(conds ...gen.Condition) IControlUserDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c controlUserDo) Order(conds ...field.Expr) IControlUserDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c controlUserDo) Distinct(cols ...field.Expr) IControlUserDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c controlUserDo) Omit(cols ...field.Expr) IControlUserDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c controlUserDo) Join(table schema.Tabler, on ...field.Expr) IControlUserDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c controlUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IControlUserDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c controlUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IControlUserDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c controlUserDo) Group(cols ...field.Expr) IControlUserDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c controlUserDo) Having(conds ...gen.Condition) IControlUserDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c controlUserDo) Limit(limit int) IControlUserDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c controlUserDo) Offset(offset int) IControlUserDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c controlUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IControlUserDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c controlUserDo) Unscoped() IControlUserDo {
	return c.withDO(c.DO.Unscoped())
}

func (c controlUserDo) Create(values ...*model.ControlUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c controlUserDo) CreateInBatches(values []*model.ControlUser, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c controlUserDo) Save(values ...*model.ControlUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c controlUserDo) First() (*model.ControlUser, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ControlUser), nil
	}
}

func (c controlUserDo) Take() (*model.ControlUser, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ControlUser), nil
	}
}

func (c controlUserDo) Last() (*model.ControlUser, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ControlUser), nil
	}
}

func (c controlUserDo) Find() ([]*model.ControlUser, error) {
	result, err := c.DO.Find()
	return result.([]*model.ControlUser), err
}

func (c controlUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ControlUser, err error) {
	buf := make([]*model.ControlUser, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c controlUserDo) FindInBatches(result *[]*model.ControlUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c controlUserDo) Attrs(attrs ...field.AssignExpr) IControlUserDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c controlUserDo) Assign(attrs ...field.AssignExpr) IControlUserDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c controlUserDo) Joins(fields ...field.RelationField) IControlUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c controlUserDo) Preload(fields ...field.RelationField) IControlUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c controlUserDo) FirstOrInit() (*model.ControlUser, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ControlUser), nil
	}
}

func (c controlUserDo) FirstOrCreate() (*model.ControlUser, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ControlUser), nil
	}
}

func (c controlUserDo) FindByPage(offset int, limit int) (result []*model.ControlUser, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c controlUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c controlUserDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c controlUserDo) Delete(models ...*model.ControlUser) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *controlUserDo) withDO(do gen.Dao) *controlUserDo {
	c.DO = *do.(*gen.DO)
	return c
}
