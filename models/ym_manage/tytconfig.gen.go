// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newTytconfig(db *gorm.DB, opts ...gen.DOOption) tytconfig {
	_tytconfig := tytconfig{}

	_tytconfig.tytconfigDo.UseDB(db, opts...)
	_tytconfig.tytconfigDo.UseModel(&model.Tytconfig{})

	tableName := _tytconfig.tytconfigDo.TableName()
	_tytconfig.ALL = field.NewAsterisk(tableName)
	_tytconfig.ID = field.NewUint32(tableName, "id")
	_tytconfig.Flag = field.NewString(tableName, "flag")
	_tytconfig.Value = field.NewString(tableName, "value")

	_tytconfig.fillFieldMap()

	return _tytconfig
}

type tytconfig struct {
	tytconfigDo

	ALL   field.Asterisk
	ID    field.Uint32
	Flag  field.String
	Value field.String

	fieldMap map[string]field.Expr
}

func (t tytconfig) Table(newTableName string) *tytconfig {
	t.tytconfigDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tytconfig) As(alias string) *tytconfig {
	t.tytconfigDo.DO = *(t.tytconfigDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tytconfig) updateTableName(table string) *tytconfig {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint32(table, "id")
	t.Flag = field.NewString(table, "flag")
	t.Value = field.NewString(table, "value")

	t.fillFieldMap()

	return t
}

func (t *tytconfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tytconfig) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["flag"] = t.Flag
	t.fieldMap["value"] = t.Value
}

func (t tytconfig) clone(db *gorm.DB) tytconfig {
	t.tytconfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tytconfig) replaceDB(db *gorm.DB) tytconfig {
	t.tytconfigDo.ReplaceDB(db)
	return t
}

type tytconfigDo struct{ gen.DO }

type ITytconfigDo interface {
	gen.SubQuery
	Debug() ITytconfigDo
	WithContext(ctx context.Context) ITytconfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITytconfigDo
	WriteDB() ITytconfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITytconfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITytconfigDo
	Not(conds ...gen.Condition) ITytconfigDo
	Or(conds ...gen.Condition) ITytconfigDo
	Select(conds ...field.Expr) ITytconfigDo
	Where(conds ...gen.Condition) ITytconfigDo
	Order(conds ...field.Expr) ITytconfigDo
	Distinct(cols ...field.Expr) ITytconfigDo
	Omit(cols ...field.Expr) ITytconfigDo
	Join(table schema.Tabler, on ...field.Expr) ITytconfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITytconfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITytconfigDo
	Group(cols ...field.Expr) ITytconfigDo
	Having(conds ...gen.Condition) ITytconfigDo
	Limit(limit int) ITytconfigDo
	Offset(offset int) ITytconfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITytconfigDo
	Unscoped() ITytconfigDo
	Create(values ...*model.Tytconfig) error
	CreateInBatches(values []*model.Tytconfig, batchSize int) error
	Save(values ...*model.Tytconfig) error
	First() (*model.Tytconfig, error)
	Take() (*model.Tytconfig, error)
	Last() (*model.Tytconfig, error)
	Find() ([]*model.Tytconfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Tytconfig, err error)
	FindInBatches(result *[]*model.Tytconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Tytconfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITytconfigDo
	Assign(attrs ...field.AssignExpr) ITytconfigDo
	Joins(fields ...field.RelationField) ITytconfigDo
	Preload(fields ...field.RelationField) ITytconfigDo
	FirstOrInit() (*model.Tytconfig, error)
	FirstOrCreate() (*model.Tytconfig, error)
	FindByPage(offset int, limit int) (result []*model.Tytconfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITytconfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tytconfigDo) Debug() ITytconfigDo {
	return t.withDO(t.DO.Debug())
}

func (t tytconfigDo) WithContext(ctx context.Context) ITytconfigDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tytconfigDo) ReadDB() ITytconfigDo {
	return t.Clauses(dbresolver.Read)
}

func (t tytconfigDo) WriteDB() ITytconfigDo {
	return t.Clauses(dbresolver.Write)
}

func (t tytconfigDo) Session(config *gorm.Session) ITytconfigDo {
	return t.withDO(t.DO.Session(config))
}

func (t tytconfigDo) Clauses(conds ...clause.Expression) ITytconfigDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tytconfigDo) Returning(value interface{}, columns ...string) ITytconfigDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tytconfigDo) Not(conds ...gen.Condition) ITytconfigDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tytconfigDo) Or(conds ...gen.Condition) ITytconfigDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tytconfigDo) Select(conds ...field.Expr) ITytconfigDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tytconfigDo) Where(conds ...gen.Condition) ITytconfigDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tytconfigDo) Order(conds ...field.Expr) ITytconfigDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tytconfigDo) Distinct(cols ...field.Expr) ITytconfigDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tytconfigDo) Omit(cols ...field.Expr) ITytconfigDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tytconfigDo) Join(table schema.Tabler, on ...field.Expr) ITytconfigDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tytconfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITytconfigDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tytconfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ITytconfigDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tytconfigDo) Group(cols ...field.Expr) ITytconfigDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tytconfigDo) Having(conds ...gen.Condition) ITytconfigDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tytconfigDo) Limit(limit int) ITytconfigDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tytconfigDo) Offset(offset int) ITytconfigDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tytconfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITytconfigDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tytconfigDo) Unscoped() ITytconfigDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tytconfigDo) Create(values ...*model.Tytconfig) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tytconfigDo) CreateInBatches(values []*model.Tytconfig, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tytconfigDo) Save(values ...*model.Tytconfig) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tytconfigDo) First() (*model.Tytconfig, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tytconfig), nil
	}
}

func (t tytconfigDo) Take() (*model.Tytconfig, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tytconfig), nil
	}
}

func (t tytconfigDo) Last() (*model.Tytconfig, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tytconfig), nil
	}
}

func (t tytconfigDo) Find() ([]*model.Tytconfig, error) {
	result, err := t.DO.Find()
	return result.([]*model.Tytconfig), err
}

func (t tytconfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Tytconfig, err error) {
	buf := make([]*model.Tytconfig, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tytconfigDo) FindInBatches(result *[]*model.Tytconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tytconfigDo) Attrs(attrs ...field.AssignExpr) ITytconfigDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tytconfigDo) Assign(attrs ...field.AssignExpr) ITytconfigDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tytconfigDo) Joins(fields ...field.RelationField) ITytconfigDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tytconfigDo) Preload(fields ...field.RelationField) ITytconfigDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tytconfigDo) FirstOrInit() (*model.Tytconfig, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tytconfig), nil
	}
}

func (t tytconfigDo) FirstOrCreate() (*model.Tytconfig, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tytconfig), nil
	}
}

func (t tytconfigDo) FindByPage(offset int, limit int) (result []*model.Tytconfig, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tytconfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tytconfigDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tytconfigDo) Delete(models ...*model.Tytconfig) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tytconfigDo) withDO(do gen.Dao) *tytconfigDo {
	t.DO = *do.(*gen.DO)
	return t
}
