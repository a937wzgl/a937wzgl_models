// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package game

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newTUseMoneyLog(db *gorm.DB, opts ...gen.DOOption) tUseMoneyLog {
	_tUseMoneyLog := tUseMoneyLog{}

	_tUseMoneyLog.tUseMoneyLogDo.UseDB(db, opts...)
	_tUseMoneyLog.tUseMoneyLogDo.UseModel(&model.TUseMoneyLog{})

	tableName := _tUseMoneyLog.tUseMoneyLogDo.TableName()
	_tUseMoneyLog.ALL = field.NewAsterisk(tableName)
	_tUseMoneyLog.ID = field.NewUint32(tableName, "id")
	_tUseMoneyLog.Userid = field.NewString(tableName, "userid")
	_tUseMoneyLog.Money = field.NewInt32(tableName, "money")
	_tUseMoneyLog.Type = field.NewString(tableName, "type")
	_tUseMoneyLog.CreateTime = field.NewInt32(tableName, "create_time")
	_tUseMoneyLog.Op = field.NewString(tableName, "op")

	_tUseMoneyLog.fillFieldMap()

	return _tUseMoneyLog
}

type tUseMoneyLog struct {
	tUseMoneyLogDo

	ALL        field.Asterisk
	ID         field.Uint32
	Userid     field.String // 用户ID
	Money      field.Int32  // 消费金额
	Type       field.String // 消费类型
	CreateTime field.Int32  // 创建时间
	Op         field.String // 游戏类型

	fieldMap map[string]field.Expr
}

func (t tUseMoneyLog) Table(newTableName string) *tUseMoneyLog {
	t.tUseMoneyLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tUseMoneyLog) As(alias string) *tUseMoneyLog {
	t.tUseMoneyLogDo.DO = *(t.tUseMoneyLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tUseMoneyLog) updateTableName(table string) *tUseMoneyLog {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint32(table, "id")
	t.Userid = field.NewString(table, "userid")
	t.Money = field.NewInt32(table, "money")
	t.Type = field.NewString(table, "type")
	t.CreateTime = field.NewInt32(table, "create_time")
	t.Op = field.NewString(table, "op")

	t.fillFieldMap()

	return t
}

func (t *tUseMoneyLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tUseMoneyLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["userid"] = t.Userid
	t.fieldMap["money"] = t.Money
	t.fieldMap["type"] = t.Type
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["op"] = t.Op
}

func (t tUseMoneyLog) clone(db *gorm.DB) tUseMoneyLog {
	t.tUseMoneyLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tUseMoneyLog) replaceDB(db *gorm.DB) tUseMoneyLog {
	t.tUseMoneyLogDo.ReplaceDB(db)
	return t
}

type tUseMoneyLogDo struct{ gen.DO }

type ITUseMoneyLogDo interface {
	gen.SubQuery
	Debug() ITUseMoneyLogDo
	WithContext(ctx context.Context) ITUseMoneyLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITUseMoneyLogDo
	WriteDB() ITUseMoneyLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITUseMoneyLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITUseMoneyLogDo
	Not(conds ...gen.Condition) ITUseMoneyLogDo
	Or(conds ...gen.Condition) ITUseMoneyLogDo
	Select(conds ...field.Expr) ITUseMoneyLogDo
	Where(conds ...gen.Condition) ITUseMoneyLogDo
	Order(conds ...field.Expr) ITUseMoneyLogDo
	Distinct(cols ...field.Expr) ITUseMoneyLogDo
	Omit(cols ...field.Expr) ITUseMoneyLogDo
	Join(table schema.Tabler, on ...field.Expr) ITUseMoneyLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITUseMoneyLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITUseMoneyLogDo
	Group(cols ...field.Expr) ITUseMoneyLogDo
	Having(conds ...gen.Condition) ITUseMoneyLogDo
	Limit(limit int) ITUseMoneyLogDo
	Offset(offset int) ITUseMoneyLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITUseMoneyLogDo
	Unscoped() ITUseMoneyLogDo
	Create(values ...*model.TUseMoneyLog) error
	CreateInBatches(values []*model.TUseMoneyLog, batchSize int) error
	Save(values ...*model.TUseMoneyLog) error
	First() (*model.TUseMoneyLog, error)
	Take() (*model.TUseMoneyLog, error)
	Last() (*model.TUseMoneyLog, error)
	Find() ([]*model.TUseMoneyLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUseMoneyLog, err error)
	FindInBatches(result *[]*model.TUseMoneyLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TUseMoneyLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITUseMoneyLogDo
	Assign(attrs ...field.AssignExpr) ITUseMoneyLogDo
	Joins(fields ...field.RelationField) ITUseMoneyLogDo
	Preload(fields ...field.RelationField) ITUseMoneyLogDo
	FirstOrInit() (*model.TUseMoneyLog, error)
	FirstOrCreate() (*model.TUseMoneyLog, error)
	FindByPage(offset int, limit int) (result []*model.TUseMoneyLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITUseMoneyLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tUseMoneyLogDo) Debug() ITUseMoneyLogDo {
	return t.withDO(t.DO.Debug())
}

func (t tUseMoneyLogDo) WithContext(ctx context.Context) ITUseMoneyLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tUseMoneyLogDo) ReadDB() ITUseMoneyLogDo {
	return t.Clauses(dbresolver.Read)
}

func (t tUseMoneyLogDo) WriteDB() ITUseMoneyLogDo {
	return t.Clauses(dbresolver.Write)
}

func (t tUseMoneyLogDo) Session(config *gorm.Session) ITUseMoneyLogDo {
	return t.withDO(t.DO.Session(config))
}

func (t tUseMoneyLogDo) Clauses(conds ...clause.Expression) ITUseMoneyLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tUseMoneyLogDo) Returning(value interface{}, columns ...string) ITUseMoneyLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tUseMoneyLogDo) Not(conds ...gen.Condition) ITUseMoneyLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tUseMoneyLogDo) Or(conds ...gen.Condition) ITUseMoneyLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tUseMoneyLogDo) Select(conds ...field.Expr) ITUseMoneyLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tUseMoneyLogDo) Where(conds ...gen.Condition) ITUseMoneyLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tUseMoneyLogDo) Order(conds ...field.Expr) ITUseMoneyLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tUseMoneyLogDo) Distinct(cols ...field.Expr) ITUseMoneyLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tUseMoneyLogDo) Omit(cols ...field.Expr) ITUseMoneyLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tUseMoneyLogDo) Join(table schema.Tabler, on ...field.Expr) ITUseMoneyLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tUseMoneyLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITUseMoneyLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tUseMoneyLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ITUseMoneyLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tUseMoneyLogDo) Group(cols ...field.Expr) ITUseMoneyLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tUseMoneyLogDo) Having(conds ...gen.Condition) ITUseMoneyLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tUseMoneyLogDo) Limit(limit int) ITUseMoneyLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tUseMoneyLogDo) Offset(offset int) ITUseMoneyLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tUseMoneyLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITUseMoneyLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tUseMoneyLogDo) Unscoped() ITUseMoneyLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tUseMoneyLogDo) Create(values ...*model.TUseMoneyLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tUseMoneyLogDo) CreateInBatches(values []*model.TUseMoneyLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tUseMoneyLogDo) Save(values ...*model.TUseMoneyLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tUseMoneyLogDo) First() (*model.TUseMoneyLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUseMoneyLog), nil
	}
}

func (t tUseMoneyLogDo) Take() (*model.TUseMoneyLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUseMoneyLog), nil
	}
}

func (t tUseMoneyLogDo) Last() (*model.TUseMoneyLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUseMoneyLog), nil
	}
}

func (t tUseMoneyLogDo) Find() ([]*model.TUseMoneyLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TUseMoneyLog), err
}

func (t tUseMoneyLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUseMoneyLog, err error) {
	buf := make([]*model.TUseMoneyLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tUseMoneyLogDo) FindInBatches(result *[]*model.TUseMoneyLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tUseMoneyLogDo) Attrs(attrs ...field.AssignExpr) ITUseMoneyLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tUseMoneyLogDo) Assign(attrs ...field.AssignExpr) ITUseMoneyLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tUseMoneyLogDo) Joins(fields ...field.RelationField) ITUseMoneyLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tUseMoneyLogDo) Preload(fields ...field.RelationField) ITUseMoneyLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tUseMoneyLogDo) FirstOrInit() (*model.TUseMoneyLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUseMoneyLog), nil
	}
}

func (t tUseMoneyLogDo) FirstOrCreate() (*model.TUseMoneyLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUseMoneyLog), nil
	}
}

func (t tUseMoneyLogDo) FindByPage(offset int, limit int) (result []*model.TUseMoneyLog, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tUseMoneyLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tUseMoneyLogDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tUseMoneyLogDo) Delete(models ...*model.TUseMoneyLog) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tUseMoneyLogDo) withDO(do gen.Dao) *tUseMoneyLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
