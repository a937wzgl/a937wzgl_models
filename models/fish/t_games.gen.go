// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fish

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newTGame(db *gorm.DB, opts ...gen.DOOption) tGame {
	_tGame := tGame{}

	_tGame.tGameDo.UseDB(db, opts...)
	_tGame.tGameDo.UseModel(&model.TGame{})

	tableName := _tGame.tGameDo.TableName()
	_tGame.ALL = field.NewAsterisk(tableName)
	_tGame.RoomUUID = field.NewString(tableName, "room_uuid")
	_tGame.GameIndex = field.NewInt32(tableName, "game_index")
	_tGame.BaseInfo = field.NewString(tableName, "base_info")
	_tGame.CreateTime = field.NewInt32(tableName, "create_time")
	_tGame.Snapshots = field.NewString(tableName, "snapshots")
	_tGame.ActionRecords = field.NewString(tableName, "action_records")
	_tGame.Result = field.NewString(tableName, "result")

	_tGame.fillFieldMap()

	return _tGame
}

type tGame struct {
	tGameDo

	ALL           field.Asterisk
	RoomUUID      field.String
	GameIndex     field.Int32
	BaseInfo      field.String
	CreateTime    field.Int32
	Snapshots     field.String
	ActionRecords field.String
	Result        field.String

	fieldMap map[string]field.Expr
}

func (t tGame) Table(newTableName string) *tGame {
	t.tGameDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tGame) As(alias string) *tGame {
	t.tGameDo.DO = *(t.tGameDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tGame) updateTableName(table string) *tGame {
	t.ALL = field.NewAsterisk(table)
	t.RoomUUID = field.NewString(table, "room_uuid")
	t.GameIndex = field.NewInt32(table, "game_index")
	t.BaseInfo = field.NewString(table, "base_info")
	t.CreateTime = field.NewInt32(table, "create_time")
	t.Snapshots = field.NewString(table, "snapshots")
	t.ActionRecords = field.NewString(table, "action_records")
	t.Result = field.NewString(table, "result")

	t.fillFieldMap()

	return t
}

func (t *tGame) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tGame) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["room_uuid"] = t.RoomUUID
	t.fieldMap["game_index"] = t.GameIndex
	t.fieldMap["base_info"] = t.BaseInfo
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["snapshots"] = t.Snapshots
	t.fieldMap["action_records"] = t.ActionRecords
	t.fieldMap["result"] = t.Result
}

func (t tGame) clone(db *gorm.DB) tGame {
	t.tGameDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tGame) replaceDB(db *gorm.DB) tGame {
	t.tGameDo.ReplaceDB(db)
	return t
}

type tGameDo struct{ gen.DO }

type ITGameDo interface {
	gen.SubQuery
	Debug() ITGameDo
	WithContext(ctx context.Context) ITGameDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITGameDo
	WriteDB() ITGameDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITGameDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITGameDo
	Not(conds ...gen.Condition) ITGameDo
	Or(conds ...gen.Condition) ITGameDo
	Select(conds ...field.Expr) ITGameDo
	Where(conds ...gen.Condition) ITGameDo
	Order(conds ...field.Expr) ITGameDo
	Distinct(cols ...field.Expr) ITGameDo
	Omit(cols ...field.Expr) ITGameDo
	Join(table schema.Tabler, on ...field.Expr) ITGameDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITGameDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITGameDo
	Group(cols ...field.Expr) ITGameDo
	Having(conds ...gen.Condition) ITGameDo
	Limit(limit int) ITGameDo
	Offset(offset int) ITGameDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITGameDo
	Unscoped() ITGameDo
	Create(values ...*model.TGame) error
	CreateInBatches(values []*model.TGame, batchSize int) error
	Save(values ...*model.TGame) error
	First() (*model.TGame, error)
	Take() (*model.TGame, error)
	Last() (*model.TGame, error)
	Find() ([]*model.TGame, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TGame, err error)
	FindInBatches(result *[]*model.TGame, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TGame) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITGameDo
	Assign(attrs ...field.AssignExpr) ITGameDo
	Joins(fields ...field.RelationField) ITGameDo
	Preload(fields ...field.RelationField) ITGameDo
	FirstOrInit() (*model.TGame, error)
	FirstOrCreate() (*model.TGame, error)
	FindByPage(offset int, limit int) (result []*model.TGame, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITGameDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tGameDo) Debug() ITGameDo {
	return t.withDO(t.DO.Debug())
}

func (t tGameDo) WithContext(ctx context.Context) ITGameDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tGameDo) ReadDB() ITGameDo {
	return t.Clauses(dbresolver.Read)
}

func (t tGameDo) WriteDB() ITGameDo {
	return t.Clauses(dbresolver.Write)
}

func (t tGameDo) Session(config *gorm.Session) ITGameDo {
	return t.withDO(t.DO.Session(config))
}

func (t tGameDo) Clauses(conds ...clause.Expression) ITGameDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tGameDo) Returning(value interface{}, columns ...string) ITGameDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tGameDo) Not(conds ...gen.Condition) ITGameDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tGameDo) Or(conds ...gen.Condition) ITGameDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tGameDo) Select(conds ...field.Expr) ITGameDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tGameDo) Where(conds ...gen.Condition) ITGameDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tGameDo) Order(conds ...field.Expr) ITGameDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tGameDo) Distinct(cols ...field.Expr) ITGameDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tGameDo) Omit(cols ...field.Expr) ITGameDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tGameDo) Join(table schema.Tabler, on ...field.Expr) ITGameDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tGameDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITGameDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tGameDo) RightJoin(table schema.Tabler, on ...field.Expr) ITGameDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tGameDo) Group(cols ...field.Expr) ITGameDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tGameDo) Having(conds ...gen.Condition) ITGameDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tGameDo) Limit(limit int) ITGameDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tGameDo) Offset(offset int) ITGameDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tGameDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITGameDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tGameDo) Unscoped() ITGameDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tGameDo) Create(values ...*model.TGame) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tGameDo) CreateInBatches(values []*model.TGame, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tGameDo) Save(values ...*model.TGame) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tGameDo) First() (*model.TGame, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGame), nil
	}
}

func (t tGameDo) Take() (*model.TGame, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGame), nil
	}
}

func (t tGameDo) Last() (*model.TGame, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGame), nil
	}
}

func (t tGameDo) Find() ([]*model.TGame, error) {
	result, err := t.DO.Find()
	return result.([]*model.TGame), err
}

func (t tGameDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TGame, err error) {
	buf := make([]*model.TGame, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tGameDo) FindInBatches(result *[]*model.TGame, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tGameDo) Attrs(attrs ...field.AssignExpr) ITGameDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tGameDo) Assign(attrs ...field.AssignExpr) ITGameDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tGameDo) Joins(fields ...field.RelationField) ITGameDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tGameDo) Preload(fields ...field.RelationField) ITGameDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tGameDo) FirstOrInit() (*model.TGame, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGame), nil
	}
}

func (t tGameDo) FirstOrCreate() (*model.TGame, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGame), nil
	}
}

func (t tGameDo) FindByPage(offset int, limit int) (result []*model.TGame, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tGameDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tGameDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tGameDo) Delete(models ...*model.TGame) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tGameDo) withDO(do gen.Dao) *tGameDo {
	t.DO = *do.(*gen.DO)
	return t
}
