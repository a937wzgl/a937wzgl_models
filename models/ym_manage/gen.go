// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                 = new(Query)
	Admin             *admin
	Agentinfo         *agentinfo
	Config            *config
	Fanyong           *fanyong
	FanyongLog        *fanyongLog
	FanyongXflog      *fanyongXflog
	Fkrechargelog     *fkrechargelog
	Game              *game
	GameBak           *gameBak
	GameBak1          *gameBak1
	GameGonggao       *gameGonggao
	GameOnlinenum     *gameOnlinenum
	KefuHuifu         *kefuHuifu
	KefuList          *kefuList
	KefuMsg           *kefuMsg
	KefuUsergl        *kefuUsergl
	Kucunlog          *kucunlog
	NewsCategory      *newsCategory
	NewsList          *newsList
	Paylog            *paylog
	Rechargelog       *rechargelog
	RechargelogAgent  *rechargelogAgent
	RechargelogKefu   *rechargelogKefu
	RechargelogKefuZy *rechargelogKefuZy
	RechargelogUser   *rechargelogUser
	RechargelogVideo  *rechargelogVideo
	Tytconfig         *tytconfig
	Uidglaid          *uidglaid
	User              *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Admin = &Q.Admin
	Agentinfo = &Q.Agentinfo
	Config = &Q.Config
	Fanyong = &Q.Fanyong
	FanyongLog = &Q.FanyongLog
	FanyongXflog = &Q.FanyongXflog
	Fkrechargelog = &Q.Fkrechargelog
	Game = &Q.Game
	GameBak = &Q.GameBak
	GameBak1 = &Q.GameBak1
	GameGonggao = &Q.GameGonggao
	GameOnlinenum = &Q.GameOnlinenum
	KefuHuifu = &Q.KefuHuifu
	KefuList = &Q.KefuList
	KefuMsg = &Q.KefuMsg
	KefuUsergl = &Q.KefuUsergl
	Kucunlog = &Q.Kucunlog
	NewsCategory = &Q.NewsCategory
	NewsList = &Q.NewsList
	Paylog = &Q.Paylog
	Rechargelog = &Q.Rechargelog
	RechargelogAgent = &Q.RechargelogAgent
	RechargelogKefu = &Q.RechargelogKefu
	RechargelogKefuZy = &Q.RechargelogKefuZy
	RechargelogUser = &Q.RechargelogUser
	RechargelogVideo = &Q.RechargelogVideo
	Tytconfig = &Q.Tytconfig
	Uidglaid = &Q.Uidglaid
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                db,
		Admin:             newAdmin(db, opts...),
		Agentinfo:         newAgentinfo(db, opts...),
		Config:            newConfig(db, opts...),
		Fanyong:           newFanyong(db, opts...),
		FanyongLog:        newFanyongLog(db, opts...),
		FanyongXflog:      newFanyongXflog(db, opts...),
		Fkrechargelog:     newFkrechargelog(db, opts...),
		Game:              newGame(db, opts...),
		GameBak:           newGameBak(db, opts...),
		GameBak1:          newGameBak1(db, opts...),
		GameGonggao:       newGameGonggao(db, opts...),
		GameOnlinenum:     newGameOnlinenum(db, opts...),
		KefuHuifu:         newKefuHuifu(db, opts...),
		KefuList:          newKefuList(db, opts...),
		KefuMsg:           newKefuMsg(db, opts...),
		KefuUsergl:        newKefuUsergl(db, opts...),
		Kucunlog:          newKucunlog(db, opts...),
		NewsCategory:      newNewsCategory(db, opts...),
		NewsList:          newNewsList(db, opts...),
		Paylog:            newPaylog(db, opts...),
		Rechargelog:       newRechargelog(db, opts...),
		RechargelogAgent:  newRechargelogAgent(db, opts...),
		RechargelogKefu:   newRechargelogKefu(db, opts...),
		RechargelogKefuZy: newRechargelogKefuZy(db, opts...),
		RechargelogUser:   newRechargelogUser(db, opts...),
		RechargelogVideo:  newRechargelogVideo(db, opts...),
		Tytconfig:         newTytconfig(db, opts...),
		Uidglaid:          newUidglaid(db, opts...),
		User:              newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Admin             admin
	Agentinfo         agentinfo
	Config            config
	Fanyong           fanyong
	FanyongLog        fanyongLog
	FanyongXflog      fanyongXflog
	Fkrechargelog     fkrechargelog
	Game              game
	GameBak           gameBak
	GameBak1          gameBak1
	GameGonggao       gameGonggao
	GameOnlinenum     gameOnlinenum
	KefuHuifu         kefuHuifu
	KefuList          kefuList
	KefuMsg           kefuMsg
	KefuUsergl        kefuUsergl
	Kucunlog          kucunlog
	NewsCategory      newsCategory
	NewsList          newsList
	Paylog            paylog
	Rechargelog       rechargelog
	RechargelogAgent  rechargelogAgent
	RechargelogKefu   rechargelogKefu
	RechargelogKefuZy rechargelogKefuZy
	RechargelogUser   rechargelogUser
	RechargelogVideo  rechargelogVideo
	Tytconfig         tytconfig
	Uidglaid          uidglaid
	User              user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Admin:             q.Admin.clone(db),
		Agentinfo:         q.Agentinfo.clone(db),
		Config:            q.Config.clone(db),
		Fanyong:           q.Fanyong.clone(db),
		FanyongLog:        q.FanyongLog.clone(db),
		FanyongXflog:      q.FanyongXflog.clone(db),
		Fkrechargelog:     q.Fkrechargelog.clone(db),
		Game:              q.Game.clone(db),
		GameBak:           q.GameBak.clone(db),
		GameBak1:          q.GameBak1.clone(db),
		GameGonggao:       q.GameGonggao.clone(db),
		GameOnlinenum:     q.GameOnlinenum.clone(db),
		KefuHuifu:         q.KefuHuifu.clone(db),
		KefuList:          q.KefuList.clone(db),
		KefuMsg:           q.KefuMsg.clone(db),
		KefuUsergl:        q.KefuUsergl.clone(db),
		Kucunlog:          q.Kucunlog.clone(db),
		NewsCategory:      q.NewsCategory.clone(db),
		NewsList:          q.NewsList.clone(db),
		Paylog:            q.Paylog.clone(db),
		Rechargelog:       q.Rechargelog.clone(db),
		RechargelogAgent:  q.RechargelogAgent.clone(db),
		RechargelogKefu:   q.RechargelogKefu.clone(db),
		RechargelogKefuZy: q.RechargelogKefuZy.clone(db),
		RechargelogUser:   q.RechargelogUser.clone(db),
		RechargelogVideo:  q.RechargelogVideo.clone(db),
		Tytconfig:         q.Tytconfig.clone(db),
		Uidglaid:          q.Uidglaid.clone(db),
		User:              q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Admin:             q.Admin.replaceDB(db),
		Agentinfo:         q.Agentinfo.replaceDB(db),
		Config:            q.Config.replaceDB(db),
		Fanyong:           q.Fanyong.replaceDB(db),
		FanyongLog:        q.FanyongLog.replaceDB(db),
		FanyongXflog:      q.FanyongXflog.replaceDB(db),
		Fkrechargelog:     q.Fkrechargelog.replaceDB(db),
		Game:              q.Game.replaceDB(db),
		GameBak:           q.GameBak.replaceDB(db),
		GameBak1:          q.GameBak1.replaceDB(db),
		GameGonggao:       q.GameGonggao.replaceDB(db),
		GameOnlinenum:     q.GameOnlinenum.replaceDB(db),
		KefuHuifu:         q.KefuHuifu.replaceDB(db),
		KefuList:          q.KefuList.replaceDB(db),
		KefuMsg:           q.KefuMsg.replaceDB(db),
		KefuUsergl:        q.KefuUsergl.replaceDB(db),
		Kucunlog:          q.Kucunlog.replaceDB(db),
		NewsCategory:      q.NewsCategory.replaceDB(db),
		NewsList:          q.NewsList.replaceDB(db),
		Paylog:            q.Paylog.replaceDB(db),
		Rechargelog:       q.Rechargelog.replaceDB(db),
		RechargelogAgent:  q.RechargelogAgent.replaceDB(db),
		RechargelogKefu:   q.RechargelogKefu.replaceDB(db),
		RechargelogKefuZy: q.RechargelogKefuZy.replaceDB(db),
		RechargelogUser:   q.RechargelogUser.replaceDB(db),
		RechargelogVideo:  q.RechargelogVideo.replaceDB(db),
		Tytconfig:         q.Tytconfig.replaceDB(db),
		Uidglaid:          q.Uidglaid.replaceDB(db),
		User:              q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Admin             IAdminDo
	Agentinfo         IAgentinfoDo
	Config            IConfigDo
	Fanyong           IFanyongDo
	FanyongLog        IFanyongLogDo
	FanyongXflog      IFanyongXflogDo
	Fkrechargelog     IFkrechargelogDo
	Game              IGameDo
	GameBak           IGameBakDo
	GameBak1          IGameBak1Do
	GameGonggao       IGameGonggaoDo
	GameOnlinenum     IGameOnlinenumDo
	KefuHuifu         IKefuHuifuDo
	KefuList          IKefuListDo
	KefuMsg           IKefuMsgDo
	KefuUsergl        IKefuUserglDo
	Kucunlog          IKucunlogDo
	NewsCategory      INewsCategoryDo
	NewsList          INewsListDo
	Paylog            IPaylogDo
	Rechargelog       IRechargelogDo
	RechargelogAgent  IRechargelogAgentDo
	RechargelogKefu   IRechargelogKefuDo
	RechargelogKefuZy IRechargelogKefuZyDo
	RechargelogUser   IRechargelogUserDo
	RechargelogVideo  IRechargelogVideoDo
	Tytconfig         ITytconfigDo
	Uidglaid          IUidglaidDo
	User              IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Admin:             q.Admin.WithContext(ctx),
		Agentinfo:         q.Agentinfo.WithContext(ctx),
		Config:            q.Config.WithContext(ctx),
		Fanyong:           q.Fanyong.WithContext(ctx),
		FanyongLog:        q.FanyongLog.WithContext(ctx),
		FanyongXflog:      q.FanyongXflog.WithContext(ctx),
		Fkrechargelog:     q.Fkrechargelog.WithContext(ctx),
		Game:              q.Game.WithContext(ctx),
		GameBak:           q.GameBak.WithContext(ctx),
		GameBak1:          q.GameBak1.WithContext(ctx),
		GameGonggao:       q.GameGonggao.WithContext(ctx),
		GameOnlinenum:     q.GameOnlinenum.WithContext(ctx),
		KefuHuifu:         q.KefuHuifu.WithContext(ctx),
		KefuList:          q.KefuList.WithContext(ctx),
		KefuMsg:           q.KefuMsg.WithContext(ctx),
		KefuUsergl:        q.KefuUsergl.WithContext(ctx),
		Kucunlog:          q.Kucunlog.WithContext(ctx),
		NewsCategory:      q.NewsCategory.WithContext(ctx),
		NewsList:          q.NewsList.WithContext(ctx),
		Paylog:            q.Paylog.WithContext(ctx),
		Rechargelog:       q.Rechargelog.WithContext(ctx),
		RechargelogAgent:  q.RechargelogAgent.WithContext(ctx),
		RechargelogKefu:   q.RechargelogKefu.WithContext(ctx),
		RechargelogKefuZy: q.RechargelogKefuZy.WithContext(ctx),
		RechargelogUser:   q.RechargelogUser.WithContext(ctx),
		RechargelogVideo:  q.RechargelogVideo.WithContext(ctx),
		Tytconfig:         q.Tytconfig.WithContext(ctx),
		Uidglaid:          q.Uidglaid.WithContext(ctx),
		User:              q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
