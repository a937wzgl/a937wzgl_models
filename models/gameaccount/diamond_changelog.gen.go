// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newDiamondChangelog(db *gorm.DB, opts ...gen.DOOption) diamondChangelog {
	_diamondChangelog := diamondChangelog{}

	_diamondChangelog.diamondChangelogDo.UseDB(db, opts...)
	_diamondChangelog.diamondChangelogDo.UseModel(&model.DiamondChangelog{})

	tableName := _diamondChangelog.diamondChangelogDo.TableName()
	_diamondChangelog.ALL = field.NewAsterisk(tableName)
	_diamondChangelog.ID = field.NewInt32(tableName, "id")
	_diamondChangelog.Userid = field.NewInt32(tableName, "userid")
	_diamondChangelog.DiamondBefore = field.NewInt32(tableName, "diamond_before")
	_diamondChangelog.DiamondChange = field.NewInt32(tableName, "diamond_change")
	_diamondChangelog.DiamondCurrent = field.NewInt32(tableName, "diamond_current")
	_diamondChangelog.ChangeType = field.NewInt32(tableName, "change_type")
	_diamondChangelog.ChangeTime = field.NewTime(tableName, "change_time")
	_diamondChangelog.IsOnline = field.NewBool(tableName, "isOnline")

	_diamondChangelog.fillFieldMap()

	return _diamondChangelog
}

type diamondChangelog struct {
	diamondChangelogDo

	ALL            field.Asterisk
	ID             field.Int32
	Userid         field.Int32
	DiamondBefore  field.Int32
	DiamondChange  field.Int32
	DiamondCurrent field.Int32
	ChangeType     field.Int32 // 0网站加分,1捕鸟,2连线,3赠送,4兑换,528game,6领取,7东山再起,8红包,9八搭二,10牛牛
	ChangeTime     field.Time
	IsOnline       field.Bool

	fieldMap map[string]field.Expr
}

func (d diamondChangelog) Table(newTableName string) *diamondChangelog {
	d.diamondChangelogDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d diamondChangelog) As(alias string) *diamondChangelog {
	d.diamondChangelogDo.DO = *(d.diamondChangelogDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *diamondChangelog) updateTableName(table string) *diamondChangelog {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.Userid = field.NewInt32(table, "userid")
	d.DiamondBefore = field.NewInt32(table, "diamond_before")
	d.DiamondChange = field.NewInt32(table, "diamond_change")
	d.DiamondCurrent = field.NewInt32(table, "diamond_current")
	d.ChangeType = field.NewInt32(table, "change_type")
	d.ChangeTime = field.NewTime(table, "change_time")
	d.IsOnline = field.NewBool(table, "isOnline")

	d.fillFieldMap()

	return d
}

func (d *diamondChangelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *diamondChangelog) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["id"] = d.ID
	d.fieldMap["userid"] = d.Userid
	d.fieldMap["diamond_before"] = d.DiamondBefore
	d.fieldMap["diamond_change"] = d.DiamondChange
	d.fieldMap["diamond_current"] = d.DiamondCurrent
	d.fieldMap["change_type"] = d.ChangeType
	d.fieldMap["change_time"] = d.ChangeTime
	d.fieldMap["isOnline"] = d.IsOnline
}

func (d diamondChangelog) clone(db *gorm.DB) diamondChangelog {
	d.diamondChangelogDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d diamondChangelog) replaceDB(db *gorm.DB) diamondChangelog {
	d.diamondChangelogDo.ReplaceDB(db)
	return d
}

type diamondChangelogDo struct{ gen.DO }

type IDiamondChangelogDo interface {
	gen.SubQuery
	Debug() IDiamondChangelogDo
	WithContext(ctx context.Context) IDiamondChangelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDiamondChangelogDo
	WriteDB() IDiamondChangelogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDiamondChangelogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDiamondChangelogDo
	Not(conds ...gen.Condition) IDiamondChangelogDo
	Or(conds ...gen.Condition) IDiamondChangelogDo
	Select(conds ...field.Expr) IDiamondChangelogDo
	Where(conds ...gen.Condition) IDiamondChangelogDo
	Order(conds ...field.Expr) IDiamondChangelogDo
	Distinct(cols ...field.Expr) IDiamondChangelogDo
	Omit(cols ...field.Expr) IDiamondChangelogDo
	Join(table schema.Tabler, on ...field.Expr) IDiamondChangelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDiamondChangelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDiamondChangelogDo
	Group(cols ...field.Expr) IDiamondChangelogDo
	Having(conds ...gen.Condition) IDiamondChangelogDo
	Limit(limit int) IDiamondChangelogDo
	Offset(offset int) IDiamondChangelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDiamondChangelogDo
	Unscoped() IDiamondChangelogDo
	Create(values ...*model.DiamondChangelog) error
	CreateInBatches(values []*model.DiamondChangelog, batchSize int) error
	Save(values ...*model.DiamondChangelog) error
	First() (*model.DiamondChangelog, error)
	Take() (*model.DiamondChangelog, error)
	Last() (*model.DiamondChangelog, error)
	Find() ([]*model.DiamondChangelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiamondChangelog, err error)
	FindInBatches(result *[]*model.DiamondChangelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DiamondChangelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDiamondChangelogDo
	Assign(attrs ...field.AssignExpr) IDiamondChangelogDo
	Joins(fields ...field.RelationField) IDiamondChangelogDo
	Preload(fields ...field.RelationField) IDiamondChangelogDo
	FirstOrInit() (*model.DiamondChangelog, error)
	FirstOrCreate() (*model.DiamondChangelog, error)
	FindByPage(offset int, limit int) (result []*model.DiamondChangelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDiamondChangelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d diamondChangelogDo) Debug() IDiamondChangelogDo {
	return d.withDO(d.DO.Debug())
}

func (d diamondChangelogDo) WithContext(ctx context.Context) IDiamondChangelogDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d diamondChangelogDo) ReadDB() IDiamondChangelogDo {
	return d.Clauses(dbresolver.Read)
}

func (d diamondChangelogDo) WriteDB() IDiamondChangelogDo {
	return d.Clauses(dbresolver.Write)
}

func (d diamondChangelogDo) Session(config *gorm.Session) IDiamondChangelogDo {
	return d.withDO(d.DO.Session(config))
}

func (d diamondChangelogDo) Clauses(conds ...clause.Expression) IDiamondChangelogDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d diamondChangelogDo) Returning(value interface{}, columns ...string) IDiamondChangelogDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d diamondChangelogDo) Not(conds ...gen.Condition) IDiamondChangelogDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d diamondChangelogDo) Or(conds ...gen.Condition) IDiamondChangelogDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d diamondChangelogDo) Select(conds ...field.Expr) IDiamondChangelogDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d diamondChangelogDo) Where(conds ...gen.Condition) IDiamondChangelogDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d diamondChangelogDo) Order(conds ...field.Expr) IDiamondChangelogDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d diamondChangelogDo) Distinct(cols ...field.Expr) IDiamondChangelogDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d diamondChangelogDo) Omit(cols ...field.Expr) IDiamondChangelogDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d diamondChangelogDo) Join(table schema.Tabler, on ...field.Expr) IDiamondChangelogDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d diamondChangelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDiamondChangelogDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d diamondChangelogDo) RightJoin(table schema.Tabler, on ...field.Expr) IDiamondChangelogDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d diamondChangelogDo) Group(cols ...field.Expr) IDiamondChangelogDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d diamondChangelogDo) Having(conds ...gen.Condition) IDiamondChangelogDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d diamondChangelogDo) Limit(limit int) IDiamondChangelogDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d diamondChangelogDo) Offset(offset int) IDiamondChangelogDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d diamondChangelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDiamondChangelogDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d diamondChangelogDo) Unscoped() IDiamondChangelogDo {
	return d.withDO(d.DO.Unscoped())
}

func (d diamondChangelogDo) Create(values ...*model.DiamondChangelog) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d diamondChangelogDo) CreateInBatches(values []*model.DiamondChangelog, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d diamondChangelogDo) Save(values ...*model.DiamondChangelog) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d diamondChangelogDo) First() (*model.DiamondChangelog, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiamondChangelog), nil
	}
}

func (d diamondChangelogDo) Take() (*model.DiamondChangelog, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiamondChangelog), nil
	}
}

func (d diamondChangelogDo) Last() (*model.DiamondChangelog, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiamondChangelog), nil
	}
}

func (d diamondChangelogDo) Find() ([]*model.DiamondChangelog, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiamondChangelog), err
}

func (d diamondChangelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiamondChangelog, err error) {
	buf := make([]*model.DiamondChangelog, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d diamondChangelogDo) FindInBatches(result *[]*model.DiamondChangelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d diamondChangelogDo) Attrs(attrs ...field.AssignExpr) IDiamondChangelogDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d diamondChangelogDo) Assign(attrs ...field.AssignExpr) IDiamondChangelogDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d diamondChangelogDo) Joins(fields ...field.RelationField) IDiamondChangelogDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d diamondChangelogDo) Preload(fields ...field.RelationField) IDiamondChangelogDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d diamondChangelogDo) FirstOrInit() (*model.DiamondChangelog, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiamondChangelog), nil
	}
}

func (d diamondChangelogDo) FirstOrCreate() (*model.DiamondChangelog, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiamondChangelog), nil
	}
}

func (d diamondChangelogDo) FindByPage(offset int, limit int) (result []*model.DiamondChangelog, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d diamondChangelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d diamondChangelogDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d diamondChangelogDo) Delete(models ...*model.DiamondChangelog) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *diamondChangelogDo) withDO(do gen.Dao) *diamondChangelogDo {
	d.DO = *do.(*gen.DO)
	return d
}
