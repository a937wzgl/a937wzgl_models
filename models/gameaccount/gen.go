// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	Bankbindlist     *bankbindlist
	Bankname         *bankname
	Chatlog          *chatlog
	DiamondChangelog *diamondChangelog
	Dongshanzaiqi    *dongshanzaiqi
	Game             *game
	GameOnlinenum    *gameOnlinenum
	GameRecord       *gameRecord
	GameRoom         *gameRoom
	Lineout          *lineout
	Logintemp        *logintemp
	Mark             *mark
	Msg              *msg
	Newuseraccount   *newuseraccount
	Pcdandan         *pcdandan
	PropChangelog    *propChangelog
	PropItem         *propItem
	Recharge         *recharge
	RechargeFirst    *rechargeFirst
	Rechargelog      *rechargelog
	Returnscore      *returnscore
	Returnscorelog   *returnscorelog
	ScoreChangelog   *scoreChangelog
	Scoreout         *scoreout
	Sendcoinlog      *sendcoinlog
	ServerLog        *serverLog
	Sssss            *sssss
	Tempadddiamond   *tempadddiamond
	Tempaddscore     *tempaddscore
	TicketChangelog  *ticketChangelog
	User             *user
	UserAdmin        *userAdmin
	Userinfo         *userinfo
	UserinfoImp      *userinfoImp
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Bankbindlist = &Q.Bankbindlist
	Bankname = &Q.Bankname
	Chatlog = &Q.Chatlog
	DiamondChangelog = &Q.DiamondChangelog
	Dongshanzaiqi = &Q.Dongshanzaiqi
	Game = &Q.Game
	GameOnlinenum = &Q.GameOnlinenum
	GameRecord = &Q.GameRecord
	GameRoom = &Q.GameRoom
	Lineout = &Q.Lineout
	Logintemp = &Q.Logintemp
	Mark = &Q.Mark
	Msg = &Q.Msg
	Newuseraccount = &Q.Newuseraccount
	Pcdandan = &Q.Pcdandan
	PropChangelog = &Q.PropChangelog
	PropItem = &Q.PropItem
	Recharge = &Q.Recharge
	RechargeFirst = &Q.RechargeFirst
	Rechargelog = &Q.Rechargelog
	Returnscore = &Q.Returnscore
	Returnscorelog = &Q.Returnscorelog
	ScoreChangelog = &Q.ScoreChangelog
	Scoreout = &Q.Scoreout
	Sendcoinlog = &Q.Sendcoinlog
	ServerLog = &Q.ServerLog
	Sssss = &Q.Sssss
	Tempadddiamond = &Q.Tempadddiamond
	Tempaddscore = &Q.Tempaddscore
	TicketChangelog = &Q.TicketChangelog
	User = &Q.User
	UserAdmin = &Q.UserAdmin
	Userinfo = &Q.Userinfo
	UserinfoImp = &Q.UserinfoImp
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		Bankbindlist:     newBankbindlist(db, opts...),
		Bankname:         newBankname(db, opts...),
		Chatlog:          newChatlog(db, opts...),
		DiamondChangelog: newDiamondChangelog(db, opts...),
		Dongshanzaiqi:    newDongshanzaiqi(db, opts...),
		Game:             newGame(db, opts...),
		GameOnlinenum:    newGameOnlinenum(db, opts...),
		GameRecord:       newGameRecord(db, opts...),
		GameRoom:         newGameRoom(db, opts...),
		Lineout:          newLineout(db, opts...),
		Logintemp:        newLogintemp(db, opts...),
		Mark:             newMark(db, opts...),
		Msg:              newMsg(db, opts...),
		Newuseraccount:   newNewuseraccount(db, opts...),
		Pcdandan:         newPcdandan(db, opts...),
		PropChangelog:    newPropChangelog(db, opts...),
		PropItem:         newPropItem(db, opts...),
		Recharge:         newRecharge(db, opts...),
		RechargeFirst:    newRechargeFirst(db, opts...),
		Rechargelog:      newRechargelog(db, opts...),
		Returnscore:      newReturnscore(db, opts...),
		Returnscorelog:   newReturnscorelog(db, opts...),
		ScoreChangelog:   newScoreChangelog(db, opts...),
		Scoreout:         newScoreout(db, opts...),
		Sendcoinlog:      newSendcoinlog(db, opts...),
		ServerLog:        newServerLog(db, opts...),
		Sssss:            newSssss(db, opts...),
		Tempadddiamond:   newTempadddiamond(db, opts...),
		Tempaddscore:     newTempaddscore(db, opts...),
		TicketChangelog:  newTicketChangelog(db, opts...),
		User:             newUser(db, opts...),
		UserAdmin:        newUserAdmin(db, opts...),
		Userinfo:         newUserinfo(db, opts...),
		UserinfoImp:      newUserinfoImp(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Bankbindlist     bankbindlist
	Bankname         bankname
	Chatlog          chatlog
	DiamondChangelog diamondChangelog
	Dongshanzaiqi    dongshanzaiqi
	Game             game
	GameOnlinenum    gameOnlinenum
	GameRecord       gameRecord
	GameRoom         gameRoom
	Lineout          lineout
	Logintemp        logintemp
	Mark             mark
	Msg              msg
	Newuseraccount   newuseraccount
	Pcdandan         pcdandan
	PropChangelog    propChangelog
	PropItem         propItem
	Recharge         recharge
	RechargeFirst    rechargeFirst
	Rechargelog      rechargelog
	Returnscore      returnscore
	Returnscorelog   returnscorelog
	ScoreChangelog   scoreChangelog
	Scoreout         scoreout
	Sendcoinlog      sendcoinlog
	ServerLog        serverLog
	Sssss            sssss
	Tempadddiamond   tempadddiamond
	Tempaddscore     tempaddscore
	TicketChangelog  ticketChangelog
	User             user
	UserAdmin        userAdmin
	Userinfo         userinfo
	UserinfoImp      userinfoImp
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Bankbindlist:     q.Bankbindlist.clone(db),
		Bankname:         q.Bankname.clone(db),
		Chatlog:          q.Chatlog.clone(db),
		DiamondChangelog: q.DiamondChangelog.clone(db),
		Dongshanzaiqi:    q.Dongshanzaiqi.clone(db),
		Game:             q.Game.clone(db),
		GameOnlinenum:    q.GameOnlinenum.clone(db),
		GameRecord:       q.GameRecord.clone(db),
		GameRoom:         q.GameRoom.clone(db),
		Lineout:          q.Lineout.clone(db),
		Logintemp:        q.Logintemp.clone(db),
		Mark:             q.Mark.clone(db),
		Msg:              q.Msg.clone(db),
		Newuseraccount:   q.Newuseraccount.clone(db),
		Pcdandan:         q.Pcdandan.clone(db),
		PropChangelog:    q.PropChangelog.clone(db),
		PropItem:         q.PropItem.clone(db),
		Recharge:         q.Recharge.clone(db),
		RechargeFirst:    q.RechargeFirst.clone(db),
		Rechargelog:      q.Rechargelog.clone(db),
		Returnscore:      q.Returnscore.clone(db),
		Returnscorelog:   q.Returnscorelog.clone(db),
		ScoreChangelog:   q.ScoreChangelog.clone(db),
		Scoreout:         q.Scoreout.clone(db),
		Sendcoinlog:      q.Sendcoinlog.clone(db),
		ServerLog:        q.ServerLog.clone(db),
		Sssss:            q.Sssss.clone(db),
		Tempadddiamond:   q.Tempadddiamond.clone(db),
		Tempaddscore:     q.Tempaddscore.clone(db),
		TicketChangelog:  q.TicketChangelog.clone(db),
		User:             q.User.clone(db),
		UserAdmin:        q.UserAdmin.clone(db),
		Userinfo:         q.Userinfo.clone(db),
		UserinfoImp:      q.UserinfoImp.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Bankbindlist:     q.Bankbindlist.replaceDB(db),
		Bankname:         q.Bankname.replaceDB(db),
		Chatlog:          q.Chatlog.replaceDB(db),
		DiamondChangelog: q.DiamondChangelog.replaceDB(db),
		Dongshanzaiqi:    q.Dongshanzaiqi.replaceDB(db),
		Game:             q.Game.replaceDB(db),
		GameOnlinenum:    q.GameOnlinenum.replaceDB(db),
		GameRecord:       q.GameRecord.replaceDB(db),
		GameRoom:         q.GameRoom.replaceDB(db),
		Lineout:          q.Lineout.replaceDB(db),
		Logintemp:        q.Logintemp.replaceDB(db),
		Mark:             q.Mark.replaceDB(db),
		Msg:              q.Msg.replaceDB(db),
		Newuseraccount:   q.Newuseraccount.replaceDB(db),
		Pcdandan:         q.Pcdandan.replaceDB(db),
		PropChangelog:    q.PropChangelog.replaceDB(db),
		PropItem:         q.PropItem.replaceDB(db),
		Recharge:         q.Recharge.replaceDB(db),
		RechargeFirst:    q.RechargeFirst.replaceDB(db),
		Rechargelog:      q.Rechargelog.replaceDB(db),
		Returnscore:      q.Returnscore.replaceDB(db),
		Returnscorelog:   q.Returnscorelog.replaceDB(db),
		ScoreChangelog:   q.ScoreChangelog.replaceDB(db),
		Scoreout:         q.Scoreout.replaceDB(db),
		Sendcoinlog:      q.Sendcoinlog.replaceDB(db),
		ServerLog:        q.ServerLog.replaceDB(db),
		Sssss:            q.Sssss.replaceDB(db),
		Tempadddiamond:   q.Tempadddiamond.replaceDB(db),
		Tempaddscore:     q.Tempaddscore.replaceDB(db),
		TicketChangelog:  q.TicketChangelog.replaceDB(db),
		User:             q.User.replaceDB(db),
		UserAdmin:        q.UserAdmin.replaceDB(db),
		Userinfo:         q.Userinfo.replaceDB(db),
		UserinfoImp:      q.UserinfoImp.replaceDB(db),
	}
}

type queryCtx struct {
	Bankbindlist     IBankbindlistDo
	Bankname         IBanknameDo
	Chatlog          IChatlogDo
	DiamondChangelog IDiamondChangelogDo
	Dongshanzaiqi    IDongshanzaiqiDo
	Game             IGameDo
	GameOnlinenum    IGameOnlinenumDo
	GameRecord       IGameRecordDo
	GameRoom         IGameRoomDo
	Lineout          ILineoutDo
	Logintemp        ILogintempDo
	Mark             IMarkDo
	Msg              IMsgDo
	Newuseraccount   INewuseraccountDo
	Pcdandan         IPcdandanDo
	PropChangelog    IPropChangelogDo
	PropItem         IPropItemDo
	Recharge         IRechargeDo
	RechargeFirst    IRechargeFirstDo
	Rechargelog      IRechargelogDo
	Returnscore      IReturnscoreDo
	Returnscorelog   IReturnscorelogDo
	ScoreChangelog   IScoreChangelogDo
	Scoreout         IScoreoutDo
	Sendcoinlog      ISendcoinlogDo
	ServerLog        IServerLogDo
	Sssss            ISssssDo
	Tempadddiamond   ITempadddiamondDo
	Tempaddscore     ITempaddscoreDo
	TicketChangelog  ITicketChangelogDo
	User             IUserDo
	UserAdmin        IUserAdminDo
	Userinfo         IUserinfoDo
	UserinfoImp      IUserinfoImpDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Bankbindlist:     q.Bankbindlist.WithContext(ctx),
		Bankname:         q.Bankname.WithContext(ctx),
		Chatlog:          q.Chatlog.WithContext(ctx),
		DiamondChangelog: q.DiamondChangelog.WithContext(ctx),
		Dongshanzaiqi:    q.Dongshanzaiqi.WithContext(ctx),
		Game:             q.Game.WithContext(ctx),
		GameOnlinenum:    q.GameOnlinenum.WithContext(ctx),
		GameRecord:       q.GameRecord.WithContext(ctx),
		GameRoom:         q.GameRoom.WithContext(ctx),
		Lineout:          q.Lineout.WithContext(ctx),
		Logintemp:        q.Logintemp.WithContext(ctx),
		Mark:             q.Mark.WithContext(ctx),
		Msg:              q.Msg.WithContext(ctx),
		Newuseraccount:   q.Newuseraccount.WithContext(ctx),
		Pcdandan:         q.Pcdandan.WithContext(ctx),
		PropChangelog:    q.PropChangelog.WithContext(ctx),
		PropItem:         q.PropItem.WithContext(ctx),
		Recharge:         q.Recharge.WithContext(ctx),
		RechargeFirst:    q.RechargeFirst.WithContext(ctx),
		Rechargelog:      q.Rechargelog.WithContext(ctx),
		Returnscore:      q.Returnscore.WithContext(ctx),
		Returnscorelog:   q.Returnscorelog.WithContext(ctx),
		ScoreChangelog:   q.ScoreChangelog.WithContext(ctx),
		Scoreout:         q.Scoreout.WithContext(ctx),
		Sendcoinlog:      q.Sendcoinlog.WithContext(ctx),
		ServerLog:        q.ServerLog.WithContext(ctx),
		Sssss:            q.Sssss.WithContext(ctx),
		Tempadddiamond:   q.Tempadddiamond.WithContext(ctx),
		Tempaddscore:     q.Tempaddscore.WithContext(ctx),
		TicketChangelog:  q.TicketChangelog.WithContext(ctx),
		User:             q.User.WithContext(ctx),
		UserAdmin:        q.UserAdmin.WithContext(ctx),
		Userinfo:         q.Userinfo.WithContext(ctx),
		UserinfoImp:      q.UserinfoImp.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
