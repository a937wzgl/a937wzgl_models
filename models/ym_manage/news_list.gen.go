// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newNewsList(db *gorm.DB, opts ...gen.DOOption) newsList {
	_newsList := newsList{}

	_newsList.newsListDo.UseDB(db, opts...)
	_newsList.newsListDo.UseModel(&model.NewsList{})

	tableName := _newsList.newsListDo.TableName()
	_newsList.ALL = field.NewAsterisk(tableName)
	_newsList.ID = field.NewUint32(tableName, "id")
	_newsList.Cid = field.NewUint32(tableName, "cid")
	_newsList.Title = field.NewString(tableName, "title")
	_newsList.Content = field.NewString(tableName, "content")
	_newsList.Createtime = field.NewString(tableName, "createtime")
	_newsList.Updatetime = field.NewString(tableName, "updatetime")

	_newsList.fillFieldMap()

	return _newsList
}

type newsList struct {
	newsListDo

	ALL        field.Asterisk
	ID         field.Uint32
	Cid        field.Uint32
	Title      field.String
	Content    field.String
	Createtime field.String
	Updatetime field.String

	fieldMap map[string]field.Expr
}

func (n newsList) Table(newTableName string) *newsList {
	n.newsListDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n newsList) As(alias string) *newsList {
	n.newsListDo.DO = *(n.newsListDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *newsList) updateTableName(table string) *newsList {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewUint32(table, "id")
	n.Cid = field.NewUint32(table, "cid")
	n.Title = field.NewString(table, "title")
	n.Content = field.NewString(table, "content")
	n.Createtime = field.NewString(table, "createtime")
	n.Updatetime = field.NewString(table, "updatetime")

	n.fillFieldMap()

	return n
}

func (n *newsList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *newsList) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 6)
	n.fieldMap["id"] = n.ID
	n.fieldMap["cid"] = n.Cid
	n.fieldMap["title"] = n.Title
	n.fieldMap["content"] = n.Content
	n.fieldMap["createtime"] = n.Createtime
	n.fieldMap["updatetime"] = n.Updatetime
}

func (n newsList) clone(db *gorm.DB) newsList {
	n.newsListDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n newsList) replaceDB(db *gorm.DB) newsList {
	n.newsListDo.ReplaceDB(db)
	return n
}

type newsListDo struct{ gen.DO }

type INewsListDo interface {
	gen.SubQuery
	Debug() INewsListDo
	WithContext(ctx context.Context) INewsListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INewsListDo
	WriteDB() INewsListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INewsListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INewsListDo
	Not(conds ...gen.Condition) INewsListDo
	Or(conds ...gen.Condition) INewsListDo
	Select(conds ...field.Expr) INewsListDo
	Where(conds ...gen.Condition) INewsListDo
	Order(conds ...field.Expr) INewsListDo
	Distinct(cols ...field.Expr) INewsListDo
	Omit(cols ...field.Expr) INewsListDo
	Join(table schema.Tabler, on ...field.Expr) INewsListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INewsListDo
	RightJoin(table schema.Tabler, on ...field.Expr) INewsListDo
	Group(cols ...field.Expr) INewsListDo
	Having(conds ...gen.Condition) INewsListDo
	Limit(limit int) INewsListDo
	Offset(offset int) INewsListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INewsListDo
	Unscoped() INewsListDo
	Create(values ...*model.NewsList) error
	CreateInBatches(values []*model.NewsList, batchSize int) error
	Save(values ...*model.NewsList) error
	First() (*model.NewsList, error)
	Take() (*model.NewsList, error)
	Last() (*model.NewsList, error)
	Find() ([]*model.NewsList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NewsList, err error)
	FindInBatches(result *[]*model.NewsList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NewsList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INewsListDo
	Assign(attrs ...field.AssignExpr) INewsListDo
	Joins(fields ...field.RelationField) INewsListDo
	Preload(fields ...field.RelationField) INewsListDo
	FirstOrInit() (*model.NewsList, error)
	FirstOrCreate() (*model.NewsList, error)
	FindByPage(offset int, limit int) (result []*model.NewsList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INewsListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n newsListDo) Debug() INewsListDo {
	return n.withDO(n.DO.Debug())
}

func (n newsListDo) WithContext(ctx context.Context) INewsListDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n newsListDo) ReadDB() INewsListDo {
	return n.Clauses(dbresolver.Read)
}

func (n newsListDo) WriteDB() INewsListDo {
	return n.Clauses(dbresolver.Write)
}

func (n newsListDo) Session(config *gorm.Session) INewsListDo {
	return n.withDO(n.DO.Session(config))
}

func (n newsListDo) Clauses(conds ...clause.Expression) INewsListDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n newsListDo) Returning(value interface{}, columns ...string) INewsListDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n newsListDo) Not(conds ...gen.Condition) INewsListDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n newsListDo) Or(conds ...gen.Condition) INewsListDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n newsListDo) Select(conds ...field.Expr) INewsListDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n newsListDo) Where(conds ...gen.Condition) INewsListDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n newsListDo) Order(conds ...field.Expr) INewsListDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n newsListDo) Distinct(cols ...field.Expr) INewsListDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n newsListDo) Omit(cols ...field.Expr) INewsListDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n newsListDo) Join(table schema.Tabler, on ...field.Expr) INewsListDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n newsListDo) LeftJoin(table schema.Tabler, on ...field.Expr) INewsListDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n newsListDo) RightJoin(table schema.Tabler, on ...field.Expr) INewsListDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n newsListDo) Group(cols ...field.Expr) INewsListDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n newsListDo) Having(conds ...gen.Condition) INewsListDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n newsListDo) Limit(limit int) INewsListDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n newsListDo) Offset(offset int) INewsListDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n newsListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INewsListDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n newsListDo) Unscoped() INewsListDo {
	return n.withDO(n.DO.Unscoped())
}

func (n newsListDo) Create(values ...*model.NewsList) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n newsListDo) CreateInBatches(values []*model.NewsList, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n newsListDo) Save(values ...*model.NewsList) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n newsListDo) First() (*model.NewsList, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsList), nil
	}
}

func (n newsListDo) Take() (*model.NewsList, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsList), nil
	}
}

func (n newsListDo) Last() (*model.NewsList, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsList), nil
	}
}

func (n newsListDo) Find() ([]*model.NewsList, error) {
	result, err := n.DO.Find()
	return result.([]*model.NewsList), err
}

func (n newsListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NewsList, err error) {
	buf := make([]*model.NewsList, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n newsListDo) FindInBatches(result *[]*model.NewsList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n newsListDo) Attrs(attrs ...field.AssignExpr) INewsListDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n newsListDo) Assign(attrs ...field.AssignExpr) INewsListDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n newsListDo) Joins(fields ...field.RelationField) INewsListDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n newsListDo) Preload(fields ...field.RelationField) INewsListDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n newsListDo) FirstOrInit() (*model.NewsList, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsList), nil
	}
}

func (n newsListDo) FirstOrCreate() (*model.NewsList, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsList), nil
	}
}

func (n newsListDo) FindByPage(offset int, limit int) (result []*model.NewsList, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n newsListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n newsListDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n newsListDo) Delete(models ...*model.NewsList) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *newsListDo) withDO(do gen.Dao) *newsListDo {
	n.DO = *do.(*gen.DO)
	return n
}
