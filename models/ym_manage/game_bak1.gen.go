// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newGameBak1(db *gorm.DB, opts ...gen.DOOption) gameBak1 {
	_gameBak1 := gameBak1{}

	_gameBak1.gameBak1Do.UseDB(db, opts...)
	_gameBak1.gameBak1Do.UseModel(&model.GameBak1{})

	tableName := _gameBak1.gameBak1Do.TableName()
	_gameBak1.ALL = field.NewAsterisk(tableName)
	_gameBak1.ID = field.NewUint32(tableName, "id")
	_gameBak1.Gameid = field.NewUint32(tableName, "gameid")
	_gameBak1.Name = field.NewString(tableName, "name")
	_gameBak1.Server = field.NewUint32(tableName, "server")
	_gameBak1.Port = field.NewString(tableName, "port")
	_gameBak1.Version = field.NewString(tableName, "version")
	_gameBak1.Type = field.NewUint32(tableName, "type")
	_gameBak1.Isstart = field.NewBool(tableName, "isstart")
	_gameBak1.Slotinfo = field.NewString(tableName, "slotinfo")
	_gameBak1.Choushuilv = field.NewUint32(tableName, "choushuilv")
	_gameBak1.Nandulv = field.NewUint32(tableName, "nandulv")
	_gameBak1.Isshuigame = field.NewBool(tableName, "isshuigame")

	_gameBak1.fillFieldMap()

	return _gameBak1
}

type gameBak1 struct {
	gameBak1Do

	ALL        field.Asterisk
	ID         field.Uint32
	Gameid     field.Uint32
	Name       field.String
	Server     field.Uint32
	Port       field.String
	Version    field.String
	Type       field.Uint32 // 游戏类别
	Isstart    field.Bool   // 1开启  0关闭
	Slotinfo   field.String
	Choushuilv field.Uint32 // 1-10
	Nandulv    field.Uint32 // 1-10
	Isshuigame field.Bool   // 是否含水位的游戏 1是  0不是

	fieldMap map[string]field.Expr
}

func (g gameBak1) Table(newTableName string) *gameBak1 {
	g.gameBak1Do.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameBak1) As(alias string) *gameBak1 {
	g.gameBak1Do.DO = *(g.gameBak1Do.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameBak1) updateTableName(table string) *gameBak1 {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint32(table, "id")
	g.Gameid = field.NewUint32(table, "gameid")
	g.Name = field.NewString(table, "name")
	g.Server = field.NewUint32(table, "server")
	g.Port = field.NewString(table, "port")
	g.Version = field.NewString(table, "version")
	g.Type = field.NewUint32(table, "type")
	g.Isstart = field.NewBool(table, "isstart")
	g.Slotinfo = field.NewString(table, "slotinfo")
	g.Choushuilv = field.NewUint32(table, "choushuilv")
	g.Nandulv = field.NewUint32(table, "nandulv")
	g.Isshuigame = field.NewBool(table, "isshuigame")

	g.fillFieldMap()

	return g
}

func (g *gameBak1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameBak1) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 12)
	g.fieldMap["id"] = g.ID
	g.fieldMap["gameid"] = g.Gameid
	g.fieldMap["name"] = g.Name
	g.fieldMap["server"] = g.Server
	g.fieldMap["port"] = g.Port
	g.fieldMap["version"] = g.Version
	g.fieldMap["type"] = g.Type
	g.fieldMap["isstart"] = g.Isstart
	g.fieldMap["slotinfo"] = g.Slotinfo
	g.fieldMap["choushuilv"] = g.Choushuilv
	g.fieldMap["nandulv"] = g.Nandulv
	g.fieldMap["isshuigame"] = g.Isshuigame
}

func (g gameBak1) clone(db *gorm.DB) gameBak1 {
	g.gameBak1Do.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameBak1) replaceDB(db *gorm.DB) gameBak1 {
	g.gameBak1Do.ReplaceDB(db)
	return g
}

type gameBak1Do struct{ gen.DO }

type IGameBak1Do interface {
	gen.SubQuery
	Debug() IGameBak1Do
	WithContext(ctx context.Context) IGameBak1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGameBak1Do
	WriteDB() IGameBak1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGameBak1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGameBak1Do
	Not(conds ...gen.Condition) IGameBak1Do
	Or(conds ...gen.Condition) IGameBak1Do
	Select(conds ...field.Expr) IGameBak1Do
	Where(conds ...gen.Condition) IGameBak1Do
	Order(conds ...field.Expr) IGameBak1Do
	Distinct(cols ...field.Expr) IGameBak1Do
	Omit(cols ...field.Expr) IGameBak1Do
	Join(table schema.Tabler, on ...field.Expr) IGameBak1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IGameBak1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IGameBak1Do
	Group(cols ...field.Expr) IGameBak1Do
	Having(conds ...gen.Condition) IGameBak1Do
	Limit(limit int) IGameBak1Do
	Offset(offset int) IGameBak1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGameBak1Do
	Unscoped() IGameBak1Do
	Create(values ...*model.GameBak1) error
	CreateInBatches(values []*model.GameBak1, batchSize int) error
	Save(values ...*model.GameBak1) error
	First() (*model.GameBak1, error)
	Take() (*model.GameBak1, error)
	Last() (*model.GameBak1, error)
	Find() ([]*model.GameBak1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameBak1, err error)
	FindInBatches(result *[]*model.GameBak1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GameBak1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGameBak1Do
	Assign(attrs ...field.AssignExpr) IGameBak1Do
	Joins(fields ...field.RelationField) IGameBak1Do
	Preload(fields ...field.RelationField) IGameBak1Do
	FirstOrInit() (*model.GameBak1, error)
	FirstOrCreate() (*model.GameBak1, error)
	FindByPage(offset int, limit int) (result []*model.GameBak1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGameBak1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gameBak1Do) Debug() IGameBak1Do {
	return g.withDO(g.DO.Debug())
}

func (g gameBak1Do) WithContext(ctx context.Context) IGameBak1Do {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameBak1Do) ReadDB() IGameBak1Do {
	return g.Clauses(dbresolver.Read)
}

func (g gameBak1Do) WriteDB() IGameBak1Do {
	return g.Clauses(dbresolver.Write)
}

func (g gameBak1Do) Session(config *gorm.Session) IGameBak1Do {
	return g.withDO(g.DO.Session(config))
}

func (g gameBak1Do) Clauses(conds ...clause.Expression) IGameBak1Do {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameBak1Do) Returning(value interface{}, columns ...string) IGameBak1Do {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameBak1Do) Not(conds ...gen.Condition) IGameBak1Do {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameBak1Do) Or(conds ...gen.Condition) IGameBak1Do {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameBak1Do) Select(conds ...field.Expr) IGameBak1Do {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameBak1Do) Where(conds ...gen.Condition) IGameBak1Do {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameBak1Do) Order(conds ...field.Expr) IGameBak1Do {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameBak1Do) Distinct(cols ...field.Expr) IGameBak1Do {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameBak1Do) Omit(cols ...field.Expr) IGameBak1Do {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameBak1Do) Join(table schema.Tabler, on ...field.Expr) IGameBak1Do {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameBak1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IGameBak1Do {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameBak1Do) RightJoin(table schema.Tabler, on ...field.Expr) IGameBak1Do {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameBak1Do) Group(cols ...field.Expr) IGameBak1Do {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameBak1Do) Having(conds ...gen.Condition) IGameBak1Do {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameBak1Do) Limit(limit int) IGameBak1Do {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameBak1Do) Offset(offset int) IGameBak1Do {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameBak1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IGameBak1Do {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameBak1Do) Unscoped() IGameBak1Do {
	return g.withDO(g.DO.Unscoped())
}

func (g gameBak1Do) Create(values ...*model.GameBak1) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameBak1Do) CreateInBatches(values []*model.GameBak1, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameBak1Do) Save(values ...*model.GameBak1) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameBak1Do) First() (*model.GameBak1, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameBak1), nil
	}
}

func (g gameBak1Do) Take() (*model.GameBak1, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameBak1), nil
	}
}

func (g gameBak1Do) Last() (*model.GameBak1, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameBak1), nil
	}
}

func (g gameBak1Do) Find() ([]*model.GameBak1, error) {
	result, err := g.DO.Find()
	return result.([]*model.GameBak1), err
}

func (g gameBak1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameBak1, err error) {
	buf := make([]*model.GameBak1, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameBak1Do) FindInBatches(result *[]*model.GameBak1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameBak1Do) Attrs(attrs ...field.AssignExpr) IGameBak1Do {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameBak1Do) Assign(attrs ...field.AssignExpr) IGameBak1Do {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameBak1Do) Joins(fields ...field.RelationField) IGameBak1Do {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameBak1Do) Preload(fields ...field.RelationField) IGameBak1Do {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameBak1Do) FirstOrInit() (*model.GameBak1, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameBak1), nil
	}
}

func (g gameBak1Do) FirstOrCreate() (*model.GameBak1, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameBak1), nil
	}
}

func (g gameBak1Do) FindByPage(offset int, limit int) (result []*model.GameBak1, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameBak1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameBak1Do) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameBak1Do) Delete(models ...*model.GameBak1) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameBak1Do) withDO(do gen.Dao) *gameBak1Do {
	g.DO = *do.(*gen.DO)
	return g
}
