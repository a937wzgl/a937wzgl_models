// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newServerLog(db *gorm.DB, opts ...gen.DOOption) serverLog {
	_serverLog := serverLog{}

	_serverLog.serverLogDo.UseDB(db, opts...)
	_serverLog.serverLogDo.UseModel(&model.ServerLog{})

	tableName := _serverLog.serverLogDo.TableName()
	_serverLog.ALL = field.NewAsterisk(tableName)
	_serverLog.ID = field.NewUint32(tableName, "id")
	_serverLog.Txt = field.NewString(tableName, "txt")
	_serverLog.Status = field.NewBool(tableName, "status")
	_serverLog.Createtime = field.NewString(tableName, "createtime")
	_serverLog.Updatetime = field.NewString(tableName, "updatetime")

	_serverLog.fillFieldMap()

	return _serverLog
}

type serverLog struct {
	serverLogDo

	ALL        field.Asterisk
	ID         field.Uint32
	Txt        field.String
	Status     field.Bool // 0关闭 1显示
	Createtime field.String
	Updatetime field.String

	fieldMap map[string]field.Expr
}

func (s serverLog) Table(newTableName string) *serverLog {
	s.serverLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverLog) As(alias string) *serverLog {
	s.serverLogDo.DO = *(s.serverLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverLog) updateTableName(table string) *serverLog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint32(table, "id")
	s.Txt = field.NewString(table, "txt")
	s.Status = field.NewBool(table, "status")
	s.Createtime = field.NewString(table, "createtime")
	s.Updatetime = field.NewString(table, "updatetime")

	s.fillFieldMap()

	return s
}

func (s *serverLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["txt"] = s.Txt
	s.fieldMap["status"] = s.Status
	s.fieldMap["createtime"] = s.Createtime
	s.fieldMap["updatetime"] = s.Updatetime
}

func (s serverLog) clone(db *gorm.DB) serverLog {
	s.serverLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverLog) replaceDB(db *gorm.DB) serverLog {
	s.serverLogDo.ReplaceDB(db)
	return s
}

type serverLogDo struct{ gen.DO }

type IServerLogDo interface {
	gen.SubQuery
	Debug() IServerLogDo
	WithContext(ctx context.Context) IServerLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerLogDo
	WriteDB() IServerLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerLogDo
	Not(conds ...gen.Condition) IServerLogDo
	Or(conds ...gen.Condition) IServerLogDo
	Select(conds ...field.Expr) IServerLogDo
	Where(conds ...gen.Condition) IServerLogDo
	Order(conds ...field.Expr) IServerLogDo
	Distinct(cols ...field.Expr) IServerLogDo
	Omit(cols ...field.Expr) IServerLogDo
	Join(table schema.Tabler, on ...field.Expr) IServerLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerLogDo
	Group(cols ...field.Expr) IServerLogDo
	Having(conds ...gen.Condition) IServerLogDo
	Limit(limit int) IServerLogDo
	Offset(offset int) IServerLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerLogDo
	Unscoped() IServerLogDo
	Create(values ...*model.ServerLog) error
	CreateInBatches(values []*model.ServerLog, batchSize int) error
	Save(values ...*model.ServerLog) error
	First() (*model.ServerLog, error)
	Take() (*model.ServerLog, error)
	Last() (*model.ServerLog, error)
	Find() ([]*model.ServerLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerLog, err error)
	FindInBatches(result *[]*model.ServerLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerLogDo
	Assign(attrs ...field.AssignExpr) IServerLogDo
	Joins(fields ...field.RelationField) IServerLogDo
	Preload(fields ...field.RelationField) IServerLogDo
	FirstOrInit() (*model.ServerLog, error)
	FirstOrCreate() (*model.ServerLog, error)
	FindByPage(offset int, limit int) (result []*model.ServerLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverLogDo) Debug() IServerLogDo {
	return s.withDO(s.DO.Debug())
}

func (s serverLogDo) WithContext(ctx context.Context) IServerLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverLogDo) ReadDB() IServerLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverLogDo) WriteDB() IServerLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverLogDo) Session(config *gorm.Session) IServerLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverLogDo) Clauses(conds ...clause.Expression) IServerLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverLogDo) Returning(value interface{}, columns ...string) IServerLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverLogDo) Not(conds ...gen.Condition) IServerLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverLogDo) Or(conds ...gen.Condition) IServerLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverLogDo) Select(conds ...field.Expr) IServerLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverLogDo) Where(conds ...gen.Condition) IServerLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverLogDo) Order(conds ...field.Expr) IServerLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverLogDo) Distinct(cols ...field.Expr) IServerLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverLogDo) Omit(cols ...field.Expr) IServerLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverLogDo) Join(table schema.Tabler, on ...field.Expr) IServerLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverLogDo) Group(cols ...field.Expr) IServerLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverLogDo) Having(conds ...gen.Condition) IServerLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverLogDo) Limit(limit int) IServerLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverLogDo) Offset(offset int) IServerLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverLogDo) Unscoped() IServerLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverLogDo) Create(values ...*model.ServerLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverLogDo) CreateInBatches(values []*model.ServerLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverLogDo) Save(values ...*model.ServerLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverLogDo) First() (*model.ServerLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerLog), nil
	}
}

func (s serverLogDo) Take() (*model.ServerLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerLog), nil
	}
}

func (s serverLogDo) Last() (*model.ServerLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerLog), nil
	}
}

func (s serverLogDo) Find() ([]*model.ServerLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerLog), err
}

func (s serverLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerLog, err error) {
	buf := make([]*model.ServerLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverLogDo) FindInBatches(result *[]*model.ServerLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverLogDo) Attrs(attrs ...field.AssignExpr) IServerLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverLogDo) Assign(attrs ...field.AssignExpr) IServerLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverLogDo) Joins(fields ...field.RelationField) IServerLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverLogDo) Preload(fields ...field.RelationField) IServerLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverLogDo) FirstOrInit() (*model.ServerLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerLog), nil
	}
}

func (s serverLogDo) FirstOrCreate() (*model.ServerLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerLog), nil
	}
}

func (s serverLogDo) FindByPage(offset int, limit int) (result []*model.ServerLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverLogDo) Delete(models ...*model.ServerLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverLogDo) withDO(do gen.Dao) *serverLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
