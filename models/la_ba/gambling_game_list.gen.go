// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package la_ba

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newGamblingGameList(db *gorm.DB, opts ...gen.DOOption) gamblingGameList {
	_gamblingGameList := gamblingGameList{}

	_gamblingGameList.gamblingGameListDo.UseDB(db, opts...)
	_gamblingGameList.gamblingGameListDo.UseModel(&model.GamblingGameList{})

	tableName := _gamblingGameList.gamblingGameListDo.TableName()
	_gamblingGameList.ALL = field.NewAsterisk(tableName)
	_gamblingGameList.NGameID = field.NewUint32(tableName, "nGameID")
	_gamblingGameList.StrGameName = field.NewString(tableName, "strGameName")
	_gamblingGameList.NGameType = field.NewInt32(tableName, "nGameType")
	_gamblingGameList.NGamblingWaterLevelGold = field.NewInt32(tableName, "nGamblingWaterLevelGold")
	_gamblingGameList.NGamblingBalanceGold = field.NewInt64(tableName, "nGamblingBalanceGold")
	_gamblingGameList.NGamblingWinPool = field.NewInt64(tableName, "nGamblingWinPool")
	_gamblingGameList.NGamblingUpdateBalanceGold = field.NewInt64(tableName, "nGamblingUpdateBalanceGold")
	_gamblingGameList.NGamblingBigWinLevel = field.NewString(tableName, "nGamblingBigWinLevel")
	_gamblingGameList.NGamblingBigWinLuck = field.NewString(tableName, "nGamblingBigWinLuck")

	_gamblingGameList.fillFieldMap()

	return _gamblingGameList
}

type gamblingGameList struct {
	gamblingGameListDo

	ALL                        field.Asterisk
	NGameID                    field.Uint32 // 游戏id
	StrGameName                field.String
	NGameType                  field.Int32
	NGamblingWaterLevelGold    field.Int32  // 水位值(百分比)
	NGamblingBalanceGold       field.Int64  // 水位库存
	NGamblingWinPool           field.Int64  // 奖池
	NGamblingUpdateBalanceGold field.Int64  // 修改库存值(累计)
	NGamblingBigWinLevel       field.String // 大奖幸运等级(千分概率)
	NGamblingBigWinLuck        field.String // 大奖幸运概率(百分概率)

	fieldMap map[string]field.Expr
}

func (g gamblingGameList) Table(newTableName string) *gamblingGameList {
	g.gamblingGameListDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gamblingGameList) As(alias string) *gamblingGameList {
	g.gamblingGameListDo.DO = *(g.gamblingGameListDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gamblingGameList) updateTableName(table string) *gamblingGameList {
	g.ALL = field.NewAsterisk(table)
	g.NGameID = field.NewUint32(table, "nGameID")
	g.StrGameName = field.NewString(table, "strGameName")
	g.NGameType = field.NewInt32(table, "nGameType")
	g.NGamblingWaterLevelGold = field.NewInt32(table, "nGamblingWaterLevelGold")
	g.NGamblingBalanceGold = field.NewInt64(table, "nGamblingBalanceGold")
	g.NGamblingWinPool = field.NewInt64(table, "nGamblingWinPool")
	g.NGamblingUpdateBalanceGold = field.NewInt64(table, "nGamblingUpdateBalanceGold")
	g.NGamblingBigWinLevel = field.NewString(table, "nGamblingBigWinLevel")
	g.NGamblingBigWinLuck = field.NewString(table, "nGamblingBigWinLuck")

	g.fillFieldMap()

	return g
}

func (g *gamblingGameList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gamblingGameList) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 9)
	g.fieldMap["nGameID"] = g.NGameID
	g.fieldMap["strGameName"] = g.StrGameName
	g.fieldMap["nGameType"] = g.NGameType
	g.fieldMap["nGamblingWaterLevelGold"] = g.NGamblingWaterLevelGold
	g.fieldMap["nGamblingBalanceGold"] = g.NGamblingBalanceGold
	g.fieldMap["nGamblingWinPool"] = g.NGamblingWinPool
	g.fieldMap["nGamblingUpdateBalanceGold"] = g.NGamblingUpdateBalanceGold
	g.fieldMap["nGamblingBigWinLevel"] = g.NGamblingBigWinLevel
	g.fieldMap["nGamblingBigWinLuck"] = g.NGamblingBigWinLuck
}

func (g gamblingGameList) clone(db *gorm.DB) gamblingGameList {
	g.gamblingGameListDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gamblingGameList) replaceDB(db *gorm.DB) gamblingGameList {
	g.gamblingGameListDo.ReplaceDB(db)
	return g
}

type gamblingGameListDo struct{ gen.DO }

type IGamblingGameListDo interface {
	gen.SubQuery
	Debug() IGamblingGameListDo
	WithContext(ctx context.Context) IGamblingGameListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGamblingGameListDo
	WriteDB() IGamblingGameListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGamblingGameListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGamblingGameListDo
	Not(conds ...gen.Condition) IGamblingGameListDo
	Or(conds ...gen.Condition) IGamblingGameListDo
	Select(conds ...field.Expr) IGamblingGameListDo
	Where(conds ...gen.Condition) IGamblingGameListDo
	Order(conds ...field.Expr) IGamblingGameListDo
	Distinct(cols ...field.Expr) IGamblingGameListDo
	Omit(cols ...field.Expr) IGamblingGameListDo
	Join(table schema.Tabler, on ...field.Expr) IGamblingGameListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGamblingGameListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGamblingGameListDo
	Group(cols ...field.Expr) IGamblingGameListDo
	Having(conds ...gen.Condition) IGamblingGameListDo
	Limit(limit int) IGamblingGameListDo
	Offset(offset int) IGamblingGameListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGamblingGameListDo
	Unscoped() IGamblingGameListDo
	Create(values ...*model.GamblingGameList) error
	CreateInBatches(values []*model.GamblingGameList, batchSize int) error
	Save(values ...*model.GamblingGameList) error
	First() (*model.GamblingGameList, error)
	Take() (*model.GamblingGameList, error)
	Last() (*model.GamblingGameList, error)
	Find() ([]*model.GamblingGameList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GamblingGameList, err error)
	FindInBatches(result *[]*model.GamblingGameList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GamblingGameList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGamblingGameListDo
	Assign(attrs ...field.AssignExpr) IGamblingGameListDo
	Joins(fields ...field.RelationField) IGamblingGameListDo
	Preload(fields ...field.RelationField) IGamblingGameListDo
	FirstOrInit() (*model.GamblingGameList, error)
	FirstOrCreate() (*model.GamblingGameList, error)
	FindByPage(offset int, limit int) (result []*model.GamblingGameList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGamblingGameListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gamblingGameListDo) Debug() IGamblingGameListDo {
	return g.withDO(g.DO.Debug())
}

func (g gamblingGameListDo) WithContext(ctx context.Context) IGamblingGameListDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gamblingGameListDo) ReadDB() IGamblingGameListDo {
	return g.Clauses(dbresolver.Read)
}

func (g gamblingGameListDo) WriteDB() IGamblingGameListDo {
	return g.Clauses(dbresolver.Write)
}

func (g gamblingGameListDo) Session(config *gorm.Session) IGamblingGameListDo {
	return g.withDO(g.DO.Session(config))
}

func (g gamblingGameListDo) Clauses(conds ...clause.Expression) IGamblingGameListDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gamblingGameListDo) Returning(value interface{}, columns ...string) IGamblingGameListDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gamblingGameListDo) Not(conds ...gen.Condition) IGamblingGameListDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gamblingGameListDo) Or(conds ...gen.Condition) IGamblingGameListDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gamblingGameListDo) Select(conds ...field.Expr) IGamblingGameListDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gamblingGameListDo) Where(conds ...gen.Condition) IGamblingGameListDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gamblingGameListDo) Order(conds ...field.Expr) IGamblingGameListDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gamblingGameListDo) Distinct(cols ...field.Expr) IGamblingGameListDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gamblingGameListDo) Omit(cols ...field.Expr) IGamblingGameListDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gamblingGameListDo) Join(table schema.Tabler, on ...field.Expr) IGamblingGameListDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gamblingGameListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGamblingGameListDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gamblingGameListDo) RightJoin(table schema.Tabler, on ...field.Expr) IGamblingGameListDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gamblingGameListDo) Group(cols ...field.Expr) IGamblingGameListDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gamblingGameListDo) Having(conds ...gen.Condition) IGamblingGameListDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gamblingGameListDo) Limit(limit int) IGamblingGameListDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gamblingGameListDo) Offset(offset int) IGamblingGameListDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gamblingGameListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGamblingGameListDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gamblingGameListDo) Unscoped() IGamblingGameListDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gamblingGameListDo) Create(values ...*model.GamblingGameList) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gamblingGameListDo) CreateInBatches(values []*model.GamblingGameList, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gamblingGameListDo) Save(values ...*model.GamblingGameList) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gamblingGameListDo) First() (*model.GamblingGameList, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GamblingGameList), nil
	}
}

func (g gamblingGameListDo) Take() (*model.GamblingGameList, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GamblingGameList), nil
	}
}

func (g gamblingGameListDo) Last() (*model.GamblingGameList, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GamblingGameList), nil
	}
}

func (g gamblingGameListDo) Find() ([]*model.GamblingGameList, error) {
	result, err := g.DO.Find()
	return result.([]*model.GamblingGameList), err
}

func (g gamblingGameListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GamblingGameList, err error) {
	buf := make([]*model.GamblingGameList, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gamblingGameListDo) FindInBatches(result *[]*model.GamblingGameList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gamblingGameListDo) Attrs(attrs ...field.AssignExpr) IGamblingGameListDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gamblingGameListDo) Assign(attrs ...field.AssignExpr) IGamblingGameListDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gamblingGameListDo) Joins(fields ...field.RelationField) IGamblingGameListDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gamblingGameListDo) Preload(fields ...field.RelationField) IGamblingGameListDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gamblingGameListDo) FirstOrInit() (*model.GamblingGameList, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GamblingGameList), nil
	}
}

func (g gamblingGameListDo) FirstOrCreate() (*model.GamblingGameList, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GamblingGameList), nil
	}
}

func (g gamblingGameListDo) FindByPage(offset int, limit int) (result []*model.GamblingGameList, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gamblingGameListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gamblingGameListDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gamblingGameListDo) Delete(models ...*model.GamblingGameList) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gamblingGameListDo) withDO(do gen.Dao) *gamblingGameListDo {
	g.DO = *do.(*gen.DO)
	return g
}
