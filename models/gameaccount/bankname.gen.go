// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newBankname(db *gorm.DB, opts ...gen.DOOption) bankname {
	_bankname := bankname{}

	_bankname.banknameDo.UseDB(db, opts...)
	_bankname.banknameDo.UseModel(&model.Bankname{})

	tableName := _bankname.banknameDo.TableName()
	_bankname.ALL = field.NewAsterisk(tableName)
	_bankname.TypeID = field.NewInt32(tableName, "typeId")
	_bankname.BankName = field.NewString(tableName, "bankName")

	_bankname.fillFieldMap()

	return _bankname
}

type bankname struct {
	banknameDo

	ALL      field.Asterisk
	TypeID   field.Int32
	BankName field.String

	fieldMap map[string]field.Expr
}

func (b bankname) Table(newTableName string) *bankname {
	b.banknameDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bankname) As(alias string) *bankname {
	b.banknameDo.DO = *(b.banknameDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bankname) updateTableName(table string) *bankname {
	b.ALL = field.NewAsterisk(table)
	b.TypeID = field.NewInt32(table, "typeId")
	b.BankName = field.NewString(table, "bankName")

	b.fillFieldMap()

	return b
}

func (b *bankname) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bankname) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 2)
	b.fieldMap["typeId"] = b.TypeID
	b.fieldMap["bankName"] = b.BankName
}

func (b bankname) clone(db *gorm.DB) bankname {
	b.banknameDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bankname) replaceDB(db *gorm.DB) bankname {
	b.banknameDo.ReplaceDB(db)
	return b
}

type banknameDo struct{ gen.DO }

type IBanknameDo interface {
	gen.SubQuery
	Debug() IBanknameDo
	WithContext(ctx context.Context) IBanknameDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBanknameDo
	WriteDB() IBanknameDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBanknameDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBanknameDo
	Not(conds ...gen.Condition) IBanknameDo
	Or(conds ...gen.Condition) IBanknameDo
	Select(conds ...field.Expr) IBanknameDo
	Where(conds ...gen.Condition) IBanknameDo
	Order(conds ...field.Expr) IBanknameDo
	Distinct(cols ...field.Expr) IBanknameDo
	Omit(cols ...field.Expr) IBanknameDo
	Join(table schema.Tabler, on ...field.Expr) IBanknameDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBanknameDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBanknameDo
	Group(cols ...field.Expr) IBanknameDo
	Having(conds ...gen.Condition) IBanknameDo
	Limit(limit int) IBanknameDo
	Offset(offset int) IBanknameDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBanknameDo
	Unscoped() IBanknameDo
	Create(values ...*model.Bankname) error
	CreateInBatches(values []*model.Bankname, batchSize int) error
	Save(values ...*model.Bankname) error
	First() (*model.Bankname, error)
	Take() (*model.Bankname, error)
	Last() (*model.Bankname, error)
	Find() ([]*model.Bankname, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Bankname, err error)
	FindInBatches(result *[]*model.Bankname, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Bankname) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBanknameDo
	Assign(attrs ...field.AssignExpr) IBanknameDo
	Joins(fields ...field.RelationField) IBanknameDo
	Preload(fields ...field.RelationField) IBanknameDo
	FirstOrInit() (*model.Bankname, error)
	FirstOrCreate() (*model.Bankname, error)
	FindByPage(offset int, limit int) (result []*model.Bankname, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBanknameDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b banknameDo) Debug() IBanknameDo {
	return b.withDO(b.DO.Debug())
}

func (b banknameDo) WithContext(ctx context.Context) IBanknameDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b banknameDo) ReadDB() IBanknameDo {
	return b.Clauses(dbresolver.Read)
}

func (b banknameDo) WriteDB() IBanknameDo {
	return b.Clauses(dbresolver.Write)
}

func (b banknameDo) Session(config *gorm.Session) IBanknameDo {
	return b.withDO(b.DO.Session(config))
}

func (b banknameDo) Clauses(conds ...clause.Expression) IBanknameDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b banknameDo) Returning(value interface{}, columns ...string) IBanknameDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b banknameDo) Not(conds ...gen.Condition) IBanknameDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b banknameDo) Or(conds ...gen.Condition) IBanknameDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b banknameDo) Select(conds ...field.Expr) IBanknameDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b banknameDo) Where(conds ...gen.Condition) IBanknameDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b banknameDo) Order(conds ...field.Expr) IBanknameDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b banknameDo) Distinct(cols ...field.Expr) IBanknameDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b banknameDo) Omit(cols ...field.Expr) IBanknameDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b banknameDo) Join(table schema.Tabler, on ...field.Expr) IBanknameDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b banknameDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBanknameDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b banknameDo) RightJoin(table schema.Tabler, on ...field.Expr) IBanknameDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b banknameDo) Group(cols ...field.Expr) IBanknameDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b banknameDo) Having(conds ...gen.Condition) IBanknameDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b banknameDo) Limit(limit int) IBanknameDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b banknameDo) Offset(offset int) IBanknameDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b banknameDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBanknameDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b banknameDo) Unscoped() IBanknameDo {
	return b.withDO(b.DO.Unscoped())
}

func (b banknameDo) Create(values ...*model.Bankname) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b banknameDo) CreateInBatches(values []*model.Bankname, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b banknameDo) Save(values ...*model.Bankname) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b banknameDo) First() (*model.Bankname, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bankname), nil
	}
}

func (b banknameDo) Take() (*model.Bankname, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bankname), nil
	}
}

func (b banknameDo) Last() (*model.Bankname, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bankname), nil
	}
}

func (b banknameDo) Find() ([]*model.Bankname, error) {
	result, err := b.DO.Find()
	return result.([]*model.Bankname), err
}

func (b banknameDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Bankname, err error) {
	buf := make([]*model.Bankname, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b banknameDo) FindInBatches(result *[]*model.Bankname, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b banknameDo) Attrs(attrs ...field.AssignExpr) IBanknameDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b banknameDo) Assign(attrs ...field.AssignExpr) IBanknameDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b banknameDo) Joins(fields ...field.RelationField) IBanknameDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b banknameDo) Preload(fields ...field.RelationField) IBanknameDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b banknameDo) FirstOrInit() (*model.Bankname, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bankname), nil
	}
}

func (b banknameDo) FirstOrCreate() (*model.Bankname, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bankname), nil
	}
}

func (b banknameDo) FindByPage(offset int, limit int) (result []*model.Bankname, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b banknameDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b banknameDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b banknameDo) Delete(models ...*model.Bankname) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *banknameDo) withDO(do gen.Dao) *banknameDo {
	b.DO = *do.(*gen.DO)
	return b
}
