// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fish

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newControlPool(db *gorm.DB, opts ...gen.DOOption) controlPool {
	_controlPool := controlPool{}

	_controlPool.controlPoolDo.UseDB(db, opts...)
	_controlPool.controlPoolDo.UseModel(&model.ControlPool{})

	tableName := _controlPool.controlPoolDo.TableName()
	_controlPool.ALL = field.NewAsterisk(tableName)
	_controlPool.ServeID = field.NewInt32(tableName, "serveId")
	_controlPool.Pool = field.NewInt32(tableName, "pool")
	_controlPool.Line = field.NewInt32(tableName, "line")

	_controlPool.fillFieldMap()

	return _controlPool
}

type controlPool struct {
	controlPoolDo

	ALL     field.Asterisk
	ServeID field.Int32
	Pool    field.Int32
	Line    field.Int32

	fieldMap map[string]field.Expr
}

func (c controlPool) Table(newTableName string) *controlPool {
	c.controlPoolDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c controlPool) As(alias string) *controlPool {
	c.controlPoolDo.DO = *(c.controlPoolDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *controlPool) updateTableName(table string) *controlPool {
	c.ALL = field.NewAsterisk(table)
	c.ServeID = field.NewInt32(table, "serveId")
	c.Pool = field.NewInt32(table, "pool")
	c.Line = field.NewInt32(table, "line")

	c.fillFieldMap()

	return c
}

func (c *controlPool) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *controlPool) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["serveId"] = c.ServeID
	c.fieldMap["pool"] = c.Pool
	c.fieldMap["line"] = c.Line
}

func (c controlPool) clone(db *gorm.DB) controlPool {
	c.controlPoolDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c controlPool) replaceDB(db *gorm.DB) controlPool {
	c.controlPoolDo.ReplaceDB(db)
	return c
}

type controlPoolDo struct{ gen.DO }

type IControlPoolDo interface {
	gen.SubQuery
	Debug() IControlPoolDo
	WithContext(ctx context.Context) IControlPoolDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IControlPoolDo
	WriteDB() IControlPoolDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IControlPoolDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IControlPoolDo
	Not(conds ...gen.Condition) IControlPoolDo
	Or(conds ...gen.Condition) IControlPoolDo
	Select(conds ...field.Expr) IControlPoolDo
	Where(conds ...gen.Condition) IControlPoolDo
	Order(conds ...field.Expr) IControlPoolDo
	Distinct(cols ...field.Expr) IControlPoolDo
	Omit(cols ...field.Expr) IControlPoolDo
	Join(table schema.Tabler, on ...field.Expr) IControlPoolDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IControlPoolDo
	RightJoin(table schema.Tabler, on ...field.Expr) IControlPoolDo
	Group(cols ...field.Expr) IControlPoolDo
	Having(conds ...gen.Condition) IControlPoolDo
	Limit(limit int) IControlPoolDo
	Offset(offset int) IControlPoolDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IControlPoolDo
	Unscoped() IControlPoolDo
	Create(values ...*model.ControlPool) error
	CreateInBatches(values []*model.ControlPool, batchSize int) error
	Save(values ...*model.ControlPool) error
	First() (*model.ControlPool, error)
	Take() (*model.ControlPool, error)
	Last() (*model.ControlPool, error)
	Find() ([]*model.ControlPool, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ControlPool, err error)
	FindInBatches(result *[]*model.ControlPool, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ControlPool) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IControlPoolDo
	Assign(attrs ...field.AssignExpr) IControlPoolDo
	Joins(fields ...field.RelationField) IControlPoolDo
	Preload(fields ...field.RelationField) IControlPoolDo
	FirstOrInit() (*model.ControlPool, error)
	FirstOrCreate() (*model.ControlPool, error)
	FindByPage(offset int, limit int) (result []*model.ControlPool, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IControlPoolDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c controlPoolDo) Debug() IControlPoolDo {
	return c.withDO(c.DO.Debug())
}

func (c controlPoolDo) WithContext(ctx context.Context) IControlPoolDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c controlPoolDo) ReadDB() IControlPoolDo {
	return c.Clauses(dbresolver.Read)
}

func (c controlPoolDo) WriteDB() IControlPoolDo {
	return c.Clauses(dbresolver.Write)
}

func (c controlPoolDo) Session(config *gorm.Session) IControlPoolDo {
	return c.withDO(c.DO.Session(config))
}

func (c controlPoolDo) Clauses(conds ...clause.Expression) IControlPoolDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c controlPoolDo) Returning(value interface{}, columns ...string) IControlPoolDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c controlPoolDo) Not(conds ...gen.Condition) IControlPoolDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c controlPoolDo) Or(conds ...gen.Condition) IControlPoolDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c controlPoolDo) Select(conds ...field.Expr) IControlPoolDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c controlPoolDo) Where(conds ...gen.Condition) IControlPoolDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c controlPoolDo) Order(conds ...field.Expr) IControlPoolDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c controlPoolDo) Distinct(cols ...field.Expr) IControlPoolDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c controlPoolDo) Omit(cols ...field.Expr) IControlPoolDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c controlPoolDo) Join(table schema.Tabler, on ...field.Expr) IControlPoolDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c controlPoolDo) LeftJoin(table schema.Tabler, on ...field.Expr) IControlPoolDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c controlPoolDo) RightJoin(table schema.Tabler, on ...field.Expr) IControlPoolDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c controlPoolDo) Group(cols ...field.Expr) IControlPoolDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c controlPoolDo) Having(conds ...gen.Condition) IControlPoolDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c controlPoolDo) Limit(limit int) IControlPoolDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c controlPoolDo) Offset(offset int) IControlPoolDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c controlPoolDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IControlPoolDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c controlPoolDo) Unscoped() IControlPoolDo {
	return c.withDO(c.DO.Unscoped())
}

func (c controlPoolDo) Create(values ...*model.ControlPool) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c controlPoolDo) CreateInBatches(values []*model.ControlPool, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c controlPoolDo) Save(values ...*model.ControlPool) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c controlPoolDo) First() (*model.ControlPool, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ControlPool), nil
	}
}

func (c controlPoolDo) Take() (*model.ControlPool, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ControlPool), nil
	}
}

func (c controlPoolDo) Last() (*model.ControlPool, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ControlPool), nil
	}
}

func (c controlPoolDo) Find() ([]*model.ControlPool, error) {
	result, err := c.DO.Find()
	return result.([]*model.ControlPool), err
}

func (c controlPoolDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ControlPool, err error) {
	buf := make([]*model.ControlPool, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c controlPoolDo) FindInBatches(result *[]*model.ControlPool, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c controlPoolDo) Attrs(attrs ...field.AssignExpr) IControlPoolDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c controlPoolDo) Assign(attrs ...field.AssignExpr) IControlPoolDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c controlPoolDo) Joins(fields ...field.RelationField) IControlPoolDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c controlPoolDo) Preload(fields ...field.RelationField) IControlPoolDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c controlPoolDo) FirstOrInit() (*model.ControlPool, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ControlPool), nil
	}
}

func (c controlPoolDo) FirstOrCreate() (*model.ControlPool, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ControlPool), nil
	}
}

func (c controlPoolDo) FindByPage(offset int, limit int) (result []*model.ControlPool, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c controlPoolDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c controlPoolDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c controlPoolDo) Delete(models ...*model.ControlPool) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *controlPoolDo) withDO(do gen.Dao) *controlPoolDo {
	c.DO = *do.(*gen.DO)
	return c
}
