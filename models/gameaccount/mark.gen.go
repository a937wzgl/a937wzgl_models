// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newMark(db *gorm.DB, opts ...gen.DOOption) mark {
	_mark := mark{}

	_mark.markDo.UseDB(db, opts...)
	_mark.markDo.UseModel(&model.Mark{})

	tableName := _mark.markDo.TableName()
	_mark.ALL = field.NewAsterisk(tableName)
	_mark.ID = field.NewInt64(tableName, "id")
	_mark.UserID = field.NewInt32(tableName, "userId")
	_mark.UseCoin = field.NewInt64(tableName, "useCoin")
	_mark.WinCoin = field.NewInt64(tableName, "winCoin")
	_mark.Tax = field.NewInt64(tableName, "tax")
	_mark.GameID = field.NewInt32(tableName, "gameId")
	_mark.ServerID = field.NewInt32(tableName, "serverId")
	_mark.BalanceTime = field.NewTime(tableName, "balanceTime")
	_mark.Mark = field.NewBool(tableName, "mark")

	_mark.fillFieldMap()

	return _mark
}

type mark struct {
	markDo

	ALL         field.Asterisk
	ID          field.Int64
	UserID      field.Int32
	UseCoin     field.Int64
	WinCoin     field.Int64
	Tax         field.Int64
	GameID      field.Int32
	ServerID    field.Int32
	BalanceTime field.Time
	Mark        field.Bool

	fieldMap map[string]field.Expr
}

func (m mark) Table(newTableName string) *mark {
	m.markDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mark) As(alias string) *mark {
	m.markDo.DO = *(m.markDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mark) updateTableName(table string) *mark {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.UserID = field.NewInt32(table, "userId")
	m.UseCoin = field.NewInt64(table, "useCoin")
	m.WinCoin = field.NewInt64(table, "winCoin")
	m.Tax = field.NewInt64(table, "tax")
	m.GameID = field.NewInt32(table, "gameId")
	m.ServerID = field.NewInt32(table, "serverId")
	m.BalanceTime = field.NewTime(table, "balanceTime")
	m.Mark = field.NewBool(table, "mark")

	m.fillFieldMap()

	return m
}

func (m *mark) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mark) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["id"] = m.ID
	m.fieldMap["userId"] = m.UserID
	m.fieldMap["useCoin"] = m.UseCoin
	m.fieldMap["winCoin"] = m.WinCoin
	m.fieldMap["tax"] = m.Tax
	m.fieldMap["gameId"] = m.GameID
	m.fieldMap["serverId"] = m.ServerID
	m.fieldMap["balanceTime"] = m.BalanceTime
	m.fieldMap["mark"] = m.Mark
}

func (m mark) clone(db *gorm.DB) mark {
	m.markDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mark) replaceDB(db *gorm.DB) mark {
	m.markDo.ReplaceDB(db)
	return m
}

type markDo struct{ gen.DO }

type IMarkDo interface {
	gen.SubQuery
	Debug() IMarkDo
	WithContext(ctx context.Context) IMarkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMarkDo
	WriteDB() IMarkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMarkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMarkDo
	Not(conds ...gen.Condition) IMarkDo
	Or(conds ...gen.Condition) IMarkDo
	Select(conds ...field.Expr) IMarkDo
	Where(conds ...gen.Condition) IMarkDo
	Order(conds ...field.Expr) IMarkDo
	Distinct(cols ...field.Expr) IMarkDo
	Omit(cols ...field.Expr) IMarkDo
	Join(table schema.Tabler, on ...field.Expr) IMarkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMarkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMarkDo
	Group(cols ...field.Expr) IMarkDo
	Having(conds ...gen.Condition) IMarkDo
	Limit(limit int) IMarkDo
	Offset(offset int) IMarkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMarkDo
	Unscoped() IMarkDo
	Create(values ...*model.Mark) error
	CreateInBatches(values []*model.Mark, batchSize int) error
	Save(values ...*model.Mark) error
	First() (*model.Mark, error)
	Take() (*model.Mark, error)
	Last() (*model.Mark, error)
	Find() ([]*model.Mark, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Mark, err error)
	FindInBatches(result *[]*model.Mark, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Mark) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMarkDo
	Assign(attrs ...field.AssignExpr) IMarkDo
	Joins(fields ...field.RelationField) IMarkDo
	Preload(fields ...field.RelationField) IMarkDo
	FirstOrInit() (*model.Mark, error)
	FirstOrCreate() (*model.Mark, error)
	FindByPage(offset int, limit int) (result []*model.Mark, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMarkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m markDo) Debug() IMarkDo {
	return m.withDO(m.DO.Debug())
}

func (m markDo) WithContext(ctx context.Context) IMarkDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m markDo) ReadDB() IMarkDo {
	return m.Clauses(dbresolver.Read)
}

func (m markDo) WriteDB() IMarkDo {
	return m.Clauses(dbresolver.Write)
}

func (m markDo) Session(config *gorm.Session) IMarkDo {
	return m.withDO(m.DO.Session(config))
}

func (m markDo) Clauses(conds ...clause.Expression) IMarkDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m markDo) Returning(value interface{}, columns ...string) IMarkDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m markDo) Not(conds ...gen.Condition) IMarkDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m markDo) Or(conds ...gen.Condition) IMarkDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m markDo) Select(conds ...field.Expr) IMarkDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m markDo) Where(conds ...gen.Condition) IMarkDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m markDo) Order(conds ...field.Expr) IMarkDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m markDo) Distinct(cols ...field.Expr) IMarkDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m markDo) Omit(cols ...field.Expr) IMarkDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m markDo) Join(table schema.Tabler, on ...field.Expr) IMarkDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m markDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMarkDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m markDo) RightJoin(table schema.Tabler, on ...field.Expr) IMarkDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m markDo) Group(cols ...field.Expr) IMarkDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m markDo) Having(conds ...gen.Condition) IMarkDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m markDo) Limit(limit int) IMarkDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m markDo) Offset(offset int) IMarkDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m markDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMarkDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m markDo) Unscoped() IMarkDo {
	return m.withDO(m.DO.Unscoped())
}

func (m markDo) Create(values ...*model.Mark) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m markDo) CreateInBatches(values []*model.Mark, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m markDo) Save(values ...*model.Mark) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m markDo) First() (*model.Mark, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mark), nil
	}
}

func (m markDo) Take() (*model.Mark, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mark), nil
	}
}

func (m markDo) Last() (*model.Mark, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mark), nil
	}
}

func (m markDo) Find() ([]*model.Mark, error) {
	result, err := m.DO.Find()
	return result.([]*model.Mark), err
}

func (m markDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Mark, err error) {
	buf := make([]*model.Mark, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m markDo) FindInBatches(result *[]*model.Mark, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m markDo) Attrs(attrs ...field.AssignExpr) IMarkDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m markDo) Assign(attrs ...field.AssignExpr) IMarkDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m markDo) Joins(fields ...field.RelationField) IMarkDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m markDo) Preload(fields ...field.RelationField) IMarkDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m markDo) FirstOrInit() (*model.Mark, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mark), nil
	}
}

func (m markDo) FirstOrCreate() (*model.Mark, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mark), nil
	}
}

func (m markDo) FindByPage(offset int, limit int) (result []*model.Mark, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m markDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m markDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m markDo) Delete(models ...*model.Mark) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *markDo) withDO(do gen.Dao) *markDo {
	m.DO = *do.(*gen.DO)
	return m
}
