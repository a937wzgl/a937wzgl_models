// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newPcdandan(db *gorm.DB, opts ...gen.DOOption) pcdandan {
	_pcdandan := pcdandan{}

	_pcdandan.pcdandanDo.UseDB(db, opts...)
	_pcdandan.pcdandanDo.UseModel(&model.Pcdandan{})

	tableName := _pcdandan.pcdandanDo.TableName()
	_pcdandan.ALL = field.NewAsterisk(tableName)
	_pcdandan.UserID = field.NewInt32(tableName, "userId")
	_pcdandan.PcdandanID = field.NewString(tableName, "pcdandanId")
	_pcdandan.Devid = field.NewString(tableName, "Devid")

	_pcdandan.fillFieldMap()

	return _pcdandan
}

type pcdandan struct {
	pcdandanDo

	ALL        field.Asterisk
	UserID     field.Int32
	PcdandanID field.String
	Devid      field.String

	fieldMap map[string]field.Expr
}

func (p pcdandan) Table(newTableName string) *pcdandan {
	p.pcdandanDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pcdandan) As(alias string) *pcdandan {
	p.pcdandanDo.DO = *(p.pcdandanDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pcdandan) updateTableName(table string) *pcdandan {
	p.ALL = field.NewAsterisk(table)
	p.UserID = field.NewInt32(table, "userId")
	p.PcdandanID = field.NewString(table, "pcdandanId")
	p.Devid = field.NewString(table, "Devid")

	p.fillFieldMap()

	return p
}

func (p *pcdandan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pcdandan) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["userId"] = p.UserID
	p.fieldMap["pcdandanId"] = p.PcdandanID
	p.fieldMap["Devid"] = p.Devid
}

func (p pcdandan) clone(db *gorm.DB) pcdandan {
	p.pcdandanDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pcdandan) replaceDB(db *gorm.DB) pcdandan {
	p.pcdandanDo.ReplaceDB(db)
	return p
}

type pcdandanDo struct{ gen.DO }

type IPcdandanDo interface {
	gen.SubQuery
	Debug() IPcdandanDo
	WithContext(ctx context.Context) IPcdandanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPcdandanDo
	WriteDB() IPcdandanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPcdandanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPcdandanDo
	Not(conds ...gen.Condition) IPcdandanDo
	Or(conds ...gen.Condition) IPcdandanDo
	Select(conds ...field.Expr) IPcdandanDo
	Where(conds ...gen.Condition) IPcdandanDo
	Order(conds ...field.Expr) IPcdandanDo
	Distinct(cols ...field.Expr) IPcdandanDo
	Omit(cols ...field.Expr) IPcdandanDo
	Join(table schema.Tabler, on ...field.Expr) IPcdandanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPcdandanDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPcdandanDo
	Group(cols ...field.Expr) IPcdandanDo
	Having(conds ...gen.Condition) IPcdandanDo
	Limit(limit int) IPcdandanDo
	Offset(offset int) IPcdandanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPcdandanDo
	Unscoped() IPcdandanDo
	Create(values ...*model.Pcdandan) error
	CreateInBatches(values []*model.Pcdandan, batchSize int) error
	Save(values ...*model.Pcdandan) error
	First() (*model.Pcdandan, error)
	Take() (*model.Pcdandan, error)
	Last() (*model.Pcdandan, error)
	Find() ([]*model.Pcdandan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Pcdandan, err error)
	FindInBatches(result *[]*model.Pcdandan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Pcdandan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPcdandanDo
	Assign(attrs ...field.AssignExpr) IPcdandanDo
	Joins(fields ...field.RelationField) IPcdandanDo
	Preload(fields ...field.RelationField) IPcdandanDo
	FirstOrInit() (*model.Pcdandan, error)
	FirstOrCreate() (*model.Pcdandan, error)
	FindByPage(offset int, limit int) (result []*model.Pcdandan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPcdandanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pcdandanDo) Debug() IPcdandanDo {
	return p.withDO(p.DO.Debug())
}

func (p pcdandanDo) WithContext(ctx context.Context) IPcdandanDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pcdandanDo) ReadDB() IPcdandanDo {
	return p.Clauses(dbresolver.Read)
}

func (p pcdandanDo) WriteDB() IPcdandanDo {
	return p.Clauses(dbresolver.Write)
}

func (p pcdandanDo) Session(config *gorm.Session) IPcdandanDo {
	return p.withDO(p.DO.Session(config))
}

func (p pcdandanDo) Clauses(conds ...clause.Expression) IPcdandanDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pcdandanDo) Returning(value interface{}, columns ...string) IPcdandanDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pcdandanDo) Not(conds ...gen.Condition) IPcdandanDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pcdandanDo) Or(conds ...gen.Condition) IPcdandanDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pcdandanDo) Select(conds ...field.Expr) IPcdandanDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pcdandanDo) Where(conds ...gen.Condition) IPcdandanDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pcdandanDo) Order(conds ...field.Expr) IPcdandanDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pcdandanDo) Distinct(cols ...field.Expr) IPcdandanDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pcdandanDo) Omit(cols ...field.Expr) IPcdandanDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pcdandanDo) Join(table schema.Tabler, on ...field.Expr) IPcdandanDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pcdandanDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPcdandanDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pcdandanDo) RightJoin(table schema.Tabler, on ...field.Expr) IPcdandanDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pcdandanDo) Group(cols ...field.Expr) IPcdandanDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pcdandanDo) Having(conds ...gen.Condition) IPcdandanDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pcdandanDo) Limit(limit int) IPcdandanDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pcdandanDo) Offset(offset int) IPcdandanDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pcdandanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPcdandanDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pcdandanDo) Unscoped() IPcdandanDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pcdandanDo) Create(values ...*model.Pcdandan) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pcdandanDo) CreateInBatches(values []*model.Pcdandan, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pcdandanDo) Save(values ...*model.Pcdandan) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pcdandanDo) First() (*model.Pcdandan, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pcdandan), nil
	}
}

func (p pcdandanDo) Take() (*model.Pcdandan, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pcdandan), nil
	}
}

func (p pcdandanDo) Last() (*model.Pcdandan, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pcdandan), nil
	}
}

func (p pcdandanDo) Find() ([]*model.Pcdandan, error) {
	result, err := p.DO.Find()
	return result.([]*model.Pcdandan), err
}

func (p pcdandanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Pcdandan, err error) {
	buf := make([]*model.Pcdandan, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pcdandanDo) FindInBatches(result *[]*model.Pcdandan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pcdandanDo) Attrs(attrs ...field.AssignExpr) IPcdandanDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pcdandanDo) Assign(attrs ...field.AssignExpr) IPcdandanDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pcdandanDo) Joins(fields ...field.RelationField) IPcdandanDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pcdandanDo) Preload(fields ...field.RelationField) IPcdandanDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pcdandanDo) FirstOrInit() (*model.Pcdandan, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pcdandan), nil
	}
}

func (p pcdandanDo) FirstOrCreate() (*model.Pcdandan, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pcdandan), nil
	}
}

func (p pcdandanDo) FindByPage(offset int, limit int) (result []*model.Pcdandan, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pcdandanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pcdandanDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pcdandanDo) Delete(models ...*model.Pcdandan) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pcdandanDo) withDO(do gen.Dao) *pcdandanDo {
	p.DO = *do.(*gen.DO)
	return p
}
