// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newGameGonggao(db *gorm.DB, opts ...gen.DOOption) gameGonggao {
	_gameGonggao := gameGonggao{}

	_gameGonggao.gameGonggaoDo.UseDB(db, opts...)
	_gameGonggao.gameGonggaoDo.UseModel(&model.GameGonggao{})

	tableName := _gameGonggao.gameGonggaoDo.TableName()
	_gameGonggao.ALL = field.NewAsterisk(tableName)
	_gameGonggao.ID = field.NewUint32(tableName, "id")
	_gameGonggao.Txt = field.NewString(tableName, "txt")
	_gameGonggao.Status = field.NewBool(tableName, "status")
	_gameGonggao.Createtime = field.NewString(tableName, "createtime")
	_gameGonggao.Updatetime = field.NewString(tableName, "updatetime")

	_gameGonggao.fillFieldMap()

	return _gameGonggao
}

type gameGonggao struct {
	gameGonggaoDo

	ALL        field.Asterisk
	ID         field.Uint32
	Txt        field.String
	Status     field.Bool // 0关闭 1显示
	Createtime field.String
	Updatetime field.String

	fieldMap map[string]field.Expr
}

func (g gameGonggao) Table(newTableName string) *gameGonggao {
	g.gameGonggaoDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameGonggao) As(alias string) *gameGonggao {
	g.gameGonggaoDo.DO = *(g.gameGonggaoDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameGonggao) updateTableName(table string) *gameGonggao {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint32(table, "id")
	g.Txt = field.NewString(table, "txt")
	g.Status = field.NewBool(table, "status")
	g.Createtime = field.NewString(table, "createtime")
	g.Updatetime = field.NewString(table, "updatetime")

	g.fillFieldMap()

	return g
}

func (g *gameGonggao) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameGonggao) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 5)
	g.fieldMap["id"] = g.ID
	g.fieldMap["txt"] = g.Txt
	g.fieldMap["status"] = g.Status
	g.fieldMap["createtime"] = g.Createtime
	g.fieldMap["updatetime"] = g.Updatetime
}

func (g gameGonggao) clone(db *gorm.DB) gameGonggao {
	g.gameGonggaoDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameGonggao) replaceDB(db *gorm.DB) gameGonggao {
	g.gameGonggaoDo.ReplaceDB(db)
	return g
}

type gameGonggaoDo struct{ gen.DO }

type IGameGonggaoDo interface {
	gen.SubQuery
	Debug() IGameGonggaoDo
	WithContext(ctx context.Context) IGameGonggaoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGameGonggaoDo
	WriteDB() IGameGonggaoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGameGonggaoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGameGonggaoDo
	Not(conds ...gen.Condition) IGameGonggaoDo
	Or(conds ...gen.Condition) IGameGonggaoDo
	Select(conds ...field.Expr) IGameGonggaoDo
	Where(conds ...gen.Condition) IGameGonggaoDo
	Order(conds ...field.Expr) IGameGonggaoDo
	Distinct(cols ...field.Expr) IGameGonggaoDo
	Omit(cols ...field.Expr) IGameGonggaoDo
	Join(table schema.Tabler, on ...field.Expr) IGameGonggaoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGameGonggaoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGameGonggaoDo
	Group(cols ...field.Expr) IGameGonggaoDo
	Having(conds ...gen.Condition) IGameGonggaoDo
	Limit(limit int) IGameGonggaoDo
	Offset(offset int) IGameGonggaoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGameGonggaoDo
	Unscoped() IGameGonggaoDo
	Create(values ...*model.GameGonggao) error
	CreateInBatches(values []*model.GameGonggao, batchSize int) error
	Save(values ...*model.GameGonggao) error
	First() (*model.GameGonggao, error)
	Take() (*model.GameGonggao, error)
	Last() (*model.GameGonggao, error)
	Find() ([]*model.GameGonggao, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameGonggao, err error)
	FindInBatches(result *[]*model.GameGonggao, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GameGonggao) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGameGonggaoDo
	Assign(attrs ...field.AssignExpr) IGameGonggaoDo
	Joins(fields ...field.RelationField) IGameGonggaoDo
	Preload(fields ...field.RelationField) IGameGonggaoDo
	FirstOrInit() (*model.GameGonggao, error)
	FirstOrCreate() (*model.GameGonggao, error)
	FindByPage(offset int, limit int) (result []*model.GameGonggao, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGameGonggaoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gameGonggaoDo) Debug() IGameGonggaoDo {
	return g.withDO(g.DO.Debug())
}

func (g gameGonggaoDo) WithContext(ctx context.Context) IGameGonggaoDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameGonggaoDo) ReadDB() IGameGonggaoDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameGonggaoDo) WriteDB() IGameGonggaoDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameGonggaoDo) Session(config *gorm.Session) IGameGonggaoDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameGonggaoDo) Clauses(conds ...clause.Expression) IGameGonggaoDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameGonggaoDo) Returning(value interface{}, columns ...string) IGameGonggaoDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameGonggaoDo) Not(conds ...gen.Condition) IGameGonggaoDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameGonggaoDo) Or(conds ...gen.Condition) IGameGonggaoDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameGonggaoDo) Select(conds ...field.Expr) IGameGonggaoDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameGonggaoDo) Where(conds ...gen.Condition) IGameGonggaoDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameGonggaoDo) Order(conds ...field.Expr) IGameGonggaoDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameGonggaoDo) Distinct(cols ...field.Expr) IGameGonggaoDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameGonggaoDo) Omit(cols ...field.Expr) IGameGonggaoDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameGonggaoDo) Join(table schema.Tabler, on ...field.Expr) IGameGonggaoDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameGonggaoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGameGonggaoDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameGonggaoDo) RightJoin(table schema.Tabler, on ...field.Expr) IGameGonggaoDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameGonggaoDo) Group(cols ...field.Expr) IGameGonggaoDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameGonggaoDo) Having(conds ...gen.Condition) IGameGonggaoDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameGonggaoDo) Limit(limit int) IGameGonggaoDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameGonggaoDo) Offset(offset int) IGameGonggaoDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameGonggaoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGameGonggaoDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameGonggaoDo) Unscoped() IGameGonggaoDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameGonggaoDo) Create(values ...*model.GameGonggao) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameGonggaoDo) CreateInBatches(values []*model.GameGonggao, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameGonggaoDo) Save(values ...*model.GameGonggao) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameGonggaoDo) First() (*model.GameGonggao, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameGonggao), nil
	}
}

func (g gameGonggaoDo) Take() (*model.GameGonggao, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameGonggao), nil
	}
}

func (g gameGonggaoDo) Last() (*model.GameGonggao, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameGonggao), nil
	}
}

func (g gameGonggaoDo) Find() ([]*model.GameGonggao, error) {
	result, err := g.DO.Find()
	return result.([]*model.GameGonggao), err
}

func (g gameGonggaoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameGonggao, err error) {
	buf := make([]*model.GameGonggao, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameGonggaoDo) FindInBatches(result *[]*model.GameGonggao, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameGonggaoDo) Attrs(attrs ...field.AssignExpr) IGameGonggaoDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameGonggaoDo) Assign(attrs ...field.AssignExpr) IGameGonggaoDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameGonggaoDo) Joins(fields ...field.RelationField) IGameGonggaoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameGonggaoDo) Preload(fields ...field.RelationField) IGameGonggaoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameGonggaoDo) FirstOrInit() (*model.GameGonggao, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameGonggao), nil
	}
}

func (g gameGonggaoDo) FirstOrCreate() (*model.GameGonggao, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameGonggao), nil
	}
}

func (g gameGonggaoDo) FindByPage(offset int, limit int) (result []*model.GameGonggao, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameGonggaoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameGonggaoDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameGonggaoDo) Delete(models ...*model.GameGonggao) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameGonggaoDo) withDO(do gen.Dao) *gameGonggaoDo {
	g.DO = *do.(*gen.DO)
	return g
}
