// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newUserAdmin(db *gorm.DB, opts ...gen.DOOption) userAdmin {
	_userAdmin := userAdmin{}

	_userAdmin.userAdminDo.UseDB(db, opts...)
	_userAdmin.userAdminDo.UseModel(&model.UserAdmin{})

	tableName := _userAdmin.userAdminDo.TableName()
	_userAdmin.ALL = field.NewAsterisk(tableName)
	_userAdmin.ID = field.NewInt32(tableName, "id")
	_userAdmin.User = field.NewString(tableName, "user")
	_userAdmin.Password = field.NewString(tableName, "password")
	_userAdmin.IP = field.NewString(tableName, "ip")
	_userAdmin.Time = field.NewString(tableName, "time")
	_userAdmin.Userflag = field.NewInt32(tableName, "userflag")

	_userAdmin.fillFieldMap()

	return _userAdmin
}

type userAdmin struct {
	userAdminDo

	ALL      field.Asterisk
	ID       field.Int32
	User     field.String
	Password field.String
	IP       field.String
	Time     field.String
	Userflag field.Int32

	fieldMap map[string]field.Expr
}

func (u userAdmin) Table(newTableName string) *userAdmin {
	u.userAdminDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userAdmin) As(alias string) *userAdmin {
	u.userAdminDo.DO = *(u.userAdminDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userAdmin) updateTableName(table string) *userAdmin {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.User = field.NewString(table, "user")
	u.Password = field.NewString(table, "password")
	u.IP = field.NewString(table, "ip")
	u.Time = field.NewString(table, "time")
	u.Userflag = field.NewInt32(table, "userflag")

	u.fillFieldMap()

	return u
}

func (u *userAdmin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userAdmin) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user"] = u.User
	u.fieldMap["password"] = u.Password
	u.fieldMap["ip"] = u.IP
	u.fieldMap["time"] = u.Time
	u.fieldMap["userflag"] = u.Userflag
}

func (u userAdmin) clone(db *gorm.DB) userAdmin {
	u.userAdminDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userAdmin) replaceDB(db *gorm.DB) userAdmin {
	u.userAdminDo.ReplaceDB(db)
	return u
}

type userAdminDo struct{ gen.DO }

type IUserAdminDo interface {
	gen.SubQuery
	Debug() IUserAdminDo
	WithContext(ctx context.Context) IUserAdminDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserAdminDo
	WriteDB() IUserAdminDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserAdminDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserAdminDo
	Not(conds ...gen.Condition) IUserAdminDo
	Or(conds ...gen.Condition) IUserAdminDo
	Select(conds ...field.Expr) IUserAdminDo
	Where(conds ...gen.Condition) IUserAdminDo
	Order(conds ...field.Expr) IUserAdminDo
	Distinct(cols ...field.Expr) IUserAdminDo
	Omit(cols ...field.Expr) IUserAdminDo
	Join(table schema.Tabler, on ...field.Expr) IUserAdminDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserAdminDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserAdminDo
	Group(cols ...field.Expr) IUserAdminDo
	Having(conds ...gen.Condition) IUserAdminDo
	Limit(limit int) IUserAdminDo
	Offset(offset int) IUserAdminDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAdminDo
	Unscoped() IUserAdminDo
	Create(values ...*model.UserAdmin) error
	CreateInBatches(values []*model.UserAdmin, batchSize int) error
	Save(values ...*model.UserAdmin) error
	First() (*model.UserAdmin, error)
	Take() (*model.UserAdmin, error)
	Last() (*model.UserAdmin, error)
	Find() ([]*model.UserAdmin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAdmin, err error)
	FindInBatches(result *[]*model.UserAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserAdmin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserAdminDo
	Assign(attrs ...field.AssignExpr) IUserAdminDo
	Joins(fields ...field.RelationField) IUserAdminDo
	Preload(fields ...field.RelationField) IUserAdminDo
	FirstOrInit() (*model.UserAdmin, error)
	FirstOrCreate() (*model.UserAdmin, error)
	FindByPage(offset int, limit int) (result []*model.UserAdmin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserAdminDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userAdminDo) Debug() IUserAdminDo {
	return u.withDO(u.DO.Debug())
}

func (u userAdminDo) WithContext(ctx context.Context) IUserAdminDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userAdminDo) ReadDB() IUserAdminDo {
	return u.Clauses(dbresolver.Read)
}

func (u userAdminDo) WriteDB() IUserAdminDo {
	return u.Clauses(dbresolver.Write)
}

func (u userAdminDo) Session(config *gorm.Session) IUserAdminDo {
	return u.withDO(u.DO.Session(config))
}

func (u userAdminDo) Clauses(conds ...clause.Expression) IUserAdminDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userAdminDo) Returning(value interface{}, columns ...string) IUserAdminDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userAdminDo) Not(conds ...gen.Condition) IUserAdminDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userAdminDo) Or(conds ...gen.Condition) IUserAdminDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userAdminDo) Select(conds ...field.Expr) IUserAdminDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userAdminDo) Where(conds ...gen.Condition) IUserAdminDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userAdminDo) Order(conds ...field.Expr) IUserAdminDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userAdminDo) Distinct(cols ...field.Expr) IUserAdminDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userAdminDo) Omit(cols ...field.Expr) IUserAdminDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userAdminDo) Join(table schema.Tabler, on ...field.Expr) IUserAdminDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userAdminDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserAdminDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userAdminDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserAdminDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userAdminDo) Group(cols ...field.Expr) IUserAdminDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userAdminDo) Having(conds ...gen.Condition) IUserAdminDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userAdminDo) Limit(limit int) IUserAdminDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userAdminDo) Offset(offset int) IUserAdminDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userAdminDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAdminDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userAdminDo) Unscoped() IUserAdminDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userAdminDo) Create(values ...*model.UserAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userAdminDo) CreateInBatches(values []*model.UserAdmin, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userAdminDo) Save(values ...*model.UserAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userAdminDo) First() (*model.UserAdmin, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAdmin), nil
	}
}

func (u userAdminDo) Take() (*model.UserAdmin, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAdmin), nil
	}
}

func (u userAdminDo) Last() (*model.UserAdmin, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAdmin), nil
	}
}

func (u userAdminDo) Find() ([]*model.UserAdmin, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserAdmin), err
}

func (u userAdminDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAdmin, err error) {
	buf := make([]*model.UserAdmin, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userAdminDo) FindInBatches(result *[]*model.UserAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userAdminDo) Attrs(attrs ...field.AssignExpr) IUserAdminDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userAdminDo) Assign(attrs ...field.AssignExpr) IUserAdminDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userAdminDo) Joins(fields ...field.RelationField) IUserAdminDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userAdminDo) Preload(fields ...field.RelationField) IUserAdminDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userAdminDo) FirstOrInit() (*model.UserAdmin, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAdmin), nil
	}
}

func (u userAdminDo) FirstOrCreate() (*model.UserAdmin, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAdmin), nil
	}
}

func (u userAdminDo) FindByPage(offset int, limit int) (result []*model.UserAdmin, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userAdminDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userAdminDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userAdminDo) Delete(models ...*model.UserAdmin) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userAdminDo) withDO(do gen.Dao) *userAdminDo {
	u.DO = *do.(*gen.DO)
	return u
}
