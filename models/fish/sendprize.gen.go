// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fish

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newSendprize(db *gorm.DB, opts ...gen.DOOption) sendprize {
	_sendprize := sendprize{}

	_sendprize.sendprizeDo.UseDB(db, opts...)
	_sendprize.sendprizeDo.UseModel(&model.Sendprize{})

	tableName := _sendprize.sendprizeDo.TableName()
	_sendprize.ALL = field.NewAsterisk(tableName)
	_sendprize.Idx = field.NewInt32(tableName, "idx")
	_sendprize.Propid = field.NewUint32(tableName, "propid")
	_sendprize.Propcount = field.NewUint32(tableName, "propcount")
	_sendprize.Score = field.NewUint32(tableName, "score")

	_sendprize.fillFieldMap()

	return _sendprize
}

type sendprize struct {
	sendprizeDo

	ALL       field.Asterisk
	Idx       field.Int32
	Propid    field.Uint32
	Propcount field.Uint32
	Score     field.Uint32

	fieldMap map[string]field.Expr
}

func (s sendprize) Table(newTableName string) *sendprize {
	s.sendprizeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sendprize) As(alias string) *sendprize {
	s.sendprizeDo.DO = *(s.sendprizeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sendprize) updateTableName(table string) *sendprize {
	s.ALL = field.NewAsterisk(table)
	s.Idx = field.NewInt32(table, "idx")
	s.Propid = field.NewUint32(table, "propid")
	s.Propcount = field.NewUint32(table, "propcount")
	s.Score = field.NewUint32(table, "score")

	s.fillFieldMap()

	return s
}

func (s *sendprize) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sendprize) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["idx"] = s.Idx
	s.fieldMap["propid"] = s.Propid
	s.fieldMap["propcount"] = s.Propcount
	s.fieldMap["score"] = s.Score
}

func (s sendprize) clone(db *gorm.DB) sendprize {
	s.sendprizeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sendprize) replaceDB(db *gorm.DB) sendprize {
	s.sendprizeDo.ReplaceDB(db)
	return s
}

type sendprizeDo struct{ gen.DO }

type ISendprizeDo interface {
	gen.SubQuery
	Debug() ISendprizeDo
	WithContext(ctx context.Context) ISendprizeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISendprizeDo
	WriteDB() ISendprizeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISendprizeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISendprizeDo
	Not(conds ...gen.Condition) ISendprizeDo
	Or(conds ...gen.Condition) ISendprizeDo
	Select(conds ...field.Expr) ISendprizeDo
	Where(conds ...gen.Condition) ISendprizeDo
	Order(conds ...field.Expr) ISendprizeDo
	Distinct(cols ...field.Expr) ISendprizeDo
	Omit(cols ...field.Expr) ISendprizeDo
	Join(table schema.Tabler, on ...field.Expr) ISendprizeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISendprizeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISendprizeDo
	Group(cols ...field.Expr) ISendprizeDo
	Having(conds ...gen.Condition) ISendprizeDo
	Limit(limit int) ISendprizeDo
	Offset(offset int) ISendprizeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISendprizeDo
	Unscoped() ISendprizeDo
	Create(values ...*model.Sendprize) error
	CreateInBatches(values []*model.Sendprize, batchSize int) error
	Save(values ...*model.Sendprize) error
	First() (*model.Sendprize, error)
	Take() (*model.Sendprize, error)
	Last() (*model.Sendprize, error)
	Find() ([]*model.Sendprize, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sendprize, err error)
	FindInBatches(result *[]*model.Sendprize, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sendprize) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISendprizeDo
	Assign(attrs ...field.AssignExpr) ISendprizeDo
	Joins(fields ...field.RelationField) ISendprizeDo
	Preload(fields ...field.RelationField) ISendprizeDo
	FirstOrInit() (*model.Sendprize, error)
	FirstOrCreate() (*model.Sendprize, error)
	FindByPage(offset int, limit int) (result []*model.Sendprize, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISendprizeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sendprizeDo) Debug() ISendprizeDo {
	return s.withDO(s.DO.Debug())
}

func (s sendprizeDo) WithContext(ctx context.Context) ISendprizeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sendprizeDo) ReadDB() ISendprizeDo {
	return s.Clauses(dbresolver.Read)
}

func (s sendprizeDo) WriteDB() ISendprizeDo {
	return s.Clauses(dbresolver.Write)
}

func (s sendprizeDo) Session(config *gorm.Session) ISendprizeDo {
	return s.withDO(s.DO.Session(config))
}

func (s sendprizeDo) Clauses(conds ...clause.Expression) ISendprizeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sendprizeDo) Returning(value interface{}, columns ...string) ISendprizeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sendprizeDo) Not(conds ...gen.Condition) ISendprizeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sendprizeDo) Or(conds ...gen.Condition) ISendprizeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sendprizeDo) Select(conds ...field.Expr) ISendprizeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sendprizeDo) Where(conds ...gen.Condition) ISendprizeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sendprizeDo) Order(conds ...field.Expr) ISendprizeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sendprizeDo) Distinct(cols ...field.Expr) ISendprizeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sendprizeDo) Omit(cols ...field.Expr) ISendprizeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sendprizeDo) Join(table schema.Tabler, on ...field.Expr) ISendprizeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sendprizeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISendprizeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sendprizeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISendprizeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sendprizeDo) Group(cols ...field.Expr) ISendprizeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sendprizeDo) Having(conds ...gen.Condition) ISendprizeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sendprizeDo) Limit(limit int) ISendprizeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sendprizeDo) Offset(offset int) ISendprizeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sendprizeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISendprizeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sendprizeDo) Unscoped() ISendprizeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sendprizeDo) Create(values ...*model.Sendprize) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sendprizeDo) CreateInBatches(values []*model.Sendprize, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sendprizeDo) Save(values ...*model.Sendprize) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sendprizeDo) First() (*model.Sendprize, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sendprize), nil
	}
}

func (s sendprizeDo) Take() (*model.Sendprize, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sendprize), nil
	}
}

func (s sendprizeDo) Last() (*model.Sendprize, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sendprize), nil
	}
}

func (s sendprizeDo) Find() ([]*model.Sendprize, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sendprize), err
}

func (s sendprizeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sendprize, err error) {
	buf := make([]*model.Sendprize, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sendprizeDo) FindInBatches(result *[]*model.Sendprize, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sendprizeDo) Attrs(attrs ...field.AssignExpr) ISendprizeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sendprizeDo) Assign(attrs ...field.AssignExpr) ISendprizeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sendprizeDo) Joins(fields ...field.RelationField) ISendprizeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sendprizeDo) Preload(fields ...field.RelationField) ISendprizeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sendprizeDo) FirstOrInit() (*model.Sendprize, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sendprize), nil
	}
}

func (s sendprizeDo) FirstOrCreate() (*model.Sendprize, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sendprize), nil
	}
}

func (s sendprizeDo) FindByPage(offset int, limit int) (result []*model.Sendprize, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sendprizeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sendprizeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sendprizeDo) Delete(models ...*model.Sendprize) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sendprizeDo) withDO(do gen.Dao) *sendprizeDo {
	s.DO = *do.(*gen.DO)
	return s
}
