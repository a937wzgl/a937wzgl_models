// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package landlords

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLogTemp(db *gorm.DB, opts ...gen.DOOption) logTemp {
	_logTemp := logTemp{}

	_logTemp.logTempDo.UseDB(db, opts...)
	_logTemp.logTempDo.UseModel(&model.LogTemp{})

	tableName := _logTemp.logTempDo.TableName()
	_logTemp.ALL = field.NewAsterisk(tableName)
	_logTemp.ID = field.NewUint32(tableName, "id")
	_logTemp.UID = field.NewUint32(tableName, "uid")
	_logTemp.NickName = field.NewString(tableName, "nick_name")
	_logTemp.HeadURL = field.NewString(tableName, "head_url")
	_logTemp.Createtime = field.NewString(tableName, "createtime")
	_logTemp.Isdizhu = field.NewBool(tableName, "isdizhu")
	_logTemp.Iswin = field.NewBool(tableName, "iswin")
	_logTemp.GameDict = field.NewString(tableName, "game_dict")

	_logTemp.fillFieldMap()

	return _logTemp
}

type logTemp struct {
	logTempDo

	ALL        field.Asterisk
	ID         field.Uint32
	UID        field.Uint32
	NickName   field.String
	HeadURL    field.String
	Createtime field.String
	Isdizhu    field.Bool
	Iswin      field.Bool
	GameDict   field.String

	fieldMap map[string]field.Expr
}

func (l logTemp) Table(newTableName string) *logTemp {
	l.logTempDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logTemp) As(alias string) *logTemp {
	l.logTempDo.DO = *(l.logTempDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logTemp) updateTableName(table string) *logTemp {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint32(table, "id")
	l.UID = field.NewUint32(table, "uid")
	l.NickName = field.NewString(table, "nick_name")
	l.HeadURL = field.NewString(table, "head_url")
	l.Createtime = field.NewString(table, "createtime")
	l.Isdizhu = field.NewBool(table, "isdizhu")
	l.Iswin = field.NewBool(table, "iswin")
	l.GameDict = field.NewString(table, "game_dict")

	l.fillFieldMap()

	return l
}

func (l *logTemp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logTemp) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 8)
	l.fieldMap["id"] = l.ID
	l.fieldMap["uid"] = l.UID
	l.fieldMap["nick_name"] = l.NickName
	l.fieldMap["head_url"] = l.HeadURL
	l.fieldMap["createtime"] = l.Createtime
	l.fieldMap["isdizhu"] = l.Isdizhu
	l.fieldMap["iswin"] = l.Iswin
	l.fieldMap["game_dict"] = l.GameDict
}

func (l logTemp) clone(db *gorm.DB) logTemp {
	l.logTempDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logTemp) replaceDB(db *gorm.DB) logTemp {
	l.logTempDo.ReplaceDB(db)
	return l
}

type logTempDo struct{ gen.DO }

type ILogTempDo interface {
	gen.SubQuery
	Debug() ILogTempDo
	WithContext(ctx context.Context) ILogTempDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILogTempDo
	WriteDB() ILogTempDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILogTempDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILogTempDo
	Not(conds ...gen.Condition) ILogTempDo
	Or(conds ...gen.Condition) ILogTempDo
	Select(conds ...field.Expr) ILogTempDo
	Where(conds ...gen.Condition) ILogTempDo
	Order(conds ...field.Expr) ILogTempDo
	Distinct(cols ...field.Expr) ILogTempDo
	Omit(cols ...field.Expr) ILogTempDo
	Join(table schema.Tabler, on ...field.Expr) ILogTempDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILogTempDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILogTempDo
	Group(cols ...field.Expr) ILogTempDo
	Having(conds ...gen.Condition) ILogTempDo
	Limit(limit int) ILogTempDo
	Offset(offset int) ILogTempDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILogTempDo
	Unscoped() ILogTempDo
	Create(values ...*model.LogTemp) error
	CreateInBatches(values []*model.LogTemp, batchSize int) error
	Save(values ...*model.LogTemp) error
	First() (*model.LogTemp, error)
	Take() (*model.LogTemp, error)
	Last() (*model.LogTemp, error)
	Find() ([]*model.LogTemp, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogTemp, err error)
	FindInBatches(result *[]*model.LogTemp, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LogTemp) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILogTempDo
	Assign(attrs ...field.AssignExpr) ILogTempDo
	Joins(fields ...field.RelationField) ILogTempDo
	Preload(fields ...field.RelationField) ILogTempDo
	FirstOrInit() (*model.LogTemp, error)
	FirstOrCreate() (*model.LogTemp, error)
	FindByPage(offset int, limit int) (result []*model.LogTemp, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILogTempDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l logTempDo) Debug() ILogTempDo {
	return l.withDO(l.DO.Debug())
}

func (l logTempDo) WithContext(ctx context.Context) ILogTempDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logTempDo) ReadDB() ILogTempDo {
	return l.Clauses(dbresolver.Read)
}

func (l logTempDo) WriteDB() ILogTempDo {
	return l.Clauses(dbresolver.Write)
}

func (l logTempDo) Session(config *gorm.Session) ILogTempDo {
	return l.withDO(l.DO.Session(config))
}

func (l logTempDo) Clauses(conds ...clause.Expression) ILogTempDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logTempDo) Returning(value interface{}, columns ...string) ILogTempDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logTempDo) Not(conds ...gen.Condition) ILogTempDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logTempDo) Or(conds ...gen.Condition) ILogTempDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logTempDo) Select(conds ...field.Expr) ILogTempDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logTempDo) Where(conds ...gen.Condition) ILogTempDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logTempDo) Order(conds ...field.Expr) ILogTempDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logTempDo) Distinct(cols ...field.Expr) ILogTempDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logTempDo) Omit(cols ...field.Expr) ILogTempDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logTempDo) Join(table schema.Tabler, on ...field.Expr) ILogTempDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logTempDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILogTempDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logTempDo) RightJoin(table schema.Tabler, on ...field.Expr) ILogTempDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logTempDo) Group(cols ...field.Expr) ILogTempDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logTempDo) Having(conds ...gen.Condition) ILogTempDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logTempDo) Limit(limit int) ILogTempDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logTempDo) Offset(offset int) ILogTempDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logTempDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILogTempDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logTempDo) Unscoped() ILogTempDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logTempDo) Create(values ...*model.LogTemp) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logTempDo) CreateInBatches(values []*model.LogTemp, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logTempDo) Save(values ...*model.LogTemp) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logTempDo) First() (*model.LogTemp, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogTemp), nil
	}
}

func (l logTempDo) Take() (*model.LogTemp, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogTemp), nil
	}
}

func (l logTempDo) Last() (*model.LogTemp, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogTemp), nil
	}
}

func (l logTempDo) Find() ([]*model.LogTemp, error) {
	result, err := l.DO.Find()
	return result.([]*model.LogTemp), err
}

func (l logTempDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogTemp, err error) {
	buf := make([]*model.LogTemp, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logTempDo) FindInBatches(result *[]*model.LogTemp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logTempDo) Attrs(attrs ...field.AssignExpr) ILogTempDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logTempDo) Assign(attrs ...field.AssignExpr) ILogTempDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logTempDo) Joins(fields ...field.RelationField) ILogTempDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logTempDo) Preload(fields ...field.RelationField) ILogTempDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logTempDo) FirstOrInit() (*model.LogTemp, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogTemp), nil
	}
}

func (l logTempDo) FirstOrCreate() (*model.LogTemp, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogTemp), nil
	}
}

func (l logTempDo) FindByPage(offset int, limit int) (result []*model.LogTemp, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logTempDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logTempDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logTempDo) Delete(models ...*model.LogTemp) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logTempDo) withDO(do gen.Dao) *logTempDo {
	l.DO = *do.(*gen.DO)
	return l
}
