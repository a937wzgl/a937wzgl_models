// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package game

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newTGamesArchive(db *gorm.DB, opts ...gen.DOOption) tGamesArchive {
	_tGamesArchive := tGamesArchive{}

	_tGamesArchive.tGamesArchiveDo.UseDB(db, opts...)
	_tGamesArchive.tGamesArchiveDo.UseModel(&model.TGamesArchive{})

	tableName := _tGamesArchive.tGamesArchiveDo.TableName()
	_tGamesArchive.ALL = field.NewAsterisk(tableName)
	_tGamesArchive.RoomUUID = field.NewString(tableName, "room_uuid")
	_tGamesArchive.GameIndex = field.NewInt32(tableName, "game_index")
	_tGamesArchive.BaseInfo = field.NewString(tableName, "base_info")
	_tGamesArchive.CreateTime = field.NewInt32(tableName, "create_time")
	_tGamesArchive.Snapshots = field.NewString(tableName, "snapshots")
	_tGamesArchive.ActionRecords = field.NewString(tableName, "action_records")
	_tGamesArchive.Result = field.NewString(tableName, "result")

	_tGamesArchive.fillFieldMap()

	return _tGamesArchive
}

type tGamesArchive struct {
	tGamesArchiveDo

	ALL           field.Asterisk
	RoomUUID      field.String
	GameIndex     field.Int32
	BaseInfo      field.String
	CreateTime    field.Int32
	Snapshots     field.String
	ActionRecords field.String
	Result        field.String

	fieldMap map[string]field.Expr
}

func (t tGamesArchive) Table(newTableName string) *tGamesArchive {
	t.tGamesArchiveDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tGamesArchive) As(alias string) *tGamesArchive {
	t.tGamesArchiveDo.DO = *(t.tGamesArchiveDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tGamesArchive) updateTableName(table string) *tGamesArchive {
	t.ALL = field.NewAsterisk(table)
	t.RoomUUID = field.NewString(table, "room_uuid")
	t.GameIndex = field.NewInt32(table, "game_index")
	t.BaseInfo = field.NewString(table, "base_info")
	t.CreateTime = field.NewInt32(table, "create_time")
	t.Snapshots = field.NewString(table, "snapshots")
	t.ActionRecords = field.NewString(table, "action_records")
	t.Result = field.NewString(table, "result")

	t.fillFieldMap()

	return t
}

func (t *tGamesArchive) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tGamesArchive) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["room_uuid"] = t.RoomUUID
	t.fieldMap["game_index"] = t.GameIndex
	t.fieldMap["base_info"] = t.BaseInfo
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["snapshots"] = t.Snapshots
	t.fieldMap["action_records"] = t.ActionRecords
	t.fieldMap["result"] = t.Result
}

func (t tGamesArchive) clone(db *gorm.DB) tGamesArchive {
	t.tGamesArchiveDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tGamesArchive) replaceDB(db *gorm.DB) tGamesArchive {
	t.tGamesArchiveDo.ReplaceDB(db)
	return t
}

type tGamesArchiveDo struct{ gen.DO }

type ITGamesArchiveDo interface {
	gen.SubQuery
	Debug() ITGamesArchiveDo
	WithContext(ctx context.Context) ITGamesArchiveDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITGamesArchiveDo
	WriteDB() ITGamesArchiveDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITGamesArchiveDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITGamesArchiveDo
	Not(conds ...gen.Condition) ITGamesArchiveDo
	Or(conds ...gen.Condition) ITGamesArchiveDo
	Select(conds ...field.Expr) ITGamesArchiveDo
	Where(conds ...gen.Condition) ITGamesArchiveDo
	Order(conds ...field.Expr) ITGamesArchiveDo
	Distinct(cols ...field.Expr) ITGamesArchiveDo
	Omit(cols ...field.Expr) ITGamesArchiveDo
	Join(table schema.Tabler, on ...field.Expr) ITGamesArchiveDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITGamesArchiveDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITGamesArchiveDo
	Group(cols ...field.Expr) ITGamesArchiveDo
	Having(conds ...gen.Condition) ITGamesArchiveDo
	Limit(limit int) ITGamesArchiveDo
	Offset(offset int) ITGamesArchiveDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITGamesArchiveDo
	Unscoped() ITGamesArchiveDo
	Create(values ...*model.TGamesArchive) error
	CreateInBatches(values []*model.TGamesArchive, batchSize int) error
	Save(values ...*model.TGamesArchive) error
	First() (*model.TGamesArchive, error)
	Take() (*model.TGamesArchive, error)
	Last() (*model.TGamesArchive, error)
	Find() ([]*model.TGamesArchive, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TGamesArchive, err error)
	FindInBatches(result *[]*model.TGamesArchive, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TGamesArchive) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITGamesArchiveDo
	Assign(attrs ...field.AssignExpr) ITGamesArchiveDo
	Joins(fields ...field.RelationField) ITGamesArchiveDo
	Preload(fields ...field.RelationField) ITGamesArchiveDo
	FirstOrInit() (*model.TGamesArchive, error)
	FirstOrCreate() (*model.TGamesArchive, error)
	FindByPage(offset int, limit int) (result []*model.TGamesArchive, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITGamesArchiveDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tGamesArchiveDo) Debug() ITGamesArchiveDo {
	return t.withDO(t.DO.Debug())
}

func (t tGamesArchiveDo) WithContext(ctx context.Context) ITGamesArchiveDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tGamesArchiveDo) ReadDB() ITGamesArchiveDo {
	return t.Clauses(dbresolver.Read)
}

func (t tGamesArchiveDo) WriteDB() ITGamesArchiveDo {
	return t.Clauses(dbresolver.Write)
}

func (t tGamesArchiveDo) Session(config *gorm.Session) ITGamesArchiveDo {
	return t.withDO(t.DO.Session(config))
}

func (t tGamesArchiveDo) Clauses(conds ...clause.Expression) ITGamesArchiveDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tGamesArchiveDo) Returning(value interface{}, columns ...string) ITGamesArchiveDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tGamesArchiveDo) Not(conds ...gen.Condition) ITGamesArchiveDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tGamesArchiveDo) Or(conds ...gen.Condition) ITGamesArchiveDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tGamesArchiveDo) Select(conds ...field.Expr) ITGamesArchiveDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tGamesArchiveDo) Where(conds ...gen.Condition) ITGamesArchiveDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tGamesArchiveDo) Order(conds ...field.Expr) ITGamesArchiveDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tGamesArchiveDo) Distinct(cols ...field.Expr) ITGamesArchiveDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tGamesArchiveDo) Omit(cols ...field.Expr) ITGamesArchiveDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tGamesArchiveDo) Join(table schema.Tabler, on ...field.Expr) ITGamesArchiveDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tGamesArchiveDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITGamesArchiveDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tGamesArchiveDo) RightJoin(table schema.Tabler, on ...field.Expr) ITGamesArchiveDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tGamesArchiveDo) Group(cols ...field.Expr) ITGamesArchiveDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tGamesArchiveDo) Having(conds ...gen.Condition) ITGamesArchiveDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tGamesArchiveDo) Limit(limit int) ITGamesArchiveDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tGamesArchiveDo) Offset(offset int) ITGamesArchiveDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tGamesArchiveDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITGamesArchiveDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tGamesArchiveDo) Unscoped() ITGamesArchiveDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tGamesArchiveDo) Create(values ...*model.TGamesArchive) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tGamesArchiveDo) CreateInBatches(values []*model.TGamesArchive, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tGamesArchiveDo) Save(values ...*model.TGamesArchive) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tGamesArchiveDo) First() (*model.TGamesArchive, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGamesArchive), nil
	}
}

func (t tGamesArchiveDo) Take() (*model.TGamesArchive, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGamesArchive), nil
	}
}

func (t tGamesArchiveDo) Last() (*model.TGamesArchive, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGamesArchive), nil
	}
}

func (t tGamesArchiveDo) Find() ([]*model.TGamesArchive, error) {
	result, err := t.DO.Find()
	return result.([]*model.TGamesArchive), err
}

func (t tGamesArchiveDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TGamesArchive, err error) {
	buf := make([]*model.TGamesArchive, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tGamesArchiveDo) FindInBatches(result *[]*model.TGamesArchive, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tGamesArchiveDo) Attrs(attrs ...field.AssignExpr) ITGamesArchiveDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tGamesArchiveDo) Assign(attrs ...field.AssignExpr) ITGamesArchiveDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tGamesArchiveDo) Joins(fields ...field.RelationField) ITGamesArchiveDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tGamesArchiveDo) Preload(fields ...field.RelationField) ITGamesArchiveDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tGamesArchiveDo) FirstOrInit() (*model.TGamesArchive, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGamesArchive), nil
	}
}

func (t tGamesArchiveDo) FirstOrCreate() (*model.TGamesArchive, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGamesArchive), nil
	}
}

func (t tGamesArchiveDo) FindByPage(offset int, limit int) (result []*model.TGamesArchive, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tGamesArchiveDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tGamesArchiveDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tGamesArchiveDo) Delete(models ...*model.TGamesArchive) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tGamesArchiveDo) withDO(do gen.Dao) *tGamesArchiveDo {
	t.DO = *do.(*gen.DO)
	return t
}
