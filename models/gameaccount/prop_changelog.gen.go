// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newPropChangelog(db *gorm.DB, opts ...gen.DOOption) propChangelog {
	_propChangelog := propChangelog{}

	_propChangelog.propChangelogDo.UseDB(db, opts...)
	_propChangelog.propChangelogDo.UseModel(&model.PropChangelog{})

	tableName := _propChangelog.propChangelogDo.TableName()
	_propChangelog.ALL = field.NewAsterisk(tableName)
	_propChangelog.Userid = field.NewInt32(tableName, "userid")
	_propChangelog.Propid = field.NewInt32(tableName, "propid")
	_propChangelog.ChangeBefore = field.NewUint32(tableName, "change_before")
	_propChangelog.ChangeCount = field.NewInt32(tableName, "change_count")
	_propChangelog.ChangeAfter = field.NewUint32(tableName, "change_after")
	_propChangelog.InsertTime = field.NewTime(tableName, "insertTime")
	_propChangelog.Gameid = field.NewUint32(tableName, "gameid")
	_propChangelog.Codeid = field.NewUint32(tableName, "codeid")

	_propChangelog.fillFieldMap()

	return _propChangelog
}

type propChangelog struct {
	propChangelogDo

	ALL          field.Asterisk
	Userid       field.Int32
	Propid       field.Int32
	ChangeBefore field.Uint32
	ChangeCount  field.Int32
	ChangeAfter  field.Uint32
	InsertTime   field.Time
	Gameid       field.Uint32 // 房间ID,0为大厅
	Codeid       field.Uint32 // 1-比赛获得 2-兑换 3-比赛领奖 4-每日签到领奖 5-首充

	fieldMap map[string]field.Expr
}

func (p propChangelog) Table(newTableName string) *propChangelog {
	p.propChangelogDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p propChangelog) As(alias string) *propChangelog {
	p.propChangelogDo.DO = *(p.propChangelogDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *propChangelog) updateTableName(table string) *propChangelog {
	p.ALL = field.NewAsterisk(table)
	p.Userid = field.NewInt32(table, "userid")
	p.Propid = field.NewInt32(table, "propid")
	p.ChangeBefore = field.NewUint32(table, "change_before")
	p.ChangeCount = field.NewInt32(table, "change_count")
	p.ChangeAfter = field.NewUint32(table, "change_after")
	p.InsertTime = field.NewTime(table, "insertTime")
	p.Gameid = field.NewUint32(table, "gameid")
	p.Codeid = field.NewUint32(table, "codeid")

	p.fillFieldMap()

	return p
}

func (p *propChangelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *propChangelog) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["userid"] = p.Userid
	p.fieldMap["propid"] = p.Propid
	p.fieldMap["change_before"] = p.ChangeBefore
	p.fieldMap["change_count"] = p.ChangeCount
	p.fieldMap["change_after"] = p.ChangeAfter
	p.fieldMap["insertTime"] = p.InsertTime
	p.fieldMap["gameid"] = p.Gameid
	p.fieldMap["codeid"] = p.Codeid
}

func (p propChangelog) clone(db *gorm.DB) propChangelog {
	p.propChangelogDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p propChangelog) replaceDB(db *gorm.DB) propChangelog {
	p.propChangelogDo.ReplaceDB(db)
	return p
}

type propChangelogDo struct{ gen.DO }

type IPropChangelogDo interface {
	gen.SubQuery
	Debug() IPropChangelogDo
	WithContext(ctx context.Context) IPropChangelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPropChangelogDo
	WriteDB() IPropChangelogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPropChangelogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPropChangelogDo
	Not(conds ...gen.Condition) IPropChangelogDo
	Or(conds ...gen.Condition) IPropChangelogDo
	Select(conds ...field.Expr) IPropChangelogDo
	Where(conds ...gen.Condition) IPropChangelogDo
	Order(conds ...field.Expr) IPropChangelogDo
	Distinct(cols ...field.Expr) IPropChangelogDo
	Omit(cols ...field.Expr) IPropChangelogDo
	Join(table schema.Tabler, on ...field.Expr) IPropChangelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPropChangelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPropChangelogDo
	Group(cols ...field.Expr) IPropChangelogDo
	Having(conds ...gen.Condition) IPropChangelogDo
	Limit(limit int) IPropChangelogDo
	Offset(offset int) IPropChangelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPropChangelogDo
	Unscoped() IPropChangelogDo
	Create(values ...*model.PropChangelog) error
	CreateInBatches(values []*model.PropChangelog, batchSize int) error
	Save(values ...*model.PropChangelog) error
	First() (*model.PropChangelog, error)
	Take() (*model.PropChangelog, error)
	Last() (*model.PropChangelog, error)
	Find() ([]*model.PropChangelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PropChangelog, err error)
	FindInBatches(result *[]*model.PropChangelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PropChangelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPropChangelogDo
	Assign(attrs ...field.AssignExpr) IPropChangelogDo
	Joins(fields ...field.RelationField) IPropChangelogDo
	Preload(fields ...field.RelationField) IPropChangelogDo
	FirstOrInit() (*model.PropChangelog, error)
	FirstOrCreate() (*model.PropChangelog, error)
	FindByPage(offset int, limit int) (result []*model.PropChangelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPropChangelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p propChangelogDo) Debug() IPropChangelogDo {
	return p.withDO(p.DO.Debug())
}

func (p propChangelogDo) WithContext(ctx context.Context) IPropChangelogDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p propChangelogDo) ReadDB() IPropChangelogDo {
	return p.Clauses(dbresolver.Read)
}

func (p propChangelogDo) WriteDB() IPropChangelogDo {
	return p.Clauses(dbresolver.Write)
}

func (p propChangelogDo) Session(config *gorm.Session) IPropChangelogDo {
	return p.withDO(p.DO.Session(config))
}

func (p propChangelogDo) Clauses(conds ...clause.Expression) IPropChangelogDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p propChangelogDo) Returning(value interface{}, columns ...string) IPropChangelogDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p propChangelogDo) Not(conds ...gen.Condition) IPropChangelogDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p propChangelogDo) Or(conds ...gen.Condition) IPropChangelogDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p propChangelogDo) Select(conds ...field.Expr) IPropChangelogDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p propChangelogDo) Where(conds ...gen.Condition) IPropChangelogDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p propChangelogDo) Order(conds ...field.Expr) IPropChangelogDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p propChangelogDo) Distinct(cols ...field.Expr) IPropChangelogDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p propChangelogDo) Omit(cols ...field.Expr) IPropChangelogDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p propChangelogDo) Join(table schema.Tabler, on ...field.Expr) IPropChangelogDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p propChangelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPropChangelogDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p propChangelogDo) RightJoin(table schema.Tabler, on ...field.Expr) IPropChangelogDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p propChangelogDo) Group(cols ...field.Expr) IPropChangelogDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p propChangelogDo) Having(conds ...gen.Condition) IPropChangelogDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p propChangelogDo) Limit(limit int) IPropChangelogDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p propChangelogDo) Offset(offset int) IPropChangelogDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p propChangelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPropChangelogDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p propChangelogDo) Unscoped() IPropChangelogDo {
	return p.withDO(p.DO.Unscoped())
}

func (p propChangelogDo) Create(values ...*model.PropChangelog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p propChangelogDo) CreateInBatches(values []*model.PropChangelog, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p propChangelogDo) Save(values ...*model.PropChangelog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p propChangelogDo) First() (*model.PropChangelog, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropChangelog), nil
	}
}

func (p propChangelogDo) Take() (*model.PropChangelog, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropChangelog), nil
	}
}

func (p propChangelogDo) Last() (*model.PropChangelog, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropChangelog), nil
	}
}

func (p propChangelogDo) Find() ([]*model.PropChangelog, error) {
	result, err := p.DO.Find()
	return result.([]*model.PropChangelog), err
}

func (p propChangelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PropChangelog, err error) {
	buf := make([]*model.PropChangelog, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p propChangelogDo) FindInBatches(result *[]*model.PropChangelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p propChangelogDo) Attrs(attrs ...field.AssignExpr) IPropChangelogDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p propChangelogDo) Assign(attrs ...field.AssignExpr) IPropChangelogDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p propChangelogDo) Joins(fields ...field.RelationField) IPropChangelogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p propChangelogDo) Preload(fields ...field.RelationField) IPropChangelogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p propChangelogDo) FirstOrInit() (*model.PropChangelog, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropChangelog), nil
	}
}

func (p propChangelogDo) FirstOrCreate() (*model.PropChangelog, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropChangelog), nil
	}
}

func (p propChangelogDo) FindByPage(offset int, limit int) (result []*model.PropChangelog, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p propChangelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p propChangelogDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p propChangelogDo) Delete(models ...*model.PropChangelog) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *propChangelogDo) withDO(do gen.Dao) *propChangelogDo {
	p.DO = *do.(*gen.DO)
	return p
}
