// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newScoreChangelog(db *gorm.DB, opts ...gen.DOOption) scoreChangelog {
	_scoreChangelog := scoreChangelog{}

	_scoreChangelog.scoreChangelogDo.UseDB(db, opts...)
	_scoreChangelog.scoreChangelogDo.UseModel(&model.ScoreChangelog{})

	tableName := _scoreChangelog.scoreChangelogDo.TableName()
	_scoreChangelog.ALL = field.NewAsterisk(tableName)
	_scoreChangelog.ID = field.NewInt32(tableName, "id")
	_scoreChangelog.Userid = field.NewInt32(tableName, "userid")
	_scoreChangelog.ScoreBefore = field.NewInt32(tableName, "score_before")
	_scoreChangelog.ScoreChange = field.NewInt32(tableName, "score_change")
	_scoreChangelog.ScoreCurrent = field.NewInt32(tableName, "score_current")
	_scoreChangelog.ChangeType = field.NewInt32(tableName, "change_type")
	_scoreChangelog.ChangeTime = field.NewTime(tableName, "change_time")
	_scoreChangelog.IsOnline = field.NewBool(tableName, "isOnline")

	_scoreChangelog.fillFieldMap()

	return _scoreChangelog
}

type scoreChangelog struct {
	scoreChangelogDo

	ALL          field.Asterisk
	ID           field.Int32
	Userid       field.Int32
	ScoreBefore  field.Int32
	ScoreChange  field.Int32
	ScoreCurrent field.Int32
	ChangeType   field.Int32 // 0网站加分,1捕鸟,2连线,3赠送,4兑换,528game,6领取,7东山再起,8红包,9八搭二,10牛牛
	ChangeTime   field.Time
	IsOnline     field.Bool

	fieldMap map[string]field.Expr
}

func (s scoreChangelog) Table(newTableName string) *scoreChangelog {
	s.scoreChangelogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scoreChangelog) As(alias string) *scoreChangelog {
	s.scoreChangelogDo.DO = *(s.scoreChangelogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scoreChangelog) updateTableName(table string) *scoreChangelog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Userid = field.NewInt32(table, "userid")
	s.ScoreBefore = field.NewInt32(table, "score_before")
	s.ScoreChange = field.NewInt32(table, "score_change")
	s.ScoreCurrent = field.NewInt32(table, "score_current")
	s.ChangeType = field.NewInt32(table, "change_type")
	s.ChangeTime = field.NewTime(table, "change_time")
	s.IsOnline = field.NewBool(table, "isOnline")

	s.fillFieldMap()

	return s
}

func (s *scoreChangelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scoreChangelog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["userid"] = s.Userid
	s.fieldMap["score_before"] = s.ScoreBefore
	s.fieldMap["score_change"] = s.ScoreChange
	s.fieldMap["score_current"] = s.ScoreCurrent
	s.fieldMap["change_type"] = s.ChangeType
	s.fieldMap["change_time"] = s.ChangeTime
	s.fieldMap["isOnline"] = s.IsOnline
}

func (s scoreChangelog) clone(db *gorm.DB) scoreChangelog {
	s.scoreChangelogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scoreChangelog) replaceDB(db *gorm.DB) scoreChangelog {
	s.scoreChangelogDo.ReplaceDB(db)
	return s
}

type scoreChangelogDo struct{ gen.DO }

type IScoreChangelogDo interface {
	gen.SubQuery
	Debug() IScoreChangelogDo
	WithContext(ctx context.Context) IScoreChangelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScoreChangelogDo
	WriteDB() IScoreChangelogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScoreChangelogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScoreChangelogDo
	Not(conds ...gen.Condition) IScoreChangelogDo
	Or(conds ...gen.Condition) IScoreChangelogDo
	Select(conds ...field.Expr) IScoreChangelogDo
	Where(conds ...gen.Condition) IScoreChangelogDo
	Order(conds ...field.Expr) IScoreChangelogDo
	Distinct(cols ...field.Expr) IScoreChangelogDo
	Omit(cols ...field.Expr) IScoreChangelogDo
	Join(table schema.Tabler, on ...field.Expr) IScoreChangelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScoreChangelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScoreChangelogDo
	Group(cols ...field.Expr) IScoreChangelogDo
	Having(conds ...gen.Condition) IScoreChangelogDo
	Limit(limit int) IScoreChangelogDo
	Offset(offset int) IScoreChangelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScoreChangelogDo
	Unscoped() IScoreChangelogDo
	Create(values ...*model.ScoreChangelog) error
	CreateInBatches(values []*model.ScoreChangelog, batchSize int) error
	Save(values ...*model.ScoreChangelog) error
	First() (*model.ScoreChangelog, error)
	Take() (*model.ScoreChangelog, error)
	Last() (*model.ScoreChangelog, error)
	Find() ([]*model.ScoreChangelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScoreChangelog, err error)
	FindInBatches(result *[]*model.ScoreChangelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScoreChangelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScoreChangelogDo
	Assign(attrs ...field.AssignExpr) IScoreChangelogDo
	Joins(fields ...field.RelationField) IScoreChangelogDo
	Preload(fields ...field.RelationField) IScoreChangelogDo
	FirstOrInit() (*model.ScoreChangelog, error)
	FirstOrCreate() (*model.ScoreChangelog, error)
	FindByPage(offset int, limit int) (result []*model.ScoreChangelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScoreChangelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scoreChangelogDo) Debug() IScoreChangelogDo {
	return s.withDO(s.DO.Debug())
}

func (s scoreChangelogDo) WithContext(ctx context.Context) IScoreChangelogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scoreChangelogDo) ReadDB() IScoreChangelogDo {
	return s.Clauses(dbresolver.Read)
}

func (s scoreChangelogDo) WriteDB() IScoreChangelogDo {
	return s.Clauses(dbresolver.Write)
}

func (s scoreChangelogDo) Session(config *gorm.Session) IScoreChangelogDo {
	return s.withDO(s.DO.Session(config))
}

func (s scoreChangelogDo) Clauses(conds ...clause.Expression) IScoreChangelogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scoreChangelogDo) Returning(value interface{}, columns ...string) IScoreChangelogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scoreChangelogDo) Not(conds ...gen.Condition) IScoreChangelogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scoreChangelogDo) Or(conds ...gen.Condition) IScoreChangelogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scoreChangelogDo) Select(conds ...field.Expr) IScoreChangelogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scoreChangelogDo) Where(conds ...gen.Condition) IScoreChangelogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scoreChangelogDo) Order(conds ...field.Expr) IScoreChangelogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scoreChangelogDo) Distinct(cols ...field.Expr) IScoreChangelogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scoreChangelogDo) Omit(cols ...field.Expr) IScoreChangelogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scoreChangelogDo) Join(table schema.Tabler, on ...field.Expr) IScoreChangelogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scoreChangelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScoreChangelogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scoreChangelogDo) RightJoin(table schema.Tabler, on ...field.Expr) IScoreChangelogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scoreChangelogDo) Group(cols ...field.Expr) IScoreChangelogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scoreChangelogDo) Having(conds ...gen.Condition) IScoreChangelogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scoreChangelogDo) Limit(limit int) IScoreChangelogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scoreChangelogDo) Offset(offset int) IScoreChangelogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scoreChangelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScoreChangelogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scoreChangelogDo) Unscoped() IScoreChangelogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scoreChangelogDo) Create(values ...*model.ScoreChangelog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scoreChangelogDo) CreateInBatches(values []*model.ScoreChangelog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scoreChangelogDo) Save(values ...*model.ScoreChangelog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scoreChangelogDo) First() (*model.ScoreChangelog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScoreChangelog), nil
	}
}

func (s scoreChangelogDo) Take() (*model.ScoreChangelog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScoreChangelog), nil
	}
}

func (s scoreChangelogDo) Last() (*model.ScoreChangelog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScoreChangelog), nil
	}
}

func (s scoreChangelogDo) Find() ([]*model.ScoreChangelog, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScoreChangelog), err
}

func (s scoreChangelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScoreChangelog, err error) {
	buf := make([]*model.ScoreChangelog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scoreChangelogDo) FindInBatches(result *[]*model.ScoreChangelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scoreChangelogDo) Attrs(attrs ...field.AssignExpr) IScoreChangelogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scoreChangelogDo) Assign(attrs ...field.AssignExpr) IScoreChangelogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scoreChangelogDo) Joins(fields ...field.RelationField) IScoreChangelogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scoreChangelogDo) Preload(fields ...field.RelationField) IScoreChangelogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scoreChangelogDo) FirstOrInit() (*model.ScoreChangelog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScoreChangelog), nil
	}
}

func (s scoreChangelogDo) FirstOrCreate() (*model.ScoreChangelog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScoreChangelog), nil
	}
}

func (s scoreChangelogDo) FindByPage(offset int, limit int) (result []*model.ScoreChangelog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scoreChangelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scoreChangelogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scoreChangelogDo) Delete(models ...*model.ScoreChangelog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scoreChangelogDo) withDO(do gen.Dao) *scoreChangelogDo {
	s.DO = *do.(*gen.DO)
	return s
}
