// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package game

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                    = new(Query)
	TAccount             *tAccount
	TChargeLog           *tChargeLog
	TGame                *tGame
	TGameResultLog       *tGameResultLog
	TGamesArchive        *tGamesArchive
	TGuest               *tGuest
	TMessage             *tMessage
	TRoom                *tRoom
	TScene               *tScene
	TSellLog             *tSellLog
	TSessionPool         *tSessionPool
	TUseMoneyLog         *tUseMoneyLog
	TUser                *tUser
	TUsersRechangeRecord *tUsersRechangeRecord
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	TAccount = &Q.TAccount
	TChargeLog = &Q.TChargeLog
	TGame = &Q.TGame
	TGameResultLog = &Q.TGameResultLog
	TGamesArchive = &Q.TGamesArchive
	TGuest = &Q.TGuest
	TMessage = &Q.TMessage
	TRoom = &Q.TRoom
	TScene = &Q.TScene
	TSellLog = &Q.TSellLog
	TSessionPool = &Q.TSessionPool
	TUseMoneyLog = &Q.TUseMoneyLog
	TUser = &Q.TUser
	TUsersRechangeRecord = &Q.TUsersRechangeRecord
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                   db,
		TAccount:             newTAccount(db, opts...),
		TChargeLog:           newTChargeLog(db, opts...),
		TGame:                newTGame(db, opts...),
		TGameResultLog:       newTGameResultLog(db, opts...),
		TGamesArchive:        newTGamesArchive(db, opts...),
		TGuest:               newTGuest(db, opts...),
		TMessage:             newTMessage(db, opts...),
		TRoom:                newTRoom(db, opts...),
		TScene:               newTScene(db, opts...),
		TSellLog:             newTSellLog(db, opts...),
		TSessionPool:         newTSessionPool(db, opts...),
		TUseMoneyLog:         newTUseMoneyLog(db, opts...),
		TUser:                newTUser(db, opts...),
		TUsersRechangeRecord: newTUsersRechangeRecord(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	TAccount             tAccount
	TChargeLog           tChargeLog
	TGame                tGame
	TGameResultLog       tGameResultLog
	TGamesArchive        tGamesArchive
	TGuest               tGuest
	TMessage             tMessage
	TRoom                tRoom
	TScene               tScene
	TSellLog             tSellLog
	TSessionPool         tSessionPool
	TUseMoneyLog         tUseMoneyLog
	TUser                tUser
	TUsersRechangeRecord tUsersRechangeRecord
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		TAccount:             q.TAccount.clone(db),
		TChargeLog:           q.TChargeLog.clone(db),
		TGame:                q.TGame.clone(db),
		TGameResultLog:       q.TGameResultLog.clone(db),
		TGamesArchive:        q.TGamesArchive.clone(db),
		TGuest:               q.TGuest.clone(db),
		TMessage:             q.TMessage.clone(db),
		TRoom:                q.TRoom.clone(db),
		TScene:               q.TScene.clone(db),
		TSellLog:             q.TSellLog.clone(db),
		TSessionPool:         q.TSessionPool.clone(db),
		TUseMoneyLog:         q.TUseMoneyLog.clone(db),
		TUser:                q.TUser.clone(db),
		TUsersRechangeRecord: q.TUsersRechangeRecord.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		TAccount:             q.TAccount.replaceDB(db),
		TChargeLog:           q.TChargeLog.replaceDB(db),
		TGame:                q.TGame.replaceDB(db),
		TGameResultLog:       q.TGameResultLog.replaceDB(db),
		TGamesArchive:        q.TGamesArchive.replaceDB(db),
		TGuest:               q.TGuest.replaceDB(db),
		TMessage:             q.TMessage.replaceDB(db),
		TRoom:                q.TRoom.replaceDB(db),
		TScene:               q.TScene.replaceDB(db),
		TSellLog:             q.TSellLog.replaceDB(db),
		TSessionPool:         q.TSessionPool.replaceDB(db),
		TUseMoneyLog:         q.TUseMoneyLog.replaceDB(db),
		TUser:                q.TUser.replaceDB(db),
		TUsersRechangeRecord: q.TUsersRechangeRecord.replaceDB(db),
	}
}

type queryCtx struct {
	TAccount             ITAccountDo
	TChargeLog           ITChargeLogDo
	TGame                ITGameDo
	TGameResultLog       ITGameResultLogDo
	TGamesArchive        ITGamesArchiveDo
	TGuest               ITGuestDo
	TMessage             ITMessageDo
	TRoom                ITRoomDo
	TScene               ITSceneDo
	TSellLog             ITSellLogDo
	TSessionPool         ITSessionPoolDo
	TUseMoneyLog         ITUseMoneyLogDo
	TUser                ITUserDo
	TUsersRechangeRecord ITUsersRechangeRecordDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TAccount:             q.TAccount.WithContext(ctx),
		TChargeLog:           q.TChargeLog.WithContext(ctx),
		TGame:                q.TGame.WithContext(ctx),
		TGameResultLog:       q.TGameResultLog.WithContext(ctx),
		TGamesArchive:        q.TGamesArchive.WithContext(ctx),
		TGuest:               q.TGuest.WithContext(ctx),
		TMessage:             q.TMessage.WithContext(ctx),
		TRoom:                q.TRoom.WithContext(ctx),
		TScene:               q.TScene.WithContext(ctx),
		TSellLog:             q.TSellLog.WithContext(ctx),
		TSessionPool:         q.TSessionPool.WithContext(ctx),
		TUseMoneyLog:         q.TUseMoneyLog.WithContext(ctx),
		TUser:                q.TUser.WithContext(ctx),
		TUsersRechangeRecord: q.TUsersRechangeRecord.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
