// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newPaylog(db *gorm.DB, opts ...gen.DOOption) paylog {
	_paylog := paylog{}

	_paylog.paylogDo.UseDB(db, opts...)
	_paylog.paylogDo.UseModel(&model.Paylog{})

	tableName := _paylog.paylogDo.TableName()
	_paylog.ALL = field.NewAsterisk(tableName)
	_paylog.ID = field.NewUint32(tableName, "id")
	_paylog.UID = field.NewUint32(tableName, "uid")
	_paylog.Fee = field.NewFloat64(tableName, "fee")
	_paylog.Type = field.NewBool(tableName, "type")
	_paylog.Osn = field.NewString(tableName, "osn")
	_paylog.Osnjz = field.NewString(tableName, "osnjz")
	_paylog.Createtime = field.NewString(tableName, "createtime")
	_paylog.Paytime = field.NewString(tableName, "paytime")
	_paylog.Status = field.NewBool(tableName, "status")
	_paylog.Payresmsg = field.NewString(tableName, "payresmsg")
	_paylog.Prepayresmsg = field.NewString(tableName, "prepayresmsg")
	_paylog.Payendtime = field.NewString(tableName, "payendtime")

	_paylog.fillFieldMap()

	return _paylog
}

type paylog struct {
	paylogDo

	ALL          field.Asterisk
	ID           field.Uint32
	UID          field.Uint32
	Fee          field.Float64
	Type         field.Bool // 1：微信支付；2：支付宝
	Osn          field.String
	Osnjz        field.String
	Createtime   field.String
	Paytime      field.String
	Status       field.Bool // 0待付款  1已付款 2已关闭
	Payresmsg    field.String
	Prepayresmsg field.String
	Payendtime   field.String

	fieldMap map[string]field.Expr
}

func (p paylog) Table(newTableName string) *paylog {
	p.paylogDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paylog) As(alias string) *paylog {
	p.paylogDo.DO = *(p.paylogDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paylog) updateTableName(table string) *paylog {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint32(table, "id")
	p.UID = field.NewUint32(table, "uid")
	p.Fee = field.NewFloat64(table, "fee")
	p.Type = field.NewBool(table, "type")
	p.Osn = field.NewString(table, "osn")
	p.Osnjz = field.NewString(table, "osnjz")
	p.Createtime = field.NewString(table, "createtime")
	p.Paytime = field.NewString(table, "paytime")
	p.Status = field.NewBool(table, "status")
	p.Payresmsg = field.NewString(table, "payresmsg")
	p.Prepayresmsg = field.NewString(table, "prepayresmsg")
	p.Payendtime = field.NewString(table, "payendtime")

	p.fillFieldMap()

	return p
}

func (p *paylog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paylog) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["uid"] = p.UID
	p.fieldMap["fee"] = p.Fee
	p.fieldMap["type"] = p.Type
	p.fieldMap["osn"] = p.Osn
	p.fieldMap["osnjz"] = p.Osnjz
	p.fieldMap["createtime"] = p.Createtime
	p.fieldMap["paytime"] = p.Paytime
	p.fieldMap["status"] = p.Status
	p.fieldMap["payresmsg"] = p.Payresmsg
	p.fieldMap["prepayresmsg"] = p.Prepayresmsg
	p.fieldMap["payendtime"] = p.Payendtime
}

func (p paylog) clone(db *gorm.DB) paylog {
	p.paylogDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p paylog) replaceDB(db *gorm.DB) paylog {
	p.paylogDo.ReplaceDB(db)
	return p
}

type paylogDo struct{ gen.DO }

type IPaylogDo interface {
	gen.SubQuery
	Debug() IPaylogDo
	WithContext(ctx context.Context) IPaylogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPaylogDo
	WriteDB() IPaylogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPaylogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPaylogDo
	Not(conds ...gen.Condition) IPaylogDo
	Or(conds ...gen.Condition) IPaylogDo
	Select(conds ...field.Expr) IPaylogDo
	Where(conds ...gen.Condition) IPaylogDo
	Order(conds ...field.Expr) IPaylogDo
	Distinct(cols ...field.Expr) IPaylogDo
	Omit(cols ...field.Expr) IPaylogDo
	Join(table schema.Tabler, on ...field.Expr) IPaylogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPaylogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPaylogDo
	Group(cols ...field.Expr) IPaylogDo
	Having(conds ...gen.Condition) IPaylogDo
	Limit(limit int) IPaylogDo
	Offset(offset int) IPaylogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPaylogDo
	Unscoped() IPaylogDo
	Create(values ...*model.Paylog) error
	CreateInBatches(values []*model.Paylog, batchSize int) error
	Save(values ...*model.Paylog) error
	First() (*model.Paylog, error)
	Take() (*model.Paylog, error)
	Last() (*model.Paylog, error)
	Find() ([]*model.Paylog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Paylog, err error)
	FindInBatches(result *[]*model.Paylog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Paylog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPaylogDo
	Assign(attrs ...field.AssignExpr) IPaylogDo
	Joins(fields ...field.RelationField) IPaylogDo
	Preload(fields ...field.RelationField) IPaylogDo
	FirstOrInit() (*model.Paylog, error)
	FirstOrCreate() (*model.Paylog, error)
	FindByPage(offset int, limit int) (result []*model.Paylog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPaylogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p paylogDo) Debug() IPaylogDo {
	return p.withDO(p.DO.Debug())
}

func (p paylogDo) WithContext(ctx context.Context) IPaylogDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paylogDo) ReadDB() IPaylogDo {
	return p.Clauses(dbresolver.Read)
}

func (p paylogDo) WriteDB() IPaylogDo {
	return p.Clauses(dbresolver.Write)
}

func (p paylogDo) Session(config *gorm.Session) IPaylogDo {
	return p.withDO(p.DO.Session(config))
}

func (p paylogDo) Clauses(conds ...clause.Expression) IPaylogDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paylogDo) Returning(value interface{}, columns ...string) IPaylogDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paylogDo) Not(conds ...gen.Condition) IPaylogDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paylogDo) Or(conds ...gen.Condition) IPaylogDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paylogDo) Select(conds ...field.Expr) IPaylogDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paylogDo) Where(conds ...gen.Condition) IPaylogDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paylogDo) Order(conds ...field.Expr) IPaylogDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paylogDo) Distinct(cols ...field.Expr) IPaylogDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paylogDo) Omit(cols ...field.Expr) IPaylogDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paylogDo) Join(table schema.Tabler, on ...field.Expr) IPaylogDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paylogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPaylogDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paylogDo) RightJoin(table schema.Tabler, on ...field.Expr) IPaylogDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paylogDo) Group(cols ...field.Expr) IPaylogDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paylogDo) Having(conds ...gen.Condition) IPaylogDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paylogDo) Limit(limit int) IPaylogDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paylogDo) Offset(offset int) IPaylogDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paylogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPaylogDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paylogDo) Unscoped() IPaylogDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paylogDo) Create(values ...*model.Paylog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paylogDo) CreateInBatches(values []*model.Paylog, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paylogDo) Save(values ...*model.Paylog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paylogDo) First() (*model.Paylog, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Paylog), nil
	}
}

func (p paylogDo) Take() (*model.Paylog, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Paylog), nil
	}
}

func (p paylogDo) Last() (*model.Paylog, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Paylog), nil
	}
}

func (p paylogDo) Find() ([]*model.Paylog, error) {
	result, err := p.DO.Find()
	return result.([]*model.Paylog), err
}

func (p paylogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Paylog, err error) {
	buf := make([]*model.Paylog, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paylogDo) FindInBatches(result *[]*model.Paylog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paylogDo) Attrs(attrs ...field.AssignExpr) IPaylogDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paylogDo) Assign(attrs ...field.AssignExpr) IPaylogDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paylogDo) Joins(fields ...field.RelationField) IPaylogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paylogDo) Preload(fields ...field.RelationField) IPaylogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paylogDo) FirstOrInit() (*model.Paylog, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Paylog), nil
	}
}

func (p paylogDo) FirstOrCreate() (*model.Paylog, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Paylog), nil
	}
}

func (p paylogDo) FindByPage(offset int, limit int) (result []*model.Paylog, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paylogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paylogDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paylogDo) Delete(models ...*model.Paylog) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paylogDo) withDO(do gen.Dao) *paylogDo {
	p.DO = *do.(*gen.DO)
	return p
}
