// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLineout(db *gorm.DB, opts ...gen.DOOption) lineout {
	_lineout := lineout{}

	_lineout.lineoutDo.UseDB(db, opts...)
	_lineout.lineoutDo.UseModel(&model.Lineout{})

	tableName := _lineout.lineoutDo.TableName()
	_lineout.ALL = field.NewAsterisk(tableName)
	_lineout.UserID = field.NewInt32(tableName, "userId")

	_lineout.fillFieldMap()

	return _lineout
}

type lineout struct {
	lineoutDo

	ALL    field.Asterisk
	UserID field.Int32

	fieldMap map[string]field.Expr
}

func (l lineout) Table(newTableName string) *lineout {
	l.lineoutDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lineout) As(alias string) *lineout {
	l.lineoutDo.DO = *(l.lineoutDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lineout) updateTableName(table string) *lineout {
	l.ALL = field.NewAsterisk(table)
	l.UserID = field.NewInt32(table, "userId")

	l.fillFieldMap()

	return l
}

func (l *lineout) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lineout) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 1)
	l.fieldMap["userId"] = l.UserID
}

func (l lineout) clone(db *gorm.DB) lineout {
	l.lineoutDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lineout) replaceDB(db *gorm.DB) lineout {
	l.lineoutDo.ReplaceDB(db)
	return l
}

type lineoutDo struct{ gen.DO }

type ILineoutDo interface {
	gen.SubQuery
	Debug() ILineoutDo
	WithContext(ctx context.Context) ILineoutDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILineoutDo
	WriteDB() ILineoutDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILineoutDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILineoutDo
	Not(conds ...gen.Condition) ILineoutDo
	Or(conds ...gen.Condition) ILineoutDo
	Select(conds ...field.Expr) ILineoutDo
	Where(conds ...gen.Condition) ILineoutDo
	Order(conds ...field.Expr) ILineoutDo
	Distinct(cols ...field.Expr) ILineoutDo
	Omit(cols ...field.Expr) ILineoutDo
	Join(table schema.Tabler, on ...field.Expr) ILineoutDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILineoutDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILineoutDo
	Group(cols ...field.Expr) ILineoutDo
	Having(conds ...gen.Condition) ILineoutDo
	Limit(limit int) ILineoutDo
	Offset(offset int) ILineoutDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILineoutDo
	Unscoped() ILineoutDo
	Create(values ...*model.Lineout) error
	CreateInBatches(values []*model.Lineout, batchSize int) error
	Save(values ...*model.Lineout) error
	First() (*model.Lineout, error)
	Take() (*model.Lineout, error)
	Last() (*model.Lineout, error)
	Find() ([]*model.Lineout, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lineout, err error)
	FindInBatches(result *[]*model.Lineout, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lineout) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILineoutDo
	Assign(attrs ...field.AssignExpr) ILineoutDo
	Joins(fields ...field.RelationField) ILineoutDo
	Preload(fields ...field.RelationField) ILineoutDo
	FirstOrInit() (*model.Lineout, error)
	FirstOrCreate() (*model.Lineout, error)
	FindByPage(offset int, limit int) (result []*model.Lineout, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILineoutDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lineoutDo) Debug() ILineoutDo {
	return l.withDO(l.DO.Debug())
}

func (l lineoutDo) WithContext(ctx context.Context) ILineoutDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lineoutDo) ReadDB() ILineoutDo {
	return l.Clauses(dbresolver.Read)
}

func (l lineoutDo) WriteDB() ILineoutDo {
	return l.Clauses(dbresolver.Write)
}

func (l lineoutDo) Session(config *gorm.Session) ILineoutDo {
	return l.withDO(l.DO.Session(config))
}

func (l lineoutDo) Clauses(conds ...clause.Expression) ILineoutDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lineoutDo) Returning(value interface{}, columns ...string) ILineoutDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lineoutDo) Not(conds ...gen.Condition) ILineoutDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lineoutDo) Or(conds ...gen.Condition) ILineoutDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lineoutDo) Select(conds ...field.Expr) ILineoutDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lineoutDo) Where(conds ...gen.Condition) ILineoutDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lineoutDo) Order(conds ...field.Expr) ILineoutDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lineoutDo) Distinct(cols ...field.Expr) ILineoutDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lineoutDo) Omit(cols ...field.Expr) ILineoutDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lineoutDo) Join(table schema.Tabler, on ...field.Expr) ILineoutDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lineoutDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILineoutDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lineoutDo) RightJoin(table schema.Tabler, on ...field.Expr) ILineoutDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lineoutDo) Group(cols ...field.Expr) ILineoutDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lineoutDo) Having(conds ...gen.Condition) ILineoutDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lineoutDo) Limit(limit int) ILineoutDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lineoutDo) Offset(offset int) ILineoutDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lineoutDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILineoutDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lineoutDo) Unscoped() ILineoutDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lineoutDo) Create(values ...*model.Lineout) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lineoutDo) CreateInBatches(values []*model.Lineout, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lineoutDo) Save(values ...*model.Lineout) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lineoutDo) First() (*model.Lineout, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lineout), nil
	}
}

func (l lineoutDo) Take() (*model.Lineout, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lineout), nil
	}
}

func (l lineoutDo) Last() (*model.Lineout, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lineout), nil
	}
}

func (l lineoutDo) Find() ([]*model.Lineout, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lineout), err
}

func (l lineoutDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lineout, err error) {
	buf := make([]*model.Lineout, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lineoutDo) FindInBatches(result *[]*model.Lineout, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lineoutDo) Attrs(attrs ...field.AssignExpr) ILineoutDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lineoutDo) Assign(attrs ...field.AssignExpr) ILineoutDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lineoutDo) Joins(fields ...field.RelationField) ILineoutDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lineoutDo) Preload(fields ...field.RelationField) ILineoutDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lineoutDo) FirstOrInit() (*model.Lineout, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lineout), nil
	}
}

func (l lineoutDo) FirstOrCreate() (*model.Lineout, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lineout), nil
	}
}

func (l lineoutDo) FindByPage(offset int, limit int) (result []*model.Lineout, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lineoutDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lineoutDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lineoutDo) Delete(models ...*model.Lineout) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lineoutDo) withDO(do gen.Dao) *lineoutDo {
	l.DO = *do.(*gen.DO)
	return l
}
