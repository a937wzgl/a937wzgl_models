// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fish

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newDaysendprizevalue(db *gorm.DB, opts ...gen.DOOption) daysendprizevalue {
	_daysendprizevalue := daysendprizevalue{}

	_daysendprizevalue.daysendprizevalueDo.UseDB(db, opts...)
	_daysendprizevalue.daysendprizevalueDo.UseModel(&model.Daysendprizevalue{})

	tableName := _daysendprizevalue.daysendprizevalueDo.TableName()
	_daysendprizevalue.ALL = field.NewAsterisk(tableName)
	_daysendprizevalue.Day = field.NewInt32(tableName, "day")
	_daysendprizevalue.Value = field.NewInt32(tableName, "value")

	_daysendprizevalue.fillFieldMap()

	return _daysendprizevalue
}

type daysendprizevalue struct {
	daysendprizevalueDo

	ALL   field.Asterisk
	Day   field.Int32
	Value field.Int32

	fieldMap map[string]field.Expr
}

func (d daysendprizevalue) Table(newTableName string) *daysendprizevalue {
	d.daysendprizevalueDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d daysendprizevalue) As(alias string) *daysendprizevalue {
	d.daysendprizevalueDo.DO = *(d.daysendprizevalueDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *daysendprizevalue) updateTableName(table string) *daysendprizevalue {
	d.ALL = field.NewAsterisk(table)
	d.Day = field.NewInt32(table, "day")
	d.Value = field.NewInt32(table, "value")

	d.fillFieldMap()

	return d
}

func (d *daysendprizevalue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *daysendprizevalue) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 2)
	d.fieldMap["day"] = d.Day
	d.fieldMap["value"] = d.Value
}

func (d daysendprizevalue) clone(db *gorm.DB) daysendprizevalue {
	d.daysendprizevalueDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d daysendprizevalue) replaceDB(db *gorm.DB) daysendprizevalue {
	d.daysendprizevalueDo.ReplaceDB(db)
	return d
}

type daysendprizevalueDo struct{ gen.DO }

type IDaysendprizevalueDo interface {
	gen.SubQuery
	Debug() IDaysendprizevalueDo
	WithContext(ctx context.Context) IDaysendprizevalueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDaysendprizevalueDo
	WriteDB() IDaysendprizevalueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDaysendprizevalueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDaysendprizevalueDo
	Not(conds ...gen.Condition) IDaysendprizevalueDo
	Or(conds ...gen.Condition) IDaysendprizevalueDo
	Select(conds ...field.Expr) IDaysendprizevalueDo
	Where(conds ...gen.Condition) IDaysendprizevalueDo
	Order(conds ...field.Expr) IDaysendprizevalueDo
	Distinct(cols ...field.Expr) IDaysendprizevalueDo
	Omit(cols ...field.Expr) IDaysendprizevalueDo
	Join(table schema.Tabler, on ...field.Expr) IDaysendprizevalueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDaysendprizevalueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDaysendprizevalueDo
	Group(cols ...field.Expr) IDaysendprizevalueDo
	Having(conds ...gen.Condition) IDaysendprizevalueDo
	Limit(limit int) IDaysendprizevalueDo
	Offset(offset int) IDaysendprizevalueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDaysendprizevalueDo
	Unscoped() IDaysendprizevalueDo
	Create(values ...*model.Daysendprizevalue) error
	CreateInBatches(values []*model.Daysendprizevalue, batchSize int) error
	Save(values ...*model.Daysendprizevalue) error
	First() (*model.Daysendprizevalue, error)
	Take() (*model.Daysendprizevalue, error)
	Last() (*model.Daysendprizevalue, error)
	Find() ([]*model.Daysendprizevalue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Daysendprizevalue, err error)
	FindInBatches(result *[]*model.Daysendprizevalue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Daysendprizevalue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDaysendprizevalueDo
	Assign(attrs ...field.AssignExpr) IDaysendprizevalueDo
	Joins(fields ...field.RelationField) IDaysendprizevalueDo
	Preload(fields ...field.RelationField) IDaysendprizevalueDo
	FirstOrInit() (*model.Daysendprizevalue, error)
	FirstOrCreate() (*model.Daysendprizevalue, error)
	FindByPage(offset int, limit int) (result []*model.Daysendprizevalue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDaysendprizevalueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d daysendprizevalueDo) Debug() IDaysendprizevalueDo {
	return d.withDO(d.DO.Debug())
}

func (d daysendprizevalueDo) WithContext(ctx context.Context) IDaysendprizevalueDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d daysendprizevalueDo) ReadDB() IDaysendprizevalueDo {
	return d.Clauses(dbresolver.Read)
}

func (d daysendprizevalueDo) WriteDB() IDaysendprizevalueDo {
	return d.Clauses(dbresolver.Write)
}

func (d daysendprizevalueDo) Session(config *gorm.Session) IDaysendprizevalueDo {
	return d.withDO(d.DO.Session(config))
}

func (d daysendprizevalueDo) Clauses(conds ...clause.Expression) IDaysendprizevalueDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d daysendprizevalueDo) Returning(value interface{}, columns ...string) IDaysendprizevalueDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d daysendprizevalueDo) Not(conds ...gen.Condition) IDaysendprizevalueDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d daysendprizevalueDo) Or(conds ...gen.Condition) IDaysendprizevalueDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d daysendprizevalueDo) Select(conds ...field.Expr) IDaysendprizevalueDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d daysendprizevalueDo) Where(conds ...gen.Condition) IDaysendprizevalueDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d daysendprizevalueDo) Order(conds ...field.Expr) IDaysendprizevalueDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d daysendprizevalueDo) Distinct(cols ...field.Expr) IDaysendprizevalueDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d daysendprizevalueDo) Omit(cols ...field.Expr) IDaysendprizevalueDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d daysendprizevalueDo) Join(table schema.Tabler, on ...field.Expr) IDaysendprizevalueDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d daysendprizevalueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDaysendprizevalueDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d daysendprizevalueDo) RightJoin(table schema.Tabler, on ...field.Expr) IDaysendprizevalueDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d daysendprizevalueDo) Group(cols ...field.Expr) IDaysendprizevalueDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d daysendprizevalueDo) Having(conds ...gen.Condition) IDaysendprizevalueDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d daysendprizevalueDo) Limit(limit int) IDaysendprizevalueDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d daysendprizevalueDo) Offset(offset int) IDaysendprizevalueDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d daysendprizevalueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDaysendprizevalueDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d daysendprizevalueDo) Unscoped() IDaysendprizevalueDo {
	return d.withDO(d.DO.Unscoped())
}

func (d daysendprizevalueDo) Create(values ...*model.Daysendprizevalue) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d daysendprizevalueDo) CreateInBatches(values []*model.Daysendprizevalue, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d daysendprizevalueDo) Save(values ...*model.Daysendprizevalue) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d daysendprizevalueDo) First() (*model.Daysendprizevalue, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Daysendprizevalue), nil
	}
}

func (d daysendprizevalueDo) Take() (*model.Daysendprizevalue, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Daysendprizevalue), nil
	}
}

func (d daysendprizevalueDo) Last() (*model.Daysendprizevalue, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Daysendprizevalue), nil
	}
}

func (d daysendprizevalueDo) Find() ([]*model.Daysendprizevalue, error) {
	result, err := d.DO.Find()
	return result.([]*model.Daysendprizevalue), err
}

func (d daysendprizevalueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Daysendprizevalue, err error) {
	buf := make([]*model.Daysendprizevalue, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d daysendprizevalueDo) FindInBatches(result *[]*model.Daysendprizevalue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d daysendprizevalueDo) Attrs(attrs ...field.AssignExpr) IDaysendprizevalueDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d daysendprizevalueDo) Assign(attrs ...field.AssignExpr) IDaysendprizevalueDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d daysendprizevalueDo) Joins(fields ...field.RelationField) IDaysendprizevalueDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d daysendprizevalueDo) Preload(fields ...field.RelationField) IDaysendprizevalueDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d daysendprizevalueDo) FirstOrInit() (*model.Daysendprizevalue, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Daysendprizevalue), nil
	}
}

func (d daysendprizevalueDo) FirstOrCreate() (*model.Daysendprizevalue, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Daysendprizevalue), nil
	}
}

func (d daysendprizevalueDo) FindByPage(offset int, limit int) (result []*model.Daysendprizevalue, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d daysendprizevalueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d daysendprizevalueDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d daysendprizevalueDo) Delete(models ...*model.Daysendprizevalue) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *daysendprizevalueDo) withDO(do gen.Dao) *daysendprizevalueDo {
	d.DO = *do.(*gen.DO)
	return d
}
