// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newFanyong(db *gorm.DB, opts ...gen.DOOption) fanyong {
	_fanyong := fanyong{}

	_fanyong.fanyongDo.UseDB(db, opts...)
	_fanyong.fanyongDo.UseModel(&model.Fanyong{})

	tableName := _fanyong.fanyongDo.TableName()
	_fanyong.ALL = field.NewAsterisk(tableName)
	_fanyong.Aid = field.NewUint32(tableName, "aid")
	_fanyong.Usernum = field.NewUint32(tableName, "usernum")
	_fanyong.Czfee = field.NewFloat64(tableName, "czfee")
	_fanyong.Kuifee = field.NewFloat64(tableName, "kuifee")
	_fanyong.Yufee = field.NewFloat64(tableName, "yufee")
	_fanyong.Createtime = field.NewString(tableName, "createtime")

	_fanyong.fillFieldMap()

	return _fanyong
}

type fanyong struct {
	fanyongDo

	ALL        field.Asterisk
	Aid        field.Uint32
	Usernum    field.Uint32
	Czfee      field.Float64
	Kuifee     field.Float64
	Yufee      field.Float64
	Createtime field.String

	fieldMap map[string]field.Expr
}

func (f fanyong) Table(newTableName string) *fanyong {
	f.fanyongDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fanyong) As(alias string) *fanyong {
	f.fanyongDo.DO = *(f.fanyongDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fanyong) updateTableName(table string) *fanyong {
	f.ALL = field.NewAsterisk(table)
	f.Aid = field.NewUint32(table, "aid")
	f.Usernum = field.NewUint32(table, "usernum")
	f.Czfee = field.NewFloat64(table, "czfee")
	f.Kuifee = field.NewFloat64(table, "kuifee")
	f.Yufee = field.NewFloat64(table, "yufee")
	f.Createtime = field.NewString(table, "createtime")

	f.fillFieldMap()

	return f
}

func (f *fanyong) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fanyong) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["aid"] = f.Aid
	f.fieldMap["usernum"] = f.Usernum
	f.fieldMap["czfee"] = f.Czfee
	f.fieldMap["kuifee"] = f.Kuifee
	f.fieldMap["yufee"] = f.Yufee
	f.fieldMap["createtime"] = f.Createtime
}

func (f fanyong) clone(db *gorm.DB) fanyong {
	f.fanyongDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fanyong) replaceDB(db *gorm.DB) fanyong {
	f.fanyongDo.ReplaceDB(db)
	return f
}

type fanyongDo struct{ gen.DO }

type IFanyongDo interface {
	gen.SubQuery
	Debug() IFanyongDo
	WithContext(ctx context.Context) IFanyongDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFanyongDo
	WriteDB() IFanyongDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFanyongDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFanyongDo
	Not(conds ...gen.Condition) IFanyongDo
	Or(conds ...gen.Condition) IFanyongDo
	Select(conds ...field.Expr) IFanyongDo
	Where(conds ...gen.Condition) IFanyongDo
	Order(conds ...field.Expr) IFanyongDo
	Distinct(cols ...field.Expr) IFanyongDo
	Omit(cols ...field.Expr) IFanyongDo
	Join(table schema.Tabler, on ...field.Expr) IFanyongDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFanyongDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFanyongDo
	Group(cols ...field.Expr) IFanyongDo
	Having(conds ...gen.Condition) IFanyongDo
	Limit(limit int) IFanyongDo
	Offset(offset int) IFanyongDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFanyongDo
	Unscoped() IFanyongDo
	Create(values ...*model.Fanyong) error
	CreateInBatches(values []*model.Fanyong, batchSize int) error
	Save(values ...*model.Fanyong) error
	First() (*model.Fanyong, error)
	Take() (*model.Fanyong, error)
	Last() (*model.Fanyong, error)
	Find() ([]*model.Fanyong, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Fanyong, err error)
	FindInBatches(result *[]*model.Fanyong, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Fanyong) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFanyongDo
	Assign(attrs ...field.AssignExpr) IFanyongDo
	Joins(fields ...field.RelationField) IFanyongDo
	Preload(fields ...field.RelationField) IFanyongDo
	FirstOrInit() (*model.Fanyong, error)
	FirstOrCreate() (*model.Fanyong, error)
	FindByPage(offset int, limit int) (result []*model.Fanyong, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFanyongDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fanyongDo) Debug() IFanyongDo {
	return f.withDO(f.DO.Debug())
}

func (f fanyongDo) WithContext(ctx context.Context) IFanyongDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fanyongDo) ReadDB() IFanyongDo {
	return f.Clauses(dbresolver.Read)
}

func (f fanyongDo) WriteDB() IFanyongDo {
	return f.Clauses(dbresolver.Write)
}

func (f fanyongDo) Session(config *gorm.Session) IFanyongDo {
	return f.withDO(f.DO.Session(config))
}

func (f fanyongDo) Clauses(conds ...clause.Expression) IFanyongDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fanyongDo) Returning(value interface{}, columns ...string) IFanyongDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fanyongDo) Not(conds ...gen.Condition) IFanyongDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fanyongDo) Or(conds ...gen.Condition) IFanyongDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fanyongDo) Select(conds ...field.Expr) IFanyongDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fanyongDo) Where(conds ...gen.Condition) IFanyongDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fanyongDo) Order(conds ...field.Expr) IFanyongDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fanyongDo) Distinct(cols ...field.Expr) IFanyongDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fanyongDo) Omit(cols ...field.Expr) IFanyongDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fanyongDo) Join(table schema.Tabler, on ...field.Expr) IFanyongDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fanyongDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFanyongDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fanyongDo) RightJoin(table schema.Tabler, on ...field.Expr) IFanyongDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fanyongDo) Group(cols ...field.Expr) IFanyongDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fanyongDo) Having(conds ...gen.Condition) IFanyongDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fanyongDo) Limit(limit int) IFanyongDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fanyongDo) Offset(offset int) IFanyongDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fanyongDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFanyongDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fanyongDo) Unscoped() IFanyongDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fanyongDo) Create(values ...*model.Fanyong) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fanyongDo) CreateInBatches(values []*model.Fanyong, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fanyongDo) Save(values ...*model.Fanyong) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fanyongDo) First() (*model.Fanyong, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fanyong), nil
	}
}

func (f fanyongDo) Take() (*model.Fanyong, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fanyong), nil
	}
}

func (f fanyongDo) Last() (*model.Fanyong, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fanyong), nil
	}
}

func (f fanyongDo) Find() ([]*model.Fanyong, error) {
	result, err := f.DO.Find()
	return result.([]*model.Fanyong), err
}

func (f fanyongDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Fanyong, err error) {
	buf := make([]*model.Fanyong, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fanyongDo) FindInBatches(result *[]*model.Fanyong, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fanyongDo) Attrs(attrs ...field.AssignExpr) IFanyongDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fanyongDo) Assign(attrs ...field.AssignExpr) IFanyongDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fanyongDo) Joins(fields ...field.RelationField) IFanyongDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fanyongDo) Preload(fields ...field.RelationField) IFanyongDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fanyongDo) FirstOrInit() (*model.Fanyong, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fanyong), nil
	}
}

func (f fanyongDo) FirstOrCreate() (*model.Fanyong, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fanyong), nil
	}
}

func (f fanyongDo) FindByPage(offset int, limit int) (result []*model.Fanyong, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fanyongDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fanyongDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fanyongDo) Delete(models ...*model.Fanyong) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fanyongDo) withDO(do gen.Dao) *fanyongDo {
	f.DO = *do.(*gen.DO)
	return f
}
