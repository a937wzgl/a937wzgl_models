// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newRechargelogVideo(db *gorm.DB, opts ...gen.DOOption) rechargelogVideo {
	_rechargelogVideo := rechargelogVideo{}

	_rechargelogVideo.rechargelogVideoDo.UseDB(db, opts...)
	_rechargelogVideo.rechargelogVideoDo.UseModel(&model.RechargelogVideo{})

	tableName := _rechargelogVideo.rechargelogVideoDo.TableName()
	_rechargelogVideo.ALL = field.NewAsterisk(tableName)
	_rechargelogVideo.ID = field.NewUint32(tableName, "id")
	_rechargelogVideo.Adminid = field.NewUint32(tableName, "adminid")
	_rechargelogVideo.Userid = field.NewUint32(tableName, "userid")
	_rechargelogVideo.Createtime = field.NewString(tableName, "createtime")
	_rechargelogVideo.Czfee = field.NewUint64(tableName, "czfee")
	_rechargelogVideo.Oldfee = field.NewUint64(tableName, "oldfee")
	_rechargelogVideo.Newfee = field.NewUint64(tableName, "newfee")
	_rechargelogVideo.Type = field.NewBool(tableName, "type")

	_rechargelogVideo.fillFieldMap()

	return _rechargelogVideo
}

type rechargelogVideo struct {
	rechargelogVideoDo

	ALL        field.Asterisk
	ID         field.Uint32
	Adminid    field.Uint32
	Userid     field.Uint32
	Createtime field.String
	Czfee      field.Uint64
	Oldfee     field.Uint64
	Newfee     field.Uint64
	Type       field.Bool // 0 -  1 +

	fieldMap map[string]field.Expr
}

func (r rechargelogVideo) Table(newTableName string) *rechargelogVideo {
	r.rechargelogVideoDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rechargelogVideo) As(alias string) *rechargelogVideo {
	r.rechargelogVideoDo.DO = *(r.rechargelogVideoDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rechargelogVideo) updateTableName(table string) *rechargelogVideo {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint32(table, "id")
	r.Adminid = field.NewUint32(table, "adminid")
	r.Userid = field.NewUint32(table, "userid")
	r.Createtime = field.NewString(table, "createtime")
	r.Czfee = field.NewUint64(table, "czfee")
	r.Oldfee = field.NewUint64(table, "oldfee")
	r.Newfee = field.NewUint64(table, "newfee")
	r.Type = field.NewBool(table, "type")

	r.fillFieldMap()

	return r
}

func (r *rechargelogVideo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rechargelogVideo) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["adminid"] = r.Adminid
	r.fieldMap["userid"] = r.Userid
	r.fieldMap["createtime"] = r.Createtime
	r.fieldMap["czfee"] = r.Czfee
	r.fieldMap["oldfee"] = r.Oldfee
	r.fieldMap["newfee"] = r.Newfee
	r.fieldMap["type"] = r.Type
}

func (r rechargelogVideo) clone(db *gorm.DB) rechargelogVideo {
	r.rechargelogVideoDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rechargelogVideo) replaceDB(db *gorm.DB) rechargelogVideo {
	r.rechargelogVideoDo.ReplaceDB(db)
	return r
}

type rechargelogVideoDo struct{ gen.DO }

type IRechargelogVideoDo interface {
	gen.SubQuery
	Debug() IRechargelogVideoDo
	WithContext(ctx context.Context) IRechargelogVideoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRechargelogVideoDo
	WriteDB() IRechargelogVideoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRechargelogVideoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRechargelogVideoDo
	Not(conds ...gen.Condition) IRechargelogVideoDo
	Or(conds ...gen.Condition) IRechargelogVideoDo
	Select(conds ...field.Expr) IRechargelogVideoDo
	Where(conds ...gen.Condition) IRechargelogVideoDo
	Order(conds ...field.Expr) IRechargelogVideoDo
	Distinct(cols ...field.Expr) IRechargelogVideoDo
	Omit(cols ...field.Expr) IRechargelogVideoDo
	Join(table schema.Tabler, on ...field.Expr) IRechargelogVideoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRechargelogVideoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRechargelogVideoDo
	Group(cols ...field.Expr) IRechargelogVideoDo
	Having(conds ...gen.Condition) IRechargelogVideoDo
	Limit(limit int) IRechargelogVideoDo
	Offset(offset int) IRechargelogVideoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargelogVideoDo
	Unscoped() IRechargelogVideoDo
	Create(values ...*model.RechargelogVideo) error
	CreateInBatches(values []*model.RechargelogVideo, batchSize int) error
	Save(values ...*model.RechargelogVideo) error
	First() (*model.RechargelogVideo, error)
	Take() (*model.RechargelogVideo, error)
	Last() (*model.RechargelogVideo, error)
	Find() ([]*model.RechargelogVideo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RechargelogVideo, err error)
	FindInBatches(result *[]*model.RechargelogVideo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RechargelogVideo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRechargelogVideoDo
	Assign(attrs ...field.AssignExpr) IRechargelogVideoDo
	Joins(fields ...field.RelationField) IRechargelogVideoDo
	Preload(fields ...field.RelationField) IRechargelogVideoDo
	FirstOrInit() (*model.RechargelogVideo, error)
	FirstOrCreate() (*model.RechargelogVideo, error)
	FindByPage(offset int, limit int) (result []*model.RechargelogVideo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRechargelogVideoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rechargelogVideoDo) Debug() IRechargelogVideoDo {
	return r.withDO(r.DO.Debug())
}

func (r rechargelogVideoDo) WithContext(ctx context.Context) IRechargelogVideoDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rechargelogVideoDo) ReadDB() IRechargelogVideoDo {
	return r.Clauses(dbresolver.Read)
}

func (r rechargelogVideoDo) WriteDB() IRechargelogVideoDo {
	return r.Clauses(dbresolver.Write)
}

func (r rechargelogVideoDo) Session(config *gorm.Session) IRechargelogVideoDo {
	return r.withDO(r.DO.Session(config))
}

func (r rechargelogVideoDo) Clauses(conds ...clause.Expression) IRechargelogVideoDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rechargelogVideoDo) Returning(value interface{}, columns ...string) IRechargelogVideoDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rechargelogVideoDo) Not(conds ...gen.Condition) IRechargelogVideoDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rechargelogVideoDo) Or(conds ...gen.Condition) IRechargelogVideoDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rechargelogVideoDo) Select(conds ...field.Expr) IRechargelogVideoDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rechargelogVideoDo) Where(conds ...gen.Condition) IRechargelogVideoDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rechargelogVideoDo) Order(conds ...field.Expr) IRechargelogVideoDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rechargelogVideoDo) Distinct(cols ...field.Expr) IRechargelogVideoDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rechargelogVideoDo) Omit(cols ...field.Expr) IRechargelogVideoDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rechargelogVideoDo) Join(table schema.Tabler, on ...field.Expr) IRechargelogVideoDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rechargelogVideoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRechargelogVideoDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rechargelogVideoDo) RightJoin(table schema.Tabler, on ...field.Expr) IRechargelogVideoDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rechargelogVideoDo) Group(cols ...field.Expr) IRechargelogVideoDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rechargelogVideoDo) Having(conds ...gen.Condition) IRechargelogVideoDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rechargelogVideoDo) Limit(limit int) IRechargelogVideoDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rechargelogVideoDo) Offset(offset int) IRechargelogVideoDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rechargelogVideoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargelogVideoDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rechargelogVideoDo) Unscoped() IRechargelogVideoDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rechargelogVideoDo) Create(values ...*model.RechargelogVideo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rechargelogVideoDo) CreateInBatches(values []*model.RechargelogVideo, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rechargelogVideoDo) Save(values ...*model.RechargelogVideo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rechargelogVideoDo) First() (*model.RechargelogVideo, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogVideo), nil
	}
}

func (r rechargelogVideoDo) Take() (*model.RechargelogVideo, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogVideo), nil
	}
}

func (r rechargelogVideoDo) Last() (*model.RechargelogVideo, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogVideo), nil
	}
}

func (r rechargelogVideoDo) Find() ([]*model.RechargelogVideo, error) {
	result, err := r.DO.Find()
	return result.([]*model.RechargelogVideo), err
}

func (r rechargelogVideoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RechargelogVideo, err error) {
	buf := make([]*model.RechargelogVideo, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rechargelogVideoDo) FindInBatches(result *[]*model.RechargelogVideo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rechargelogVideoDo) Attrs(attrs ...field.AssignExpr) IRechargelogVideoDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rechargelogVideoDo) Assign(attrs ...field.AssignExpr) IRechargelogVideoDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rechargelogVideoDo) Joins(fields ...field.RelationField) IRechargelogVideoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rechargelogVideoDo) Preload(fields ...field.RelationField) IRechargelogVideoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rechargelogVideoDo) FirstOrInit() (*model.RechargelogVideo, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogVideo), nil
	}
}

func (r rechargelogVideoDo) FirstOrCreate() (*model.RechargelogVideo, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogVideo), nil
	}
}

func (r rechargelogVideoDo) FindByPage(offset int, limit int) (result []*model.RechargelogVideo, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rechargelogVideoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rechargelogVideoDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rechargelogVideoDo) Delete(models ...*model.RechargelogVideo) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rechargelogVideoDo) withDO(do gen.Dao) *rechargelogVideoDo {
	r.DO = *do.(*gen.DO)
	return r
}
