// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newFanyongXflog(db *gorm.DB, opts ...gen.DOOption) fanyongXflog {
	_fanyongXflog := fanyongXflog{}

	_fanyongXflog.fanyongXflogDo.UseDB(db, opts...)
	_fanyongXflog.fanyongXflogDo.UseModel(&model.FanyongXflog{})

	tableName := _fanyongXflog.fanyongXflogDo.TableName()
	_fanyongXflog.ALL = field.NewAsterisk(tableName)
	_fanyongXflog.ID = field.NewUint32(tableName, "id")
	_fanyongXflog.Aid = field.NewUint32(tableName, "aid")
	_fanyongXflog.Xffee = field.NewFloat64(tableName, "xffee")
	_fanyongXflog.Createtime = field.NewString(tableName, "createtime")

	_fanyongXflog.fillFieldMap()

	return _fanyongXflog
}

type fanyongXflog struct {
	fanyongXflogDo

	ALL        field.Asterisk
	ID         field.Uint32
	Aid        field.Uint32
	Xffee      field.Float64 // å…ƒ
	Createtime field.String

	fieldMap map[string]field.Expr
}

func (f fanyongXflog) Table(newTableName string) *fanyongXflog {
	f.fanyongXflogDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fanyongXflog) As(alias string) *fanyongXflog {
	f.fanyongXflogDo.DO = *(f.fanyongXflogDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fanyongXflog) updateTableName(table string) *fanyongXflog {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint32(table, "id")
	f.Aid = field.NewUint32(table, "aid")
	f.Xffee = field.NewFloat64(table, "xffee")
	f.Createtime = field.NewString(table, "createtime")

	f.fillFieldMap()

	return f
}

func (f *fanyongXflog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fanyongXflog) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 4)
	f.fieldMap["id"] = f.ID
	f.fieldMap["aid"] = f.Aid
	f.fieldMap["xffee"] = f.Xffee
	f.fieldMap["createtime"] = f.Createtime
}

func (f fanyongXflog) clone(db *gorm.DB) fanyongXflog {
	f.fanyongXflogDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fanyongXflog) replaceDB(db *gorm.DB) fanyongXflog {
	f.fanyongXflogDo.ReplaceDB(db)
	return f
}

type fanyongXflogDo struct{ gen.DO }

type IFanyongXflogDo interface {
	gen.SubQuery
	Debug() IFanyongXflogDo
	WithContext(ctx context.Context) IFanyongXflogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFanyongXflogDo
	WriteDB() IFanyongXflogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFanyongXflogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFanyongXflogDo
	Not(conds ...gen.Condition) IFanyongXflogDo
	Or(conds ...gen.Condition) IFanyongXflogDo
	Select(conds ...field.Expr) IFanyongXflogDo
	Where(conds ...gen.Condition) IFanyongXflogDo
	Order(conds ...field.Expr) IFanyongXflogDo
	Distinct(cols ...field.Expr) IFanyongXflogDo
	Omit(cols ...field.Expr) IFanyongXflogDo
	Join(table schema.Tabler, on ...field.Expr) IFanyongXflogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFanyongXflogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFanyongXflogDo
	Group(cols ...field.Expr) IFanyongXflogDo
	Having(conds ...gen.Condition) IFanyongXflogDo
	Limit(limit int) IFanyongXflogDo
	Offset(offset int) IFanyongXflogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFanyongXflogDo
	Unscoped() IFanyongXflogDo
	Create(values ...*model.FanyongXflog) error
	CreateInBatches(values []*model.FanyongXflog, batchSize int) error
	Save(values ...*model.FanyongXflog) error
	First() (*model.FanyongXflog, error)
	Take() (*model.FanyongXflog, error)
	Last() (*model.FanyongXflog, error)
	Find() ([]*model.FanyongXflog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FanyongXflog, err error)
	FindInBatches(result *[]*model.FanyongXflog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FanyongXflog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFanyongXflogDo
	Assign(attrs ...field.AssignExpr) IFanyongXflogDo
	Joins(fields ...field.RelationField) IFanyongXflogDo
	Preload(fields ...field.RelationField) IFanyongXflogDo
	FirstOrInit() (*model.FanyongXflog, error)
	FirstOrCreate() (*model.FanyongXflog, error)
	FindByPage(offset int, limit int) (result []*model.FanyongXflog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFanyongXflogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fanyongXflogDo) Debug() IFanyongXflogDo {
	return f.withDO(f.DO.Debug())
}

func (f fanyongXflogDo) WithContext(ctx context.Context) IFanyongXflogDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fanyongXflogDo) ReadDB() IFanyongXflogDo {
	return f.Clauses(dbresolver.Read)
}

func (f fanyongXflogDo) WriteDB() IFanyongXflogDo {
	return f.Clauses(dbresolver.Write)
}

func (f fanyongXflogDo) Session(config *gorm.Session) IFanyongXflogDo {
	return f.withDO(f.DO.Session(config))
}

func (f fanyongXflogDo) Clauses(conds ...clause.Expression) IFanyongXflogDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fanyongXflogDo) Returning(value interface{}, columns ...string) IFanyongXflogDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fanyongXflogDo) Not(conds ...gen.Condition) IFanyongXflogDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fanyongXflogDo) Or(conds ...gen.Condition) IFanyongXflogDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fanyongXflogDo) Select(conds ...field.Expr) IFanyongXflogDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fanyongXflogDo) Where(conds ...gen.Condition) IFanyongXflogDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fanyongXflogDo) Order(conds ...field.Expr) IFanyongXflogDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fanyongXflogDo) Distinct(cols ...field.Expr) IFanyongXflogDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fanyongXflogDo) Omit(cols ...field.Expr) IFanyongXflogDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fanyongXflogDo) Join(table schema.Tabler, on ...field.Expr) IFanyongXflogDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fanyongXflogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFanyongXflogDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fanyongXflogDo) RightJoin(table schema.Tabler, on ...field.Expr) IFanyongXflogDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fanyongXflogDo) Group(cols ...field.Expr) IFanyongXflogDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fanyongXflogDo) Having(conds ...gen.Condition) IFanyongXflogDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fanyongXflogDo) Limit(limit int) IFanyongXflogDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fanyongXflogDo) Offset(offset int) IFanyongXflogDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fanyongXflogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFanyongXflogDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fanyongXflogDo) Unscoped() IFanyongXflogDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fanyongXflogDo) Create(values ...*model.FanyongXflog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fanyongXflogDo) CreateInBatches(values []*model.FanyongXflog, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fanyongXflogDo) Save(values ...*model.FanyongXflog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fanyongXflogDo) First() (*model.FanyongXflog, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FanyongXflog), nil
	}
}

func (f fanyongXflogDo) Take() (*model.FanyongXflog, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FanyongXflog), nil
	}
}

func (f fanyongXflogDo) Last() (*model.FanyongXflog, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FanyongXflog), nil
	}
}

func (f fanyongXflogDo) Find() ([]*model.FanyongXflog, error) {
	result, err := f.DO.Find()
	return result.([]*model.FanyongXflog), err
}

func (f fanyongXflogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FanyongXflog, err error) {
	buf := make([]*model.FanyongXflog, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fanyongXflogDo) FindInBatches(result *[]*model.FanyongXflog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fanyongXflogDo) Attrs(attrs ...field.AssignExpr) IFanyongXflogDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fanyongXflogDo) Assign(attrs ...field.AssignExpr) IFanyongXflogDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fanyongXflogDo) Joins(fields ...field.RelationField) IFanyongXflogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fanyongXflogDo) Preload(fields ...field.RelationField) IFanyongXflogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fanyongXflogDo) FirstOrInit() (*model.FanyongXflog, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FanyongXflog), nil
	}
}

func (f fanyongXflogDo) FirstOrCreate() (*model.FanyongXflog, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FanyongXflog), nil
	}
}

func (f fanyongXflogDo) FindByPage(offset int, limit int) (result []*model.FanyongXflog, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fanyongXflogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fanyongXflogDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fanyongXflogDo) Delete(models ...*model.FanyongXflog) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fanyongXflogDo) withDO(do gen.Dao) *fanyongXflogDo {
	f.DO = *do.(*gen.DO)
	return f
}
