// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newTempadddiamond(db *gorm.DB, opts ...gen.DOOption) tempadddiamond {
	_tempadddiamond := tempadddiamond{}

	_tempadddiamond.tempadddiamondDo.UseDB(db, opts...)
	_tempadddiamond.tempadddiamondDo.UseModel(&model.Tempadddiamond{})

	tableName := _tempadddiamond.tempadddiamondDo.TableName()
	_tempadddiamond.ALL = field.NewAsterisk(tableName)
	_tempadddiamond.UserID = field.NewInt32(tableName, "userId")
	_tempadddiamond.Score = field.NewInt32(tableName, "score")
	_tempadddiamond.ChangeType = field.NewInt32(tableName, "change_type")

	_tempadddiamond.fillFieldMap()

	return _tempadddiamond
}

type tempadddiamond struct {
	tempadddiamondDo

	ALL        field.Asterisk
	UserID     field.Int32
	Score      field.Int32
	ChangeType field.Int32

	fieldMap map[string]field.Expr
}

func (t tempadddiamond) Table(newTableName string) *tempadddiamond {
	t.tempadddiamondDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tempadddiamond) As(alias string) *tempadddiamond {
	t.tempadddiamondDo.DO = *(t.tempadddiamondDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tempadddiamond) updateTableName(table string) *tempadddiamond {
	t.ALL = field.NewAsterisk(table)
	t.UserID = field.NewInt32(table, "userId")
	t.Score = field.NewInt32(table, "score")
	t.ChangeType = field.NewInt32(table, "change_type")

	t.fillFieldMap()

	return t
}

func (t *tempadddiamond) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tempadddiamond) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["userId"] = t.UserID
	t.fieldMap["score"] = t.Score
	t.fieldMap["change_type"] = t.ChangeType
}

func (t tempadddiamond) clone(db *gorm.DB) tempadddiamond {
	t.tempadddiamondDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tempadddiamond) replaceDB(db *gorm.DB) tempadddiamond {
	t.tempadddiamondDo.ReplaceDB(db)
	return t
}

type tempadddiamondDo struct{ gen.DO }

type ITempadddiamondDo interface {
	gen.SubQuery
	Debug() ITempadddiamondDo
	WithContext(ctx context.Context) ITempadddiamondDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITempadddiamondDo
	WriteDB() ITempadddiamondDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITempadddiamondDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITempadddiamondDo
	Not(conds ...gen.Condition) ITempadddiamondDo
	Or(conds ...gen.Condition) ITempadddiamondDo
	Select(conds ...field.Expr) ITempadddiamondDo
	Where(conds ...gen.Condition) ITempadddiamondDo
	Order(conds ...field.Expr) ITempadddiamondDo
	Distinct(cols ...field.Expr) ITempadddiamondDo
	Omit(cols ...field.Expr) ITempadddiamondDo
	Join(table schema.Tabler, on ...field.Expr) ITempadddiamondDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITempadddiamondDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITempadddiamondDo
	Group(cols ...field.Expr) ITempadddiamondDo
	Having(conds ...gen.Condition) ITempadddiamondDo
	Limit(limit int) ITempadddiamondDo
	Offset(offset int) ITempadddiamondDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITempadddiamondDo
	Unscoped() ITempadddiamondDo
	Create(values ...*model.Tempadddiamond) error
	CreateInBatches(values []*model.Tempadddiamond, batchSize int) error
	Save(values ...*model.Tempadddiamond) error
	First() (*model.Tempadddiamond, error)
	Take() (*model.Tempadddiamond, error)
	Last() (*model.Tempadddiamond, error)
	Find() ([]*model.Tempadddiamond, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Tempadddiamond, err error)
	FindInBatches(result *[]*model.Tempadddiamond, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Tempadddiamond) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITempadddiamondDo
	Assign(attrs ...field.AssignExpr) ITempadddiamondDo
	Joins(fields ...field.RelationField) ITempadddiamondDo
	Preload(fields ...field.RelationField) ITempadddiamondDo
	FirstOrInit() (*model.Tempadddiamond, error)
	FirstOrCreate() (*model.Tempadddiamond, error)
	FindByPage(offset int, limit int) (result []*model.Tempadddiamond, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITempadddiamondDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tempadddiamondDo) Debug() ITempadddiamondDo {
	return t.withDO(t.DO.Debug())
}

func (t tempadddiamondDo) WithContext(ctx context.Context) ITempadddiamondDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tempadddiamondDo) ReadDB() ITempadddiamondDo {
	return t.Clauses(dbresolver.Read)
}

func (t tempadddiamondDo) WriteDB() ITempadddiamondDo {
	return t.Clauses(dbresolver.Write)
}

func (t tempadddiamondDo) Session(config *gorm.Session) ITempadddiamondDo {
	return t.withDO(t.DO.Session(config))
}

func (t tempadddiamondDo) Clauses(conds ...clause.Expression) ITempadddiamondDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tempadddiamondDo) Returning(value interface{}, columns ...string) ITempadddiamondDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tempadddiamondDo) Not(conds ...gen.Condition) ITempadddiamondDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tempadddiamondDo) Or(conds ...gen.Condition) ITempadddiamondDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tempadddiamondDo) Select(conds ...field.Expr) ITempadddiamondDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tempadddiamondDo) Where(conds ...gen.Condition) ITempadddiamondDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tempadddiamondDo) Order(conds ...field.Expr) ITempadddiamondDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tempadddiamondDo) Distinct(cols ...field.Expr) ITempadddiamondDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tempadddiamondDo) Omit(cols ...field.Expr) ITempadddiamondDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tempadddiamondDo) Join(table schema.Tabler, on ...field.Expr) ITempadddiamondDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tempadddiamondDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITempadddiamondDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tempadddiamondDo) RightJoin(table schema.Tabler, on ...field.Expr) ITempadddiamondDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tempadddiamondDo) Group(cols ...field.Expr) ITempadddiamondDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tempadddiamondDo) Having(conds ...gen.Condition) ITempadddiamondDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tempadddiamondDo) Limit(limit int) ITempadddiamondDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tempadddiamondDo) Offset(offset int) ITempadddiamondDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tempadddiamondDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITempadddiamondDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tempadddiamondDo) Unscoped() ITempadddiamondDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tempadddiamondDo) Create(values ...*model.Tempadddiamond) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tempadddiamondDo) CreateInBatches(values []*model.Tempadddiamond, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tempadddiamondDo) Save(values ...*model.Tempadddiamond) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tempadddiamondDo) First() (*model.Tempadddiamond, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tempadddiamond), nil
	}
}

func (t tempadddiamondDo) Take() (*model.Tempadddiamond, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tempadddiamond), nil
	}
}

func (t tempadddiamondDo) Last() (*model.Tempadddiamond, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tempadddiamond), nil
	}
}

func (t tempadddiamondDo) Find() ([]*model.Tempadddiamond, error) {
	result, err := t.DO.Find()
	return result.([]*model.Tempadddiamond), err
}

func (t tempadddiamondDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Tempadddiamond, err error) {
	buf := make([]*model.Tempadddiamond, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tempadddiamondDo) FindInBatches(result *[]*model.Tempadddiamond, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tempadddiamondDo) Attrs(attrs ...field.AssignExpr) ITempadddiamondDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tempadddiamondDo) Assign(attrs ...field.AssignExpr) ITempadddiamondDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tempadddiamondDo) Joins(fields ...field.RelationField) ITempadddiamondDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tempadddiamondDo) Preload(fields ...field.RelationField) ITempadddiamondDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tempadddiamondDo) FirstOrInit() (*model.Tempadddiamond, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tempadddiamond), nil
	}
}

func (t tempadddiamondDo) FirstOrCreate() (*model.Tempadddiamond, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tempadddiamond), nil
	}
}

func (t tempadddiamondDo) FindByPage(offset int, limit int) (result []*model.Tempadddiamond, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tempadddiamondDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tempadddiamondDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tempadddiamondDo) Delete(models ...*model.Tempadddiamond) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tempadddiamondDo) withDO(do gen.Dao) *tempadddiamondDo {
	t.DO = *do.(*gen.DO)
	return t
}
