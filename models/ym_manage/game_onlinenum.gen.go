// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newGameOnlinenum(db *gorm.DB, opts ...gen.DOOption) gameOnlinenum {
	_gameOnlinenum := gameOnlinenum{}

	_gameOnlinenum.gameOnlinenumDo.UseDB(db, opts...)
	_gameOnlinenum.gameOnlinenumDo.UseModel(&model.GameOnlinenum{})

	tableName := _gameOnlinenum.gameOnlinenumDo.TableName()
	_gameOnlinenum.ALL = field.NewAsterisk(tableName)
	_gameOnlinenum.ID = field.NewUint32(tableName, "id")
	_gameOnlinenum.Gid = field.NewUint32(tableName, "gid")
	_gameOnlinenum.Gport = field.NewString(tableName, "gport")
	_gameOnlinenum.Num = field.NewUint32(tableName, "num")
	_gameOnlinenum.Createtime = field.NewString(tableName, "createtime")

	_gameOnlinenum.fillFieldMap()

	return _gameOnlinenum
}

type gameOnlinenum struct {
	gameOnlinenumDo

	ALL        field.Asterisk
	ID         field.Uint32
	Gid        field.Uint32
	Gport      field.String
	Num        field.Uint32
	Createtime field.String

	fieldMap map[string]field.Expr
}

func (g gameOnlinenum) Table(newTableName string) *gameOnlinenum {
	g.gameOnlinenumDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameOnlinenum) As(alias string) *gameOnlinenum {
	g.gameOnlinenumDo.DO = *(g.gameOnlinenumDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameOnlinenum) updateTableName(table string) *gameOnlinenum {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint32(table, "id")
	g.Gid = field.NewUint32(table, "gid")
	g.Gport = field.NewString(table, "gport")
	g.Num = field.NewUint32(table, "num")
	g.Createtime = field.NewString(table, "createtime")

	g.fillFieldMap()

	return g
}

func (g *gameOnlinenum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameOnlinenum) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 5)
	g.fieldMap["id"] = g.ID
	g.fieldMap["gid"] = g.Gid
	g.fieldMap["gport"] = g.Gport
	g.fieldMap["num"] = g.Num
	g.fieldMap["createtime"] = g.Createtime
}

func (g gameOnlinenum) clone(db *gorm.DB) gameOnlinenum {
	g.gameOnlinenumDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameOnlinenum) replaceDB(db *gorm.DB) gameOnlinenum {
	g.gameOnlinenumDo.ReplaceDB(db)
	return g
}

type gameOnlinenumDo struct{ gen.DO }

type IGameOnlinenumDo interface {
	gen.SubQuery
	Debug() IGameOnlinenumDo
	WithContext(ctx context.Context) IGameOnlinenumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGameOnlinenumDo
	WriteDB() IGameOnlinenumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGameOnlinenumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGameOnlinenumDo
	Not(conds ...gen.Condition) IGameOnlinenumDo
	Or(conds ...gen.Condition) IGameOnlinenumDo
	Select(conds ...field.Expr) IGameOnlinenumDo
	Where(conds ...gen.Condition) IGameOnlinenumDo
	Order(conds ...field.Expr) IGameOnlinenumDo
	Distinct(cols ...field.Expr) IGameOnlinenumDo
	Omit(cols ...field.Expr) IGameOnlinenumDo
	Join(table schema.Tabler, on ...field.Expr) IGameOnlinenumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGameOnlinenumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGameOnlinenumDo
	Group(cols ...field.Expr) IGameOnlinenumDo
	Having(conds ...gen.Condition) IGameOnlinenumDo
	Limit(limit int) IGameOnlinenumDo
	Offset(offset int) IGameOnlinenumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGameOnlinenumDo
	Unscoped() IGameOnlinenumDo
	Create(values ...*model.GameOnlinenum) error
	CreateInBatches(values []*model.GameOnlinenum, batchSize int) error
	Save(values ...*model.GameOnlinenum) error
	First() (*model.GameOnlinenum, error)
	Take() (*model.GameOnlinenum, error)
	Last() (*model.GameOnlinenum, error)
	Find() ([]*model.GameOnlinenum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameOnlinenum, err error)
	FindInBatches(result *[]*model.GameOnlinenum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GameOnlinenum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGameOnlinenumDo
	Assign(attrs ...field.AssignExpr) IGameOnlinenumDo
	Joins(fields ...field.RelationField) IGameOnlinenumDo
	Preload(fields ...field.RelationField) IGameOnlinenumDo
	FirstOrInit() (*model.GameOnlinenum, error)
	FirstOrCreate() (*model.GameOnlinenum, error)
	FindByPage(offset int, limit int) (result []*model.GameOnlinenum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGameOnlinenumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gameOnlinenumDo) Debug() IGameOnlinenumDo {
	return g.withDO(g.DO.Debug())
}

func (g gameOnlinenumDo) WithContext(ctx context.Context) IGameOnlinenumDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameOnlinenumDo) ReadDB() IGameOnlinenumDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameOnlinenumDo) WriteDB() IGameOnlinenumDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameOnlinenumDo) Session(config *gorm.Session) IGameOnlinenumDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameOnlinenumDo) Clauses(conds ...clause.Expression) IGameOnlinenumDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameOnlinenumDo) Returning(value interface{}, columns ...string) IGameOnlinenumDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameOnlinenumDo) Not(conds ...gen.Condition) IGameOnlinenumDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameOnlinenumDo) Or(conds ...gen.Condition) IGameOnlinenumDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameOnlinenumDo) Select(conds ...field.Expr) IGameOnlinenumDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameOnlinenumDo) Where(conds ...gen.Condition) IGameOnlinenumDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameOnlinenumDo) Order(conds ...field.Expr) IGameOnlinenumDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameOnlinenumDo) Distinct(cols ...field.Expr) IGameOnlinenumDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameOnlinenumDo) Omit(cols ...field.Expr) IGameOnlinenumDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameOnlinenumDo) Join(table schema.Tabler, on ...field.Expr) IGameOnlinenumDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameOnlinenumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGameOnlinenumDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameOnlinenumDo) RightJoin(table schema.Tabler, on ...field.Expr) IGameOnlinenumDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameOnlinenumDo) Group(cols ...field.Expr) IGameOnlinenumDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameOnlinenumDo) Having(conds ...gen.Condition) IGameOnlinenumDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameOnlinenumDo) Limit(limit int) IGameOnlinenumDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameOnlinenumDo) Offset(offset int) IGameOnlinenumDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameOnlinenumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGameOnlinenumDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameOnlinenumDo) Unscoped() IGameOnlinenumDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameOnlinenumDo) Create(values ...*model.GameOnlinenum) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameOnlinenumDo) CreateInBatches(values []*model.GameOnlinenum, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameOnlinenumDo) Save(values ...*model.GameOnlinenum) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameOnlinenumDo) First() (*model.GameOnlinenum, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameOnlinenum), nil
	}
}

func (g gameOnlinenumDo) Take() (*model.GameOnlinenum, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameOnlinenum), nil
	}
}

func (g gameOnlinenumDo) Last() (*model.GameOnlinenum, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameOnlinenum), nil
	}
}

func (g gameOnlinenumDo) Find() ([]*model.GameOnlinenum, error) {
	result, err := g.DO.Find()
	return result.([]*model.GameOnlinenum), err
}

func (g gameOnlinenumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameOnlinenum, err error) {
	buf := make([]*model.GameOnlinenum, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameOnlinenumDo) FindInBatches(result *[]*model.GameOnlinenum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameOnlinenumDo) Attrs(attrs ...field.AssignExpr) IGameOnlinenumDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameOnlinenumDo) Assign(attrs ...field.AssignExpr) IGameOnlinenumDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameOnlinenumDo) Joins(fields ...field.RelationField) IGameOnlinenumDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameOnlinenumDo) Preload(fields ...field.RelationField) IGameOnlinenumDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameOnlinenumDo) FirstOrInit() (*model.GameOnlinenum, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameOnlinenum), nil
	}
}

func (g gameOnlinenumDo) FirstOrCreate() (*model.GameOnlinenum, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameOnlinenum), nil
	}
}

func (g gameOnlinenumDo) FindByPage(offset int, limit int) (result []*model.GameOnlinenum, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameOnlinenumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameOnlinenumDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameOnlinenumDo) Delete(models ...*model.GameOnlinenum) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameOnlinenumDo) withDO(do gen.Dao) *gameOnlinenumDo {
	g.DO = *do.(*gen.DO)
	return g
}
