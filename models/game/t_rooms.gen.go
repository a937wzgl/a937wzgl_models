// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package game

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newTRoom(db *gorm.DB, opts ...gen.DOOption) tRoom {
	_tRoom := tRoom{}

	_tRoom.tRoomDo.UseDB(db, opts...)
	_tRoom.tRoomDo.UseModel(&model.TRoom{})

	tableName := _tRoom.tRoomDo.TableName()
	_tRoom.ALL = field.NewAsterisk(tableName)
	_tRoom.UUID = field.NewString(tableName, "uuid")
	_tRoom.ID = field.NewString(tableName, "id")
	_tRoom.Genre = field.NewInt32(tableName, "genre")
	_tRoom.RoomType = field.NewInt32(tableName, "room_type")
	_tRoom.Scene = field.NewString(tableName, "scene")
	_tRoom.BaseInfo = field.NewString(tableName, "base_info")
	_tRoom.CreateTime = field.NewInt32(tableName, "create_time")
	_tRoom.NumOfTurns = field.NewInt32(tableName, "num_of_turns")
	_tRoom.NextButton = field.NewInt32(tableName, "next_button")
	_tRoom.UserId0 = field.NewInt32(tableName, "user_id0")
	_tRoom.UserIcon0 = field.NewString(tableName, "user_icon0")
	_tRoom.UserName0 = field.NewString(tableName, "user_name0")
	_tRoom.UserScore0 = field.NewInt32(tableName, "user_score0")
	_tRoom.UserId1 = field.NewInt32(tableName, "user_id1")
	_tRoom.UserIcon1 = field.NewString(tableName, "user_icon1")
	_tRoom.UserName1 = field.NewString(tableName, "user_name1")
	_tRoom.UserScore1 = field.NewInt32(tableName, "user_score1")
	_tRoom.UserId2 = field.NewInt32(tableName, "user_id2")
	_tRoom.UserIcon2 = field.NewString(tableName, "user_icon2")
	_tRoom.UserName2 = field.NewString(tableName, "user_name2")
	_tRoom.UserScore2 = field.NewInt32(tableName, "user_score2")
	_tRoom.UserId3 = field.NewInt32(tableName, "user_id3")
	_tRoom.UserIcon3 = field.NewString(tableName, "user_icon3")
	_tRoom.UserName3 = field.NewString(tableName, "user_name3")
	_tRoom.UserScore3 = field.NewInt32(tableName, "user_score3")
	_tRoom.UserId4 = field.NewInt32(tableName, "user_id4")
	_tRoom.UserIcon4 = field.NewString(tableName, "user_icon4")
	_tRoom.UserName4 = field.NewString(tableName, "user_name4")
	_tRoom.UserScore4 = field.NewInt32(tableName, "user_score4")
	_tRoom.UserId5 = field.NewInt32(tableName, "user_id5")
	_tRoom.UserIcon5 = field.NewString(tableName, "user_icon5")
	_tRoom.UserName5 = field.NewString(tableName, "user_name5")
	_tRoom.UserScore5 = field.NewInt32(tableName, "user_score5")
	_tRoom.UserId6 = field.NewInt32(tableName, "user_id6")
	_tRoom.UserIcon6 = field.NewString(tableName, "user_icon6")
	_tRoom.UserName6 = field.NewString(tableName, "user_name6")
	_tRoom.UserScore6 = field.NewInt32(tableName, "user_score6")
	_tRoom.UserId7 = field.NewInt32(tableName, "user_id7")
	_tRoom.UserIcon7 = field.NewString(tableName, "user_icon7")
	_tRoom.UserName7 = field.NewString(tableName, "user_name7")
	_tRoom.UserScore7 = field.NewInt32(tableName, "user_score7")
	_tRoom.UserId8 = field.NewInt32(tableName, "user_id8")
	_tRoom.UserIcon8 = field.NewString(tableName, "user_icon8")
	_tRoom.UserName8 = field.NewString(tableName, "user_name8")
	_tRoom.UserScore8 = field.NewInt32(tableName, "user_score8")
	_tRoom.IP = field.NewString(tableName, "ip")
	_tRoom.Port = field.NewInt32(tableName, "port")

	_tRoom.fillFieldMap()

	return _tRoom
}

type tRoom struct {
	tRoomDo

	ALL        field.Asterisk
	UUID       field.String
	ID         field.String
	Genre      field.Int32
	RoomType   field.Int32
	Scene      field.String
	BaseInfo   field.String
	CreateTime field.Int32
	NumOfTurns field.Int32
	NextButton field.Int32
	UserId0    field.Int32
	UserIcon0  field.String
	UserName0  field.String
	UserScore0 field.Int32
	UserId1    field.Int32
	UserIcon1  field.String
	UserName1  field.String
	UserScore1 field.Int32
	UserId2    field.Int32
	UserIcon2  field.String
	UserName2  field.String
	UserScore2 field.Int32
	UserId3    field.Int32
	UserIcon3  field.String
	UserName3  field.String
	UserScore3 field.Int32
	UserId4    field.Int32
	UserIcon4  field.String
	UserName4  field.String
	UserScore4 field.Int32
	UserId5    field.Int32
	UserIcon5  field.String
	UserName5  field.String
	UserScore5 field.Int32
	UserId6    field.Int32
	UserIcon6  field.String
	UserName6  field.String
	UserScore6 field.Int32
	UserId7    field.Int32
	UserIcon7  field.String
	UserName7  field.String
	UserScore7 field.Int32
	UserId8    field.Int32
	UserIcon8  field.String
	UserName8  field.String
	UserScore8 field.Int32
	IP         field.String
	Port       field.Int32

	fieldMap map[string]field.Expr
}

func (t tRoom) Table(newTableName string) *tRoom {
	t.tRoomDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tRoom) As(alias string) *tRoom {
	t.tRoomDo.DO = *(t.tRoomDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tRoom) updateTableName(table string) *tRoom {
	t.ALL = field.NewAsterisk(table)
	t.UUID = field.NewString(table, "uuid")
	t.ID = field.NewString(table, "id")
	t.Genre = field.NewInt32(table, "genre")
	t.RoomType = field.NewInt32(table, "room_type")
	t.Scene = field.NewString(table, "scene")
	t.BaseInfo = field.NewString(table, "base_info")
	t.CreateTime = field.NewInt32(table, "create_time")
	t.NumOfTurns = field.NewInt32(table, "num_of_turns")
	t.NextButton = field.NewInt32(table, "next_button")
	t.UserId0 = field.NewInt32(table, "user_id0")
	t.UserIcon0 = field.NewString(table, "user_icon0")
	t.UserName0 = field.NewString(table, "user_name0")
	t.UserScore0 = field.NewInt32(table, "user_score0")
	t.UserId1 = field.NewInt32(table, "user_id1")
	t.UserIcon1 = field.NewString(table, "user_icon1")
	t.UserName1 = field.NewString(table, "user_name1")
	t.UserScore1 = field.NewInt32(table, "user_score1")
	t.UserId2 = field.NewInt32(table, "user_id2")
	t.UserIcon2 = field.NewString(table, "user_icon2")
	t.UserName2 = field.NewString(table, "user_name2")
	t.UserScore2 = field.NewInt32(table, "user_score2")
	t.UserId3 = field.NewInt32(table, "user_id3")
	t.UserIcon3 = field.NewString(table, "user_icon3")
	t.UserName3 = field.NewString(table, "user_name3")
	t.UserScore3 = field.NewInt32(table, "user_score3")
	t.UserId4 = field.NewInt32(table, "user_id4")
	t.UserIcon4 = field.NewString(table, "user_icon4")
	t.UserName4 = field.NewString(table, "user_name4")
	t.UserScore4 = field.NewInt32(table, "user_score4")
	t.UserId5 = field.NewInt32(table, "user_id5")
	t.UserIcon5 = field.NewString(table, "user_icon5")
	t.UserName5 = field.NewString(table, "user_name5")
	t.UserScore5 = field.NewInt32(table, "user_score5")
	t.UserId6 = field.NewInt32(table, "user_id6")
	t.UserIcon6 = field.NewString(table, "user_icon6")
	t.UserName6 = field.NewString(table, "user_name6")
	t.UserScore6 = field.NewInt32(table, "user_score6")
	t.UserId7 = field.NewInt32(table, "user_id7")
	t.UserIcon7 = field.NewString(table, "user_icon7")
	t.UserName7 = field.NewString(table, "user_name7")
	t.UserScore7 = field.NewInt32(table, "user_score7")
	t.UserId8 = field.NewInt32(table, "user_id8")
	t.UserIcon8 = field.NewString(table, "user_icon8")
	t.UserName8 = field.NewString(table, "user_name8")
	t.UserScore8 = field.NewInt32(table, "user_score8")
	t.IP = field.NewString(table, "ip")
	t.Port = field.NewInt32(table, "port")

	t.fillFieldMap()

	return t
}

func (t *tRoom) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tRoom) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 47)
	t.fieldMap["uuid"] = t.UUID
	t.fieldMap["id"] = t.ID
	t.fieldMap["genre"] = t.Genre
	t.fieldMap["room_type"] = t.RoomType
	t.fieldMap["scene"] = t.Scene
	t.fieldMap["base_info"] = t.BaseInfo
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["num_of_turns"] = t.NumOfTurns
	t.fieldMap["next_button"] = t.NextButton
	t.fieldMap["user_id0"] = t.UserId0
	t.fieldMap["user_icon0"] = t.UserIcon0
	t.fieldMap["user_name0"] = t.UserName0
	t.fieldMap["user_score0"] = t.UserScore0
	t.fieldMap["user_id1"] = t.UserId1
	t.fieldMap["user_icon1"] = t.UserIcon1
	t.fieldMap["user_name1"] = t.UserName1
	t.fieldMap["user_score1"] = t.UserScore1
	t.fieldMap["user_id2"] = t.UserId2
	t.fieldMap["user_icon2"] = t.UserIcon2
	t.fieldMap["user_name2"] = t.UserName2
	t.fieldMap["user_score2"] = t.UserScore2
	t.fieldMap["user_id3"] = t.UserId3
	t.fieldMap["user_icon3"] = t.UserIcon3
	t.fieldMap["user_name3"] = t.UserName3
	t.fieldMap["user_score3"] = t.UserScore3
	t.fieldMap["user_id4"] = t.UserId4
	t.fieldMap["user_icon4"] = t.UserIcon4
	t.fieldMap["user_name4"] = t.UserName4
	t.fieldMap["user_score4"] = t.UserScore4
	t.fieldMap["user_id5"] = t.UserId5
	t.fieldMap["user_icon5"] = t.UserIcon5
	t.fieldMap["user_name5"] = t.UserName5
	t.fieldMap["user_score5"] = t.UserScore5
	t.fieldMap["user_id6"] = t.UserId6
	t.fieldMap["user_icon6"] = t.UserIcon6
	t.fieldMap["user_name6"] = t.UserName6
	t.fieldMap["user_score6"] = t.UserScore6
	t.fieldMap["user_id7"] = t.UserId7
	t.fieldMap["user_icon7"] = t.UserIcon7
	t.fieldMap["user_name7"] = t.UserName7
	t.fieldMap["user_score7"] = t.UserScore7
	t.fieldMap["user_id8"] = t.UserId8
	t.fieldMap["user_icon8"] = t.UserIcon8
	t.fieldMap["user_name8"] = t.UserName8
	t.fieldMap["user_score8"] = t.UserScore8
	t.fieldMap["ip"] = t.IP
	t.fieldMap["port"] = t.Port
}

func (t tRoom) clone(db *gorm.DB) tRoom {
	t.tRoomDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tRoom) replaceDB(db *gorm.DB) tRoom {
	t.tRoomDo.ReplaceDB(db)
	return t
}

type tRoomDo struct{ gen.DO }

type ITRoomDo interface {
	gen.SubQuery
	Debug() ITRoomDo
	WithContext(ctx context.Context) ITRoomDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITRoomDo
	WriteDB() ITRoomDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITRoomDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITRoomDo
	Not(conds ...gen.Condition) ITRoomDo
	Or(conds ...gen.Condition) ITRoomDo
	Select(conds ...field.Expr) ITRoomDo
	Where(conds ...gen.Condition) ITRoomDo
	Order(conds ...field.Expr) ITRoomDo
	Distinct(cols ...field.Expr) ITRoomDo
	Omit(cols ...field.Expr) ITRoomDo
	Join(table schema.Tabler, on ...field.Expr) ITRoomDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITRoomDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITRoomDo
	Group(cols ...field.Expr) ITRoomDo
	Having(conds ...gen.Condition) ITRoomDo
	Limit(limit int) ITRoomDo
	Offset(offset int) ITRoomDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITRoomDo
	Unscoped() ITRoomDo
	Create(values ...*model.TRoom) error
	CreateInBatches(values []*model.TRoom, batchSize int) error
	Save(values ...*model.TRoom) error
	First() (*model.TRoom, error)
	Take() (*model.TRoom, error)
	Last() (*model.TRoom, error)
	Find() ([]*model.TRoom, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TRoom, err error)
	FindInBatches(result *[]*model.TRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TRoom) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITRoomDo
	Assign(attrs ...field.AssignExpr) ITRoomDo
	Joins(fields ...field.RelationField) ITRoomDo
	Preload(fields ...field.RelationField) ITRoomDo
	FirstOrInit() (*model.TRoom, error)
	FirstOrCreate() (*model.TRoom, error)
	FindByPage(offset int, limit int) (result []*model.TRoom, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITRoomDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tRoomDo) Debug() ITRoomDo {
	return t.withDO(t.DO.Debug())
}

func (t tRoomDo) WithContext(ctx context.Context) ITRoomDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tRoomDo) ReadDB() ITRoomDo {
	return t.Clauses(dbresolver.Read)
}

func (t tRoomDo) WriteDB() ITRoomDo {
	return t.Clauses(dbresolver.Write)
}

func (t tRoomDo) Session(config *gorm.Session) ITRoomDo {
	return t.withDO(t.DO.Session(config))
}

func (t tRoomDo) Clauses(conds ...clause.Expression) ITRoomDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tRoomDo) Returning(value interface{}, columns ...string) ITRoomDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tRoomDo) Not(conds ...gen.Condition) ITRoomDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tRoomDo) Or(conds ...gen.Condition) ITRoomDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tRoomDo) Select(conds ...field.Expr) ITRoomDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tRoomDo) Where(conds ...gen.Condition) ITRoomDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tRoomDo) Order(conds ...field.Expr) ITRoomDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tRoomDo) Distinct(cols ...field.Expr) ITRoomDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tRoomDo) Omit(cols ...field.Expr) ITRoomDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tRoomDo) Join(table schema.Tabler, on ...field.Expr) ITRoomDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tRoomDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITRoomDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tRoomDo) RightJoin(table schema.Tabler, on ...field.Expr) ITRoomDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tRoomDo) Group(cols ...field.Expr) ITRoomDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tRoomDo) Having(conds ...gen.Condition) ITRoomDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tRoomDo) Limit(limit int) ITRoomDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tRoomDo) Offset(offset int) ITRoomDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tRoomDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITRoomDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tRoomDo) Unscoped() ITRoomDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tRoomDo) Create(values ...*model.TRoom) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tRoomDo) CreateInBatches(values []*model.TRoom, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tRoomDo) Save(values ...*model.TRoom) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tRoomDo) First() (*model.TRoom, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRoom), nil
	}
}

func (t tRoomDo) Take() (*model.TRoom, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRoom), nil
	}
}

func (t tRoomDo) Last() (*model.TRoom, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRoom), nil
	}
}

func (t tRoomDo) Find() ([]*model.TRoom, error) {
	result, err := t.DO.Find()
	return result.([]*model.TRoom), err
}

func (t tRoomDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TRoom, err error) {
	buf := make([]*model.TRoom, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tRoomDo) FindInBatches(result *[]*model.TRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tRoomDo) Attrs(attrs ...field.AssignExpr) ITRoomDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tRoomDo) Assign(attrs ...field.AssignExpr) ITRoomDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tRoomDo) Joins(fields ...field.RelationField) ITRoomDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tRoomDo) Preload(fields ...field.RelationField) ITRoomDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tRoomDo) FirstOrInit() (*model.TRoom, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRoom), nil
	}
}

func (t tRoomDo) FirstOrCreate() (*model.TRoom, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRoom), nil
	}
}

func (t tRoomDo) FindByPage(offset int, limit int) (result []*model.TRoom, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tRoomDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tRoomDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tRoomDo) Delete(models ...*model.TRoom) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tRoomDo) withDO(do gen.Dao) *tRoomDo {
	t.DO = *do.(*gen.DO)
	return t
}
