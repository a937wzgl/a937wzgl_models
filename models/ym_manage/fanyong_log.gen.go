// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newFanyongLog(db *gorm.DB, opts ...gen.DOOption) fanyongLog {
	_fanyongLog := fanyongLog{}

	_fanyongLog.fanyongLogDo.UseDB(db, opts...)
	_fanyongLog.fanyongLogDo.UseModel(&model.FanyongLog{})

	tableName := _fanyongLog.fanyongLogDo.TableName()
	_fanyongLog.ALL = field.NewAsterisk(tableName)
	_fanyongLog.ID = field.NewUint32(tableName, "id")
	_fanyongLog.Aid = field.NewUint32(tableName, "aid")
	_fanyongLog.Addfee = field.NewFloat64(tableName, "addfee")
	_fanyongLog.Oldfee = field.NewFloat64(tableName, "oldfee")
	_fanyongLog.Newfee = field.NewFloat64(tableName, "newfee")
	_fanyongLog.Createtime = field.NewString(tableName, "createtime")

	_fanyongLog.fillFieldMap()

	return _fanyongLog
}

type fanyongLog struct {
	fanyongLogDo

	ALL        field.Asterisk
	ID         field.Uint32
	Aid        field.Uint32
	Addfee     field.Float64
	Oldfee     field.Float64
	Newfee     field.Float64
	Createtime field.String

	fieldMap map[string]field.Expr
}

func (f fanyongLog) Table(newTableName string) *fanyongLog {
	f.fanyongLogDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fanyongLog) As(alias string) *fanyongLog {
	f.fanyongLogDo.DO = *(f.fanyongLogDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fanyongLog) updateTableName(table string) *fanyongLog {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint32(table, "id")
	f.Aid = field.NewUint32(table, "aid")
	f.Addfee = field.NewFloat64(table, "addfee")
	f.Oldfee = field.NewFloat64(table, "oldfee")
	f.Newfee = field.NewFloat64(table, "newfee")
	f.Createtime = field.NewString(table, "createtime")

	f.fillFieldMap()

	return f
}

func (f *fanyongLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fanyongLog) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["aid"] = f.Aid
	f.fieldMap["addfee"] = f.Addfee
	f.fieldMap["oldfee"] = f.Oldfee
	f.fieldMap["newfee"] = f.Newfee
	f.fieldMap["createtime"] = f.Createtime
}

func (f fanyongLog) clone(db *gorm.DB) fanyongLog {
	f.fanyongLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fanyongLog) replaceDB(db *gorm.DB) fanyongLog {
	f.fanyongLogDo.ReplaceDB(db)
	return f
}

type fanyongLogDo struct{ gen.DO }

type IFanyongLogDo interface {
	gen.SubQuery
	Debug() IFanyongLogDo
	WithContext(ctx context.Context) IFanyongLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFanyongLogDo
	WriteDB() IFanyongLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFanyongLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFanyongLogDo
	Not(conds ...gen.Condition) IFanyongLogDo
	Or(conds ...gen.Condition) IFanyongLogDo
	Select(conds ...field.Expr) IFanyongLogDo
	Where(conds ...gen.Condition) IFanyongLogDo
	Order(conds ...field.Expr) IFanyongLogDo
	Distinct(cols ...field.Expr) IFanyongLogDo
	Omit(cols ...field.Expr) IFanyongLogDo
	Join(table schema.Tabler, on ...field.Expr) IFanyongLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFanyongLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFanyongLogDo
	Group(cols ...field.Expr) IFanyongLogDo
	Having(conds ...gen.Condition) IFanyongLogDo
	Limit(limit int) IFanyongLogDo
	Offset(offset int) IFanyongLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFanyongLogDo
	Unscoped() IFanyongLogDo
	Create(values ...*model.FanyongLog) error
	CreateInBatches(values []*model.FanyongLog, batchSize int) error
	Save(values ...*model.FanyongLog) error
	First() (*model.FanyongLog, error)
	Take() (*model.FanyongLog, error)
	Last() (*model.FanyongLog, error)
	Find() ([]*model.FanyongLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FanyongLog, err error)
	FindInBatches(result *[]*model.FanyongLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FanyongLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFanyongLogDo
	Assign(attrs ...field.AssignExpr) IFanyongLogDo
	Joins(fields ...field.RelationField) IFanyongLogDo
	Preload(fields ...field.RelationField) IFanyongLogDo
	FirstOrInit() (*model.FanyongLog, error)
	FirstOrCreate() (*model.FanyongLog, error)
	FindByPage(offset int, limit int) (result []*model.FanyongLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFanyongLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fanyongLogDo) Debug() IFanyongLogDo {
	return f.withDO(f.DO.Debug())
}

func (f fanyongLogDo) WithContext(ctx context.Context) IFanyongLogDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fanyongLogDo) ReadDB() IFanyongLogDo {
	return f.Clauses(dbresolver.Read)
}

func (f fanyongLogDo) WriteDB() IFanyongLogDo {
	return f.Clauses(dbresolver.Write)
}

func (f fanyongLogDo) Session(config *gorm.Session) IFanyongLogDo {
	return f.withDO(f.DO.Session(config))
}

func (f fanyongLogDo) Clauses(conds ...clause.Expression) IFanyongLogDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fanyongLogDo) Returning(value interface{}, columns ...string) IFanyongLogDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fanyongLogDo) Not(conds ...gen.Condition) IFanyongLogDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fanyongLogDo) Or(conds ...gen.Condition) IFanyongLogDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fanyongLogDo) Select(conds ...field.Expr) IFanyongLogDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fanyongLogDo) Where(conds ...gen.Condition) IFanyongLogDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fanyongLogDo) Order(conds ...field.Expr) IFanyongLogDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fanyongLogDo) Distinct(cols ...field.Expr) IFanyongLogDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fanyongLogDo) Omit(cols ...field.Expr) IFanyongLogDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fanyongLogDo) Join(table schema.Tabler, on ...field.Expr) IFanyongLogDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fanyongLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFanyongLogDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fanyongLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IFanyongLogDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fanyongLogDo) Group(cols ...field.Expr) IFanyongLogDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fanyongLogDo) Having(conds ...gen.Condition) IFanyongLogDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fanyongLogDo) Limit(limit int) IFanyongLogDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fanyongLogDo) Offset(offset int) IFanyongLogDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fanyongLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFanyongLogDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fanyongLogDo) Unscoped() IFanyongLogDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fanyongLogDo) Create(values ...*model.FanyongLog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fanyongLogDo) CreateInBatches(values []*model.FanyongLog, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fanyongLogDo) Save(values ...*model.FanyongLog) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fanyongLogDo) First() (*model.FanyongLog, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FanyongLog), nil
	}
}

func (f fanyongLogDo) Take() (*model.FanyongLog, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FanyongLog), nil
	}
}

func (f fanyongLogDo) Last() (*model.FanyongLog, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FanyongLog), nil
	}
}

func (f fanyongLogDo) Find() ([]*model.FanyongLog, error) {
	result, err := f.DO.Find()
	return result.([]*model.FanyongLog), err
}

func (f fanyongLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FanyongLog, err error) {
	buf := make([]*model.FanyongLog, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fanyongLogDo) FindInBatches(result *[]*model.FanyongLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fanyongLogDo) Attrs(attrs ...field.AssignExpr) IFanyongLogDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fanyongLogDo) Assign(attrs ...field.AssignExpr) IFanyongLogDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fanyongLogDo) Joins(fields ...field.RelationField) IFanyongLogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fanyongLogDo) Preload(fields ...field.RelationField) IFanyongLogDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fanyongLogDo) FirstOrInit() (*model.FanyongLog, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FanyongLog), nil
	}
}

func (f fanyongLogDo) FirstOrCreate() (*model.FanyongLog, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FanyongLog), nil
	}
}

func (f fanyongLogDo) FindByPage(offset int, limit int) (result []*model.FanyongLog, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fanyongLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fanyongLogDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fanyongLogDo) Delete(models ...*model.FanyongLog) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fanyongLogDo) withDO(do gen.Dao) *fanyongLogDo {
	f.DO = *do.(*gen.DO)
	return f
}
