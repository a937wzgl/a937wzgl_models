// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newReturnscorelog(db *gorm.DB, opts ...gen.DOOption) returnscorelog {
	_returnscorelog := returnscorelog{}

	_returnscorelog.returnscorelogDo.UseDB(db, opts...)
	_returnscorelog.returnscorelogDo.UseModel(&model.Returnscorelog{})

	tableName := _returnscorelog.returnscorelogDo.TableName()
	_returnscorelog.ALL = field.NewAsterisk(tableName)
	_returnscorelog.ID = field.NewUint32(tableName, "id")
	_returnscorelog.Msg = field.NewString(tableName, "msg")
	_returnscorelog.Ret = field.NewString(tableName, "ret")
	_returnscorelog.Createtime = field.NewString(tableName, "createtime")

	_returnscorelog.fillFieldMap()

	return _returnscorelog
}

type returnscorelog struct {
	returnscorelogDo

	ALL        field.Asterisk
	ID         field.Uint32
	Msg        field.String // 订阅接收到信息
	Ret        field.String // 传递接口信息
	Createtime field.String

	fieldMap map[string]field.Expr
}

func (r returnscorelog) Table(newTableName string) *returnscorelog {
	r.returnscorelogDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r returnscorelog) As(alias string) *returnscorelog {
	r.returnscorelogDo.DO = *(r.returnscorelogDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *returnscorelog) updateTableName(table string) *returnscorelog {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint32(table, "id")
	r.Msg = field.NewString(table, "msg")
	r.Ret = field.NewString(table, "ret")
	r.Createtime = field.NewString(table, "createtime")

	r.fillFieldMap()

	return r
}

func (r *returnscorelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *returnscorelog) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 4)
	r.fieldMap["id"] = r.ID
	r.fieldMap["msg"] = r.Msg
	r.fieldMap["ret"] = r.Ret
	r.fieldMap["createtime"] = r.Createtime
}

func (r returnscorelog) clone(db *gorm.DB) returnscorelog {
	r.returnscorelogDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r returnscorelog) replaceDB(db *gorm.DB) returnscorelog {
	r.returnscorelogDo.ReplaceDB(db)
	return r
}

type returnscorelogDo struct{ gen.DO }

type IReturnscorelogDo interface {
	gen.SubQuery
	Debug() IReturnscorelogDo
	WithContext(ctx context.Context) IReturnscorelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReturnscorelogDo
	WriteDB() IReturnscorelogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReturnscorelogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReturnscorelogDo
	Not(conds ...gen.Condition) IReturnscorelogDo
	Or(conds ...gen.Condition) IReturnscorelogDo
	Select(conds ...field.Expr) IReturnscorelogDo
	Where(conds ...gen.Condition) IReturnscorelogDo
	Order(conds ...field.Expr) IReturnscorelogDo
	Distinct(cols ...field.Expr) IReturnscorelogDo
	Omit(cols ...field.Expr) IReturnscorelogDo
	Join(table schema.Tabler, on ...field.Expr) IReturnscorelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReturnscorelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReturnscorelogDo
	Group(cols ...field.Expr) IReturnscorelogDo
	Having(conds ...gen.Condition) IReturnscorelogDo
	Limit(limit int) IReturnscorelogDo
	Offset(offset int) IReturnscorelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReturnscorelogDo
	Unscoped() IReturnscorelogDo
	Create(values ...*model.Returnscorelog) error
	CreateInBatches(values []*model.Returnscorelog, batchSize int) error
	Save(values ...*model.Returnscorelog) error
	First() (*model.Returnscorelog, error)
	Take() (*model.Returnscorelog, error)
	Last() (*model.Returnscorelog, error)
	Find() ([]*model.Returnscorelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Returnscorelog, err error)
	FindInBatches(result *[]*model.Returnscorelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Returnscorelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReturnscorelogDo
	Assign(attrs ...field.AssignExpr) IReturnscorelogDo
	Joins(fields ...field.RelationField) IReturnscorelogDo
	Preload(fields ...field.RelationField) IReturnscorelogDo
	FirstOrInit() (*model.Returnscorelog, error)
	FirstOrCreate() (*model.Returnscorelog, error)
	FindByPage(offset int, limit int) (result []*model.Returnscorelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReturnscorelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r returnscorelogDo) Debug() IReturnscorelogDo {
	return r.withDO(r.DO.Debug())
}

func (r returnscorelogDo) WithContext(ctx context.Context) IReturnscorelogDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r returnscorelogDo) ReadDB() IReturnscorelogDo {
	return r.Clauses(dbresolver.Read)
}

func (r returnscorelogDo) WriteDB() IReturnscorelogDo {
	return r.Clauses(dbresolver.Write)
}

func (r returnscorelogDo) Session(config *gorm.Session) IReturnscorelogDo {
	return r.withDO(r.DO.Session(config))
}

func (r returnscorelogDo) Clauses(conds ...clause.Expression) IReturnscorelogDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r returnscorelogDo) Returning(value interface{}, columns ...string) IReturnscorelogDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r returnscorelogDo) Not(conds ...gen.Condition) IReturnscorelogDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r returnscorelogDo) Or(conds ...gen.Condition) IReturnscorelogDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r returnscorelogDo) Select(conds ...field.Expr) IReturnscorelogDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r returnscorelogDo) Where(conds ...gen.Condition) IReturnscorelogDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r returnscorelogDo) Order(conds ...field.Expr) IReturnscorelogDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r returnscorelogDo) Distinct(cols ...field.Expr) IReturnscorelogDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r returnscorelogDo) Omit(cols ...field.Expr) IReturnscorelogDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r returnscorelogDo) Join(table schema.Tabler, on ...field.Expr) IReturnscorelogDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r returnscorelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReturnscorelogDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r returnscorelogDo) RightJoin(table schema.Tabler, on ...field.Expr) IReturnscorelogDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r returnscorelogDo) Group(cols ...field.Expr) IReturnscorelogDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r returnscorelogDo) Having(conds ...gen.Condition) IReturnscorelogDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r returnscorelogDo) Limit(limit int) IReturnscorelogDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r returnscorelogDo) Offset(offset int) IReturnscorelogDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r returnscorelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReturnscorelogDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r returnscorelogDo) Unscoped() IReturnscorelogDo {
	return r.withDO(r.DO.Unscoped())
}

func (r returnscorelogDo) Create(values ...*model.Returnscorelog) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r returnscorelogDo) CreateInBatches(values []*model.Returnscorelog, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r returnscorelogDo) Save(values ...*model.Returnscorelog) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r returnscorelogDo) First() (*model.Returnscorelog, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Returnscorelog), nil
	}
}

func (r returnscorelogDo) Take() (*model.Returnscorelog, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Returnscorelog), nil
	}
}

func (r returnscorelogDo) Last() (*model.Returnscorelog, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Returnscorelog), nil
	}
}

func (r returnscorelogDo) Find() ([]*model.Returnscorelog, error) {
	result, err := r.DO.Find()
	return result.([]*model.Returnscorelog), err
}

func (r returnscorelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Returnscorelog, err error) {
	buf := make([]*model.Returnscorelog, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r returnscorelogDo) FindInBatches(result *[]*model.Returnscorelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r returnscorelogDo) Attrs(attrs ...field.AssignExpr) IReturnscorelogDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r returnscorelogDo) Assign(attrs ...field.AssignExpr) IReturnscorelogDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r returnscorelogDo) Joins(fields ...field.RelationField) IReturnscorelogDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r returnscorelogDo) Preload(fields ...field.RelationField) IReturnscorelogDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r returnscorelogDo) FirstOrInit() (*model.Returnscorelog, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Returnscorelog), nil
	}
}

func (r returnscorelogDo) FirstOrCreate() (*model.Returnscorelog, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Returnscorelog), nil
	}
}

func (r returnscorelogDo) FindByPage(offset int, limit int) (result []*model.Returnscorelog, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r returnscorelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r returnscorelogDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r returnscorelogDo) Delete(models ...*model.Returnscorelog) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *returnscorelogDo) withDO(do gen.Dao) *returnscorelogDo {
	r.DO = *do.(*gen.DO)
	return r
}
