// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newRechargelogKefuZy(db *gorm.DB, opts ...gen.DOOption) rechargelogKefuZy {
	_rechargelogKefuZy := rechargelogKefuZy{}

	_rechargelogKefuZy.rechargelogKefuZyDo.UseDB(db, opts...)
	_rechargelogKefuZy.rechargelogKefuZyDo.UseModel(&model.RechargelogKefuZy{})

	tableName := _rechargelogKefuZy.rechargelogKefuZyDo.TableName()
	_rechargelogKefuZy.ALL = field.NewAsterisk(tableName)
	_rechargelogKefuZy.ID = field.NewUint32(tableName, "id")
	_rechargelogKefuZy.Kefuid = field.NewUint32(tableName, "kefuid")
	_rechargelogKefuZy.UID = field.NewUint32(tableName, "uid")
	_rechargelogKefuZy.Createtime = field.NewString(tableName, "createtime")
	_rechargelogKefuZy.Czfee = field.NewUint64(tableName, "czfee")
	_rechargelogKefuZy.Oldfee = field.NewUint64(tableName, "oldfee")
	_rechargelogKefuZy.Newfee = field.NewUint64(tableName, "newfee")
	_rechargelogKefuZy.Type = field.NewBool(tableName, "type")

	_rechargelogKefuZy.fillFieldMap()

	return _rechargelogKefuZy
}

type rechargelogKefuZy struct {
	rechargelogKefuZyDo

	ALL        field.Asterisk
	ID         field.Uint32
	Kefuid     field.Uint32
	UID        field.Uint32
	Createtime field.String
	Czfee      field.Uint64
	Oldfee     field.Uint64
	Newfee     field.Uint64
	Type       field.Bool // 0 -  1 +

	fieldMap map[string]field.Expr
}

func (r rechargelogKefuZy) Table(newTableName string) *rechargelogKefuZy {
	r.rechargelogKefuZyDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rechargelogKefuZy) As(alias string) *rechargelogKefuZy {
	r.rechargelogKefuZyDo.DO = *(r.rechargelogKefuZyDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rechargelogKefuZy) updateTableName(table string) *rechargelogKefuZy {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint32(table, "id")
	r.Kefuid = field.NewUint32(table, "kefuid")
	r.UID = field.NewUint32(table, "uid")
	r.Createtime = field.NewString(table, "createtime")
	r.Czfee = field.NewUint64(table, "czfee")
	r.Oldfee = field.NewUint64(table, "oldfee")
	r.Newfee = field.NewUint64(table, "newfee")
	r.Type = field.NewBool(table, "type")

	r.fillFieldMap()

	return r
}

func (r *rechargelogKefuZy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rechargelogKefuZy) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["kefuid"] = r.Kefuid
	r.fieldMap["uid"] = r.UID
	r.fieldMap["createtime"] = r.Createtime
	r.fieldMap["czfee"] = r.Czfee
	r.fieldMap["oldfee"] = r.Oldfee
	r.fieldMap["newfee"] = r.Newfee
	r.fieldMap["type"] = r.Type
}

func (r rechargelogKefuZy) clone(db *gorm.DB) rechargelogKefuZy {
	r.rechargelogKefuZyDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rechargelogKefuZy) replaceDB(db *gorm.DB) rechargelogKefuZy {
	r.rechargelogKefuZyDo.ReplaceDB(db)
	return r
}

type rechargelogKefuZyDo struct{ gen.DO }

type IRechargelogKefuZyDo interface {
	gen.SubQuery
	Debug() IRechargelogKefuZyDo
	WithContext(ctx context.Context) IRechargelogKefuZyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRechargelogKefuZyDo
	WriteDB() IRechargelogKefuZyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRechargelogKefuZyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRechargelogKefuZyDo
	Not(conds ...gen.Condition) IRechargelogKefuZyDo
	Or(conds ...gen.Condition) IRechargelogKefuZyDo
	Select(conds ...field.Expr) IRechargelogKefuZyDo
	Where(conds ...gen.Condition) IRechargelogKefuZyDo
	Order(conds ...field.Expr) IRechargelogKefuZyDo
	Distinct(cols ...field.Expr) IRechargelogKefuZyDo
	Omit(cols ...field.Expr) IRechargelogKefuZyDo
	Join(table schema.Tabler, on ...field.Expr) IRechargelogKefuZyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRechargelogKefuZyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRechargelogKefuZyDo
	Group(cols ...field.Expr) IRechargelogKefuZyDo
	Having(conds ...gen.Condition) IRechargelogKefuZyDo
	Limit(limit int) IRechargelogKefuZyDo
	Offset(offset int) IRechargelogKefuZyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargelogKefuZyDo
	Unscoped() IRechargelogKefuZyDo
	Create(values ...*model.RechargelogKefuZy) error
	CreateInBatches(values []*model.RechargelogKefuZy, batchSize int) error
	Save(values ...*model.RechargelogKefuZy) error
	First() (*model.RechargelogKefuZy, error)
	Take() (*model.RechargelogKefuZy, error)
	Last() (*model.RechargelogKefuZy, error)
	Find() ([]*model.RechargelogKefuZy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RechargelogKefuZy, err error)
	FindInBatches(result *[]*model.RechargelogKefuZy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RechargelogKefuZy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRechargelogKefuZyDo
	Assign(attrs ...field.AssignExpr) IRechargelogKefuZyDo
	Joins(fields ...field.RelationField) IRechargelogKefuZyDo
	Preload(fields ...field.RelationField) IRechargelogKefuZyDo
	FirstOrInit() (*model.RechargelogKefuZy, error)
	FirstOrCreate() (*model.RechargelogKefuZy, error)
	FindByPage(offset int, limit int) (result []*model.RechargelogKefuZy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRechargelogKefuZyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rechargelogKefuZyDo) Debug() IRechargelogKefuZyDo {
	return r.withDO(r.DO.Debug())
}

func (r rechargelogKefuZyDo) WithContext(ctx context.Context) IRechargelogKefuZyDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rechargelogKefuZyDo) ReadDB() IRechargelogKefuZyDo {
	return r.Clauses(dbresolver.Read)
}

func (r rechargelogKefuZyDo) WriteDB() IRechargelogKefuZyDo {
	return r.Clauses(dbresolver.Write)
}

func (r rechargelogKefuZyDo) Session(config *gorm.Session) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Session(config))
}

func (r rechargelogKefuZyDo) Clauses(conds ...clause.Expression) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rechargelogKefuZyDo) Returning(value interface{}, columns ...string) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rechargelogKefuZyDo) Not(conds ...gen.Condition) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rechargelogKefuZyDo) Or(conds ...gen.Condition) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rechargelogKefuZyDo) Select(conds ...field.Expr) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rechargelogKefuZyDo) Where(conds ...gen.Condition) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rechargelogKefuZyDo) Order(conds ...field.Expr) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rechargelogKefuZyDo) Distinct(cols ...field.Expr) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rechargelogKefuZyDo) Omit(cols ...field.Expr) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rechargelogKefuZyDo) Join(table schema.Tabler, on ...field.Expr) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rechargelogKefuZyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRechargelogKefuZyDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rechargelogKefuZyDo) RightJoin(table schema.Tabler, on ...field.Expr) IRechargelogKefuZyDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rechargelogKefuZyDo) Group(cols ...field.Expr) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rechargelogKefuZyDo) Having(conds ...gen.Condition) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rechargelogKefuZyDo) Limit(limit int) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rechargelogKefuZyDo) Offset(offset int) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rechargelogKefuZyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rechargelogKefuZyDo) Unscoped() IRechargelogKefuZyDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rechargelogKefuZyDo) Create(values ...*model.RechargelogKefuZy) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rechargelogKefuZyDo) CreateInBatches(values []*model.RechargelogKefuZy, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rechargelogKefuZyDo) Save(values ...*model.RechargelogKefuZy) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rechargelogKefuZyDo) First() (*model.RechargelogKefuZy, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogKefuZy), nil
	}
}

func (r rechargelogKefuZyDo) Take() (*model.RechargelogKefuZy, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogKefuZy), nil
	}
}

func (r rechargelogKefuZyDo) Last() (*model.RechargelogKefuZy, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogKefuZy), nil
	}
}

func (r rechargelogKefuZyDo) Find() ([]*model.RechargelogKefuZy, error) {
	result, err := r.DO.Find()
	return result.([]*model.RechargelogKefuZy), err
}

func (r rechargelogKefuZyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RechargelogKefuZy, err error) {
	buf := make([]*model.RechargelogKefuZy, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rechargelogKefuZyDo) FindInBatches(result *[]*model.RechargelogKefuZy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rechargelogKefuZyDo) Attrs(attrs ...field.AssignExpr) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rechargelogKefuZyDo) Assign(attrs ...field.AssignExpr) IRechargelogKefuZyDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rechargelogKefuZyDo) Joins(fields ...field.RelationField) IRechargelogKefuZyDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rechargelogKefuZyDo) Preload(fields ...field.RelationField) IRechargelogKefuZyDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rechargelogKefuZyDo) FirstOrInit() (*model.RechargelogKefuZy, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogKefuZy), nil
	}
}

func (r rechargelogKefuZyDo) FirstOrCreate() (*model.RechargelogKefuZy, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogKefuZy), nil
	}
}

func (r rechargelogKefuZyDo) FindByPage(offset int, limit int) (result []*model.RechargelogKefuZy, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rechargelogKefuZyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rechargelogKefuZyDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rechargelogKefuZyDo) Delete(models ...*model.RechargelogKefuZy) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rechargelogKefuZyDo) withDO(do gen.Dao) *rechargelogKefuZyDo {
	r.DO = *do.(*gen.DO)
	return r
}
