// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newReturnscore(db *gorm.DB, opts ...gen.DOOption) returnscore {
	_returnscore := returnscore{}

	_returnscore.returnscoreDo.UseDB(db, opts...)
	_returnscore.returnscoreDo.UseModel(&model.Returnscore{})

	tableName := _returnscore.returnscoreDo.TableName()
	_returnscore.ALL = field.NewAsterisk(tableName)
	_returnscore.ID = field.NewUint32(tableName, "id")
	_returnscore.Osn = field.NewString(tableName, "osn")
	_returnscore.Ret = field.NewString(tableName, "ret")
	_returnscore.UID = field.NewUint32(tableName, "uid")
	_returnscore.Createtime = field.NewString(tableName, "createtime")
	_returnscore.Type = field.NewBool(tableName, "type")

	_returnscore.fillFieldMap()

	return _returnscore
}

type returnscore struct {
	returnscoreDo

	ALL        field.Asterisk
	ID         field.Uint32
	Osn        field.String
	Ret        field.String
	UID        field.Uint32
	Createtime field.String
	Type       field.Bool // 0未处理  1已处理

	fieldMap map[string]field.Expr
}

func (r returnscore) Table(newTableName string) *returnscore {
	r.returnscoreDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r returnscore) As(alias string) *returnscore {
	r.returnscoreDo.DO = *(r.returnscoreDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *returnscore) updateTableName(table string) *returnscore {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint32(table, "id")
	r.Osn = field.NewString(table, "osn")
	r.Ret = field.NewString(table, "ret")
	r.UID = field.NewUint32(table, "uid")
	r.Createtime = field.NewString(table, "createtime")
	r.Type = field.NewBool(table, "type")

	r.fillFieldMap()

	return r
}

func (r *returnscore) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *returnscore) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 6)
	r.fieldMap["id"] = r.ID
	r.fieldMap["osn"] = r.Osn
	r.fieldMap["ret"] = r.Ret
	r.fieldMap["uid"] = r.UID
	r.fieldMap["createtime"] = r.Createtime
	r.fieldMap["type"] = r.Type
}

func (r returnscore) clone(db *gorm.DB) returnscore {
	r.returnscoreDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r returnscore) replaceDB(db *gorm.DB) returnscore {
	r.returnscoreDo.ReplaceDB(db)
	return r
}

type returnscoreDo struct{ gen.DO }

type IReturnscoreDo interface {
	gen.SubQuery
	Debug() IReturnscoreDo
	WithContext(ctx context.Context) IReturnscoreDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReturnscoreDo
	WriteDB() IReturnscoreDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReturnscoreDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReturnscoreDo
	Not(conds ...gen.Condition) IReturnscoreDo
	Or(conds ...gen.Condition) IReturnscoreDo
	Select(conds ...field.Expr) IReturnscoreDo
	Where(conds ...gen.Condition) IReturnscoreDo
	Order(conds ...field.Expr) IReturnscoreDo
	Distinct(cols ...field.Expr) IReturnscoreDo
	Omit(cols ...field.Expr) IReturnscoreDo
	Join(table schema.Tabler, on ...field.Expr) IReturnscoreDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReturnscoreDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReturnscoreDo
	Group(cols ...field.Expr) IReturnscoreDo
	Having(conds ...gen.Condition) IReturnscoreDo
	Limit(limit int) IReturnscoreDo
	Offset(offset int) IReturnscoreDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReturnscoreDo
	Unscoped() IReturnscoreDo
	Create(values ...*model.Returnscore) error
	CreateInBatches(values []*model.Returnscore, batchSize int) error
	Save(values ...*model.Returnscore) error
	First() (*model.Returnscore, error)
	Take() (*model.Returnscore, error)
	Last() (*model.Returnscore, error)
	Find() ([]*model.Returnscore, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Returnscore, err error)
	FindInBatches(result *[]*model.Returnscore, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Returnscore) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReturnscoreDo
	Assign(attrs ...field.AssignExpr) IReturnscoreDo
	Joins(fields ...field.RelationField) IReturnscoreDo
	Preload(fields ...field.RelationField) IReturnscoreDo
	FirstOrInit() (*model.Returnscore, error)
	FirstOrCreate() (*model.Returnscore, error)
	FindByPage(offset int, limit int) (result []*model.Returnscore, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReturnscoreDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r returnscoreDo) Debug() IReturnscoreDo {
	return r.withDO(r.DO.Debug())
}

func (r returnscoreDo) WithContext(ctx context.Context) IReturnscoreDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r returnscoreDo) ReadDB() IReturnscoreDo {
	return r.Clauses(dbresolver.Read)
}

func (r returnscoreDo) WriteDB() IReturnscoreDo {
	return r.Clauses(dbresolver.Write)
}

func (r returnscoreDo) Session(config *gorm.Session) IReturnscoreDo {
	return r.withDO(r.DO.Session(config))
}

func (r returnscoreDo) Clauses(conds ...clause.Expression) IReturnscoreDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r returnscoreDo) Returning(value interface{}, columns ...string) IReturnscoreDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r returnscoreDo) Not(conds ...gen.Condition) IReturnscoreDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r returnscoreDo) Or(conds ...gen.Condition) IReturnscoreDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r returnscoreDo) Select(conds ...field.Expr) IReturnscoreDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r returnscoreDo) Where(conds ...gen.Condition) IReturnscoreDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r returnscoreDo) Order(conds ...field.Expr) IReturnscoreDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r returnscoreDo) Distinct(cols ...field.Expr) IReturnscoreDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r returnscoreDo) Omit(cols ...field.Expr) IReturnscoreDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r returnscoreDo) Join(table schema.Tabler, on ...field.Expr) IReturnscoreDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r returnscoreDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReturnscoreDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r returnscoreDo) RightJoin(table schema.Tabler, on ...field.Expr) IReturnscoreDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r returnscoreDo) Group(cols ...field.Expr) IReturnscoreDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r returnscoreDo) Having(conds ...gen.Condition) IReturnscoreDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r returnscoreDo) Limit(limit int) IReturnscoreDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r returnscoreDo) Offset(offset int) IReturnscoreDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r returnscoreDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReturnscoreDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r returnscoreDo) Unscoped() IReturnscoreDo {
	return r.withDO(r.DO.Unscoped())
}

func (r returnscoreDo) Create(values ...*model.Returnscore) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r returnscoreDo) CreateInBatches(values []*model.Returnscore, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r returnscoreDo) Save(values ...*model.Returnscore) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r returnscoreDo) First() (*model.Returnscore, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Returnscore), nil
	}
}

func (r returnscoreDo) Take() (*model.Returnscore, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Returnscore), nil
	}
}

func (r returnscoreDo) Last() (*model.Returnscore, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Returnscore), nil
	}
}

func (r returnscoreDo) Find() ([]*model.Returnscore, error) {
	result, err := r.DO.Find()
	return result.([]*model.Returnscore), err
}

func (r returnscoreDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Returnscore, err error) {
	buf := make([]*model.Returnscore, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r returnscoreDo) FindInBatches(result *[]*model.Returnscore, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r returnscoreDo) Attrs(attrs ...field.AssignExpr) IReturnscoreDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r returnscoreDo) Assign(attrs ...field.AssignExpr) IReturnscoreDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r returnscoreDo) Joins(fields ...field.RelationField) IReturnscoreDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r returnscoreDo) Preload(fields ...field.RelationField) IReturnscoreDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r returnscoreDo) FirstOrInit() (*model.Returnscore, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Returnscore), nil
	}
}

func (r returnscoreDo) FirstOrCreate() (*model.Returnscore, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Returnscore), nil
	}
}

func (r returnscoreDo) FindByPage(offset int, limit int) (result []*model.Returnscore, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r returnscoreDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r returnscoreDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r returnscoreDo) Delete(models ...*model.Returnscore) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *returnscoreDo) withDO(do gen.Dao) *returnscoreDo {
	r.DO = *do.(*gen.DO)
	return r
}
