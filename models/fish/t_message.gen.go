// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fish

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newTMessage(db *gorm.DB, opts ...gen.DOOption) tMessage {
	_tMessage := tMessage{}

	_tMessage.tMessageDo.UseDB(db, opts...)
	_tMessage.tMessageDo.UseModel(&model.TMessage{})

	tableName := _tMessage.tMessageDo.TableName()
	_tMessage.ALL = field.NewAsterisk(tableName)
	_tMessage.Type = field.NewString(tableName, "type")
	_tMessage.Msg = field.NewString(tableName, "msg")
	_tMessage.Version = field.NewString(tableName, "version")

	_tMessage.fillFieldMap()

	return _tMessage
}

type tMessage struct {
	tMessageDo

	ALL     field.Asterisk
	Type    field.String
	Msg     field.String
	Version field.String

	fieldMap map[string]field.Expr
}

func (t tMessage) Table(newTableName string) *tMessage {
	t.tMessageDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tMessage) As(alias string) *tMessage {
	t.tMessageDo.DO = *(t.tMessageDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tMessage) updateTableName(table string) *tMessage {
	t.ALL = field.NewAsterisk(table)
	t.Type = field.NewString(table, "type")
	t.Msg = field.NewString(table, "msg")
	t.Version = field.NewString(table, "version")

	t.fillFieldMap()

	return t
}

func (t *tMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tMessage) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["type"] = t.Type
	t.fieldMap["msg"] = t.Msg
	t.fieldMap["version"] = t.Version
}

func (t tMessage) clone(db *gorm.DB) tMessage {
	t.tMessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tMessage) replaceDB(db *gorm.DB) tMessage {
	t.tMessageDo.ReplaceDB(db)
	return t
}

type tMessageDo struct{ gen.DO }

type ITMessageDo interface {
	gen.SubQuery
	Debug() ITMessageDo
	WithContext(ctx context.Context) ITMessageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITMessageDo
	WriteDB() ITMessageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITMessageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITMessageDo
	Not(conds ...gen.Condition) ITMessageDo
	Or(conds ...gen.Condition) ITMessageDo
	Select(conds ...field.Expr) ITMessageDo
	Where(conds ...gen.Condition) ITMessageDo
	Order(conds ...field.Expr) ITMessageDo
	Distinct(cols ...field.Expr) ITMessageDo
	Omit(cols ...field.Expr) ITMessageDo
	Join(table schema.Tabler, on ...field.Expr) ITMessageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITMessageDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITMessageDo
	Group(cols ...field.Expr) ITMessageDo
	Having(conds ...gen.Condition) ITMessageDo
	Limit(limit int) ITMessageDo
	Offset(offset int) ITMessageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITMessageDo
	Unscoped() ITMessageDo
	Create(values ...*model.TMessage) error
	CreateInBatches(values []*model.TMessage, batchSize int) error
	Save(values ...*model.TMessage) error
	First() (*model.TMessage, error)
	Take() (*model.TMessage, error)
	Last() (*model.TMessage, error)
	Find() ([]*model.TMessage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TMessage, err error)
	FindInBatches(result *[]*model.TMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TMessage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITMessageDo
	Assign(attrs ...field.AssignExpr) ITMessageDo
	Joins(fields ...field.RelationField) ITMessageDo
	Preload(fields ...field.RelationField) ITMessageDo
	FirstOrInit() (*model.TMessage, error)
	FirstOrCreate() (*model.TMessage, error)
	FindByPage(offset int, limit int) (result []*model.TMessage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITMessageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tMessageDo) Debug() ITMessageDo {
	return t.withDO(t.DO.Debug())
}

func (t tMessageDo) WithContext(ctx context.Context) ITMessageDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tMessageDo) ReadDB() ITMessageDo {
	return t.Clauses(dbresolver.Read)
}

func (t tMessageDo) WriteDB() ITMessageDo {
	return t.Clauses(dbresolver.Write)
}

func (t tMessageDo) Session(config *gorm.Session) ITMessageDo {
	return t.withDO(t.DO.Session(config))
}

func (t tMessageDo) Clauses(conds ...clause.Expression) ITMessageDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tMessageDo) Returning(value interface{}, columns ...string) ITMessageDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tMessageDo) Not(conds ...gen.Condition) ITMessageDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tMessageDo) Or(conds ...gen.Condition) ITMessageDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tMessageDo) Select(conds ...field.Expr) ITMessageDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tMessageDo) Where(conds ...gen.Condition) ITMessageDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tMessageDo) Order(conds ...field.Expr) ITMessageDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tMessageDo) Distinct(cols ...field.Expr) ITMessageDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tMessageDo) Omit(cols ...field.Expr) ITMessageDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tMessageDo) Join(table schema.Tabler, on ...field.Expr) ITMessageDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITMessageDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) ITMessageDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tMessageDo) Group(cols ...field.Expr) ITMessageDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tMessageDo) Having(conds ...gen.Condition) ITMessageDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tMessageDo) Limit(limit int) ITMessageDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tMessageDo) Offset(offset int) ITMessageDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tMessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITMessageDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tMessageDo) Unscoped() ITMessageDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tMessageDo) Create(values ...*model.TMessage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tMessageDo) CreateInBatches(values []*model.TMessage, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tMessageDo) Save(values ...*model.TMessage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tMessageDo) First() (*model.TMessage, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMessage), nil
	}
}

func (t tMessageDo) Take() (*model.TMessage, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMessage), nil
	}
}

func (t tMessageDo) Last() (*model.TMessage, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMessage), nil
	}
}

func (t tMessageDo) Find() ([]*model.TMessage, error) {
	result, err := t.DO.Find()
	return result.([]*model.TMessage), err
}

func (t tMessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TMessage, err error) {
	buf := make([]*model.TMessage, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tMessageDo) FindInBatches(result *[]*model.TMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tMessageDo) Attrs(attrs ...field.AssignExpr) ITMessageDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tMessageDo) Assign(attrs ...field.AssignExpr) ITMessageDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tMessageDo) Joins(fields ...field.RelationField) ITMessageDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tMessageDo) Preload(fields ...field.RelationField) ITMessageDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tMessageDo) FirstOrInit() (*model.TMessage, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMessage), nil
	}
}

func (t tMessageDo) FirstOrCreate() (*model.TMessage, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMessage), nil
	}
}

func (t tMessageDo) FindByPage(offset int, limit int) (result []*model.TMessage, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tMessageDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tMessageDo) Delete(models ...*model.TMessage) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tMessageDo) withDO(do gen.Dao) *tMessageDo {
	t.DO = *do.(*gen.DO)
	return t
}
