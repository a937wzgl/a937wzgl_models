// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package la_ba

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLotterylog1005(db *gorm.DB, opts ...gen.DOOption) lotterylog1005 {
	_lotterylog1005 := lotterylog1005{}

	_lotterylog1005.lotterylog1005Do.UseDB(db, opts...)
	_lotterylog1005.lotterylog1005Do.UseModel(&model.Lotterylog1005{})

	tableName := _lotterylog1005.lotterylog1005Do.TableName()
	_lotterylog1005.ALL = field.NewAsterisk(tableName)
	_lotterylog1005.ID = field.NewInt32(tableName, "id")
	_lotterylog1005.ResultArray = field.NewString(tableName, "result_array")
	_lotterylog1005.LotteryTime = field.NewTime(tableName, "lotteryTime")

	_lotterylog1005.fillFieldMap()

	return _lotterylog1005
}

type lotterylog1005 struct {
	lotterylog1005Do

	ALL         field.Asterisk
	ID          field.Int32
	ResultArray field.String
	LotteryTime field.Time

	fieldMap map[string]field.Expr
}

func (l lotterylog1005) Table(newTableName string) *lotterylog1005 {
	l.lotterylog1005Do.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lotterylog1005) As(alias string) *lotterylog1005 {
	l.lotterylog1005Do.DO = *(l.lotterylog1005Do.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lotterylog1005) updateTableName(table string) *lotterylog1005 {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.ResultArray = field.NewString(table, "result_array")
	l.LotteryTime = field.NewTime(table, "lotteryTime")

	l.fillFieldMap()

	return l
}

func (l *lotterylog1005) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lotterylog1005) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 3)
	l.fieldMap["id"] = l.ID
	l.fieldMap["result_array"] = l.ResultArray
	l.fieldMap["lotteryTime"] = l.LotteryTime
}

func (l lotterylog1005) clone(db *gorm.DB) lotterylog1005 {
	l.lotterylog1005Do.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lotterylog1005) replaceDB(db *gorm.DB) lotterylog1005 {
	l.lotterylog1005Do.ReplaceDB(db)
	return l
}

type lotterylog1005Do struct{ gen.DO }

type ILotterylog1005Do interface {
	gen.SubQuery
	Debug() ILotterylog1005Do
	WithContext(ctx context.Context) ILotterylog1005Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILotterylog1005Do
	WriteDB() ILotterylog1005Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILotterylog1005Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILotterylog1005Do
	Not(conds ...gen.Condition) ILotterylog1005Do
	Or(conds ...gen.Condition) ILotterylog1005Do
	Select(conds ...field.Expr) ILotterylog1005Do
	Where(conds ...gen.Condition) ILotterylog1005Do
	Order(conds ...field.Expr) ILotterylog1005Do
	Distinct(cols ...field.Expr) ILotterylog1005Do
	Omit(cols ...field.Expr) ILotterylog1005Do
	Join(table schema.Tabler, on ...field.Expr) ILotterylog1005Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog1005Do
	RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog1005Do
	Group(cols ...field.Expr) ILotterylog1005Do
	Having(conds ...gen.Condition) ILotterylog1005Do
	Limit(limit int) ILotterylog1005Do
	Offset(offset int) ILotterylog1005Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog1005Do
	Unscoped() ILotterylog1005Do
	Create(values ...*model.Lotterylog1005) error
	CreateInBatches(values []*model.Lotterylog1005, batchSize int) error
	Save(values ...*model.Lotterylog1005) error
	First() (*model.Lotterylog1005, error)
	Take() (*model.Lotterylog1005, error)
	Last() (*model.Lotterylog1005, error)
	Find() ([]*model.Lotterylog1005, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog1005, err error)
	FindInBatches(result *[]*model.Lotterylog1005, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lotterylog1005) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILotterylog1005Do
	Assign(attrs ...field.AssignExpr) ILotterylog1005Do
	Joins(fields ...field.RelationField) ILotterylog1005Do
	Preload(fields ...field.RelationField) ILotterylog1005Do
	FirstOrInit() (*model.Lotterylog1005, error)
	FirstOrCreate() (*model.Lotterylog1005, error)
	FindByPage(offset int, limit int) (result []*model.Lotterylog1005, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILotterylog1005Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lotterylog1005Do) Debug() ILotterylog1005Do {
	return l.withDO(l.DO.Debug())
}

func (l lotterylog1005Do) WithContext(ctx context.Context) ILotterylog1005Do {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lotterylog1005Do) ReadDB() ILotterylog1005Do {
	return l.Clauses(dbresolver.Read)
}

func (l lotterylog1005Do) WriteDB() ILotterylog1005Do {
	return l.Clauses(dbresolver.Write)
}

func (l lotterylog1005Do) Session(config *gorm.Session) ILotterylog1005Do {
	return l.withDO(l.DO.Session(config))
}

func (l lotterylog1005Do) Clauses(conds ...clause.Expression) ILotterylog1005Do {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lotterylog1005Do) Returning(value interface{}, columns ...string) ILotterylog1005Do {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lotterylog1005Do) Not(conds ...gen.Condition) ILotterylog1005Do {
	return l.withDO(l.DO.Not(conds...))
}

func (l lotterylog1005Do) Or(conds ...gen.Condition) ILotterylog1005Do {
	return l.withDO(l.DO.Or(conds...))
}

func (l lotterylog1005Do) Select(conds ...field.Expr) ILotterylog1005Do {
	return l.withDO(l.DO.Select(conds...))
}

func (l lotterylog1005Do) Where(conds ...gen.Condition) ILotterylog1005Do {
	return l.withDO(l.DO.Where(conds...))
}

func (l lotterylog1005Do) Order(conds ...field.Expr) ILotterylog1005Do {
	return l.withDO(l.DO.Order(conds...))
}

func (l lotterylog1005Do) Distinct(cols ...field.Expr) ILotterylog1005Do {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lotterylog1005Do) Omit(cols ...field.Expr) ILotterylog1005Do {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lotterylog1005Do) Join(table schema.Tabler, on ...field.Expr) ILotterylog1005Do {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lotterylog1005Do) LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog1005Do {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lotterylog1005Do) RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog1005Do {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lotterylog1005Do) Group(cols ...field.Expr) ILotterylog1005Do {
	return l.withDO(l.DO.Group(cols...))
}

func (l lotterylog1005Do) Having(conds ...gen.Condition) ILotterylog1005Do {
	return l.withDO(l.DO.Having(conds...))
}

func (l lotterylog1005Do) Limit(limit int) ILotterylog1005Do {
	return l.withDO(l.DO.Limit(limit))
}

func (l lotterylog1005Do) Offset(offset int) ILotterylog1005Do {
	return l.withDO(l.DO.Offset(offset))
}

func (l lotterylog1005Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog1005Do {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lotterylog1005Do) Unscoped() ILotterylog1005Do {
	return l.withDO(l.DO.Unscoped())
}

func (l lotterylog1005Do) Create(values ...*model.Lotterylog1005) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lotterylog1005Do) CreateInBatches(values []*model.Lotterylog1005, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lotterylog1005Do) Save(values ...*model.Lotterylog1005) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lotterylog1005Do) First() (*model.Lotterylog1005, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog1005), nil
	}
}

func (l lotterylog1005Do) Take() (*model.Lotterylog1005, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog1005), nil
	}
}

func (l lotterylog1005Do) Last() (*model.Lotterylog1005, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog1005), nil
	}
}

func (l lotterylog1005Do) Find() ([]*model.Lotterylog1005, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lotterylog1005), err
}

func (l lotterylog1005Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog1005, err error) {
	buf := make([]*model.Lotterylog1005, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lotterylog1005Do) FindInBatches(result *[]*model.Lotterylog1005, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lotterylog1005Do) Attrs(attrs ...field.AssignExpr) ILotterylog1005Do {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lotterylog1005Do) Assign(attrs ...field.AssignExpr) ILotterylog1005Do {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lotterylog1005Do) Joins(fields ...field.RelationField) ILotterylog1005Do {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lotterylog1005Do) Preload(fields ...field.RelationField) ILotterylog1005Do {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lotterylog1005Do) FirstOrInit() (*model.Lotterylog1005, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog1005), nil
	}
}

func (l lotterylog1005Do) FirstOrCreate() (*model.Lotterylog1005, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog1005), nil
	}
}

func (l lotterylog1005Do) FindByPage(offset int, limit int) (result []*model.Lotterylog1005, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lotterylog1005Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lotterylog1005Do) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lotterylog1005Do) Delete(models ...*model.Lotterylog1005) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lotterylog1005Do) withDO(do gen.Dao) *lotterylog1005Do {
	l.DO = *do.(*gen.DO)
	return l
}
