// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newRechargelogAgent(db *gorm.DB, opts ...gen.DOOption) rechargelogAgent {
	_rechargelogAgent := rechargelogAgent{}

	_rechargelogAgent.rechargelogAgentDo.UseDB(db, opts...)
	_rechargelogAgent.rechargelogAgentDo.UseModel(&model.RechargelogAgent{})

	tableName := _rechargelogAgent.rechargelogAgentDo.TableName()
	_rechargelogAgent.ALL = field.NewAsterisk(tableName)
	_rechargelogAgent.ID = field.NewUint32(tableName, "id")
	_rechargelogAgent.Adminid = field.NewUint32(tableName, "adminid")
	_rechargelogAgent.Agentid = field.NewUint32(tableName, "agentid")
	_rechargelogAgent.Createtime = field.NewString(tableName, "createtime")
	_rechargelogAgent.Czfee = field.NewUint64(tableName, "czfee")
	_rechargelogAgent.Oldfee = field.NewUint64(tableName, "oldfee")
	_rechargelogAgent.Newfee = field.NewUint64(tableName, "newfee")
	_rechargelogAgent.Type = field.NewBool(tableName, "type")

	_rechargelogAgent.fillFieldMap()

	return _rechargelogAgent
}

type rechargelogAgent struct {
	rechargelogAgentDo

	ALL        field.Asterisk
	ID         field.Uint32
	Adminid    field.Uint32
	Agentid    field.Uint32
	Createtime field.String
	Czfee      field.Uint64
	Oldfee     field.Uint64
	Newfee     field.Uint64
	Type       field.Bool // 0 -  1 +

	fieldMap map[string]field.Expr
}

func (r rechargelogAgent) Table(newTableName string) *rechargelogAgent {
	r.rechargelogAgentDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rechargelogAgent) As(alias string) *rechargelogAgent {
	r.rechargelogAgentDo.DO = *(r.rechargelogAgentDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rechargelogAgent) updateTableName(table string) *rechargelogAgent {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint32(table, "id")
	r.Adminid = field.NewUint32(table, "adminid")
	r.Agentid = field.NewUint32(table, "agentid")
	r.Createtime = field.NewString(table, "createtime")
	r.Czfee = field.NewUint64(table, "czfee")
	r.Oldfee = field.NewUint64(table, "oldfee")
	r.Newfee = field.NewUint64(table, "newfee")
	r.Type = field.NewBool(table, "type")

	r.fillFieldMap()

	return r
}

func (r *rechargelogAgent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rechargelogAgent) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["adminid"] = r.Adminid
	r.fieldMap["agentid"] = r.Agentid
	r.fieldMap["createtime"] = r.Createtime
	r.fieldMap["czfee"] = r.Czfee
	r.fieldMap["oldfee"] = r.Oldfee
	r.fieldMap["newfee"] = r.Newfee
	r.fieldMap["type"] = r.Type
}

func (r rechargelogAgent) clone(db *gorm.DB) rechargelogAgent {
	r.rechargelogAgentDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rechargelogAgent) replaceDB(db *gorm.DB) rechargelogAgent {
	r.rechargelogAgentDo.ReplaceDB(db)
	return r
}

type rechargelogAgentDo struct{ gen.DO }

type IRechargelogAgentDo interface {
	gen.SubQuery
	Debug() IRechargelogAgentDo
	WithContext(ctx context.Context) IRechargelogAgentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRechargelogAgentDo
	WriteDB() IRechargelogAgentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRechargelogAgentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRechargelogAgentDo
	Not(conds ...gen.Condition) IRechargelogAgentDo
	Or(conds ...gen.Condition) IRechargelogAgentDo
	Select(conds ...field.Expr) IRechargelogAgentDo
	Where(conds ...gen.Condition) IRechargelogAgentDo
	Order(conds ...field.Expr) IRechargelogAgentDo
	Distinct(cols ...field.Expr) IRechargelogAgentDo
	Omit(cols ...field.Expr) IRechargelogAgentDo
	Join(table schema.Tabler, on ...field.Expr) IRechargelogAgentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRechargelogAgentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRechargelogAgentDo
	Group(cols ...field.Expr) IRechargelogAgentDo
	Having(conds ...gen.Condition) IRechargelogAgentDo
	Limit(limit int) IRechargelogAgentDo
	Offset(offset int) IRechargelogAgentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargelogAgentDo
	Unscoped() IRechargelogAgentDo
	Create(values ...*model.RechargelogAgent) error
	CreateInBatches(values []*model.RechargelogAgent, batchSize int) error
	Save(values ...*model.RechargelogAgent) error
	First() (*model.RechargelogAgent, error)
	Take() (*model.RechargelogAgent, error)
	Last() (*model.RechargelogAgent, error)
	Find() ([]*model.RechargelogAgent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RechargelogAgent, err error)
	FindInBatches(result *[]*model.RechargelogAgent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RechargelogAgent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRechargelogAgentDo
	Assign(attrs ...field.AssignExpr) IRechargelogAgentDo
	Joins(fields ...field.RelationField) IRechargelogAgentDo
	Preload(fields ...field.RelationField) IRechargelogAgentDo
	FirstOrInit() (*model.RechargelogAgent, error)
	FirstOrCreate() (*model.RechargelogAgent, error)
	FindByPage(offset int, limit int) (result []*model.RechargelogAgent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRechargelogAgentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rechargelogAgentDo) Debug() IRechargelogAgentDo {
	return r.withDO(r.DO.Debug())
}

func (r rechargelogAgentDo) WithContext(ctx context.Context) IRechargelogAgentDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rechargelogAgentDo) ReadDB() IRechargelogAgentDo {
	return r.Clauses(dbresolver.Read)
}

func (r rechargelogAgentDo) WriteDB() IRechargelogAgentDo {
	return r.Clauses(dbresolver.Write)
}

func (r rechargelogAgentDo) Session(config *gorm.Session) IRechargelogAgentDo {
	return r.withDO(r.DO.Session(config))
}

func (r rechargelogAgentDo) Clauses(conds ...clause.Expression) IRechargelogAgentDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rechargelogAgentDo) Returning(value interface{}, columns ...string) IRechargelogAgentDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rechargelogAgentDo) Not(conds ...gen.Condition) IRechargelogAgentDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rechargelogAgentDo) Or(conds ...gen.Condition) IRechargelogAgentDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rechargelogAgentDo) Select(conds ...field.Expr) IRechargelogAgentDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rechargelogAgentDo) Where(conds ...gen.Condition) IRechargelogAgentDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rechargelogAgentDo) Order(conds ...field.Expr) IRechargelogAgentDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rechargelogAgentDo) Distinct(cols ...field.Expr) IRechargelogAgentDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rechargelogAgentDo) Omit(cols ...field.Expr) IRechargelogAgentDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rechargelogAgentDo) Join(table schema.Tabler, on ...field.Expr) IRechargelogAgentDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rechargelogAgentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRechargelogAgentDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rechargelogAgentDo) RightJoin(table schema.Tabler, on ...field.Expr) IRechargelogAgentDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rechargelogAgentDo) Group(cols ...field.Expr) IRechargelogAgentDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rechargelogAgentDo) Having(conds ...gen.Condition) IRechargelogAgentDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rechargelogAgentDo) Limit(limit int) IRechargelogAgentDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rechargelogAgentDo) Offset(offset int) IRechargelogAgentDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rechargelogAgentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargelogAgentDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rechargelogAgentDo) Unscoped() IRechargelogAgentDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rechargelogAgentDo) Create(values ...*model.RechargelogAgent) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rechargelogAgentDo) CreateInBatches(values []*model.RechargelogAgent, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rechargelogAgentDo) Save(values ...*model.RechargelogAgent) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rechargelogAgentDo) First() (*model.RechargelogAgent, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogAgent), nil
	}
}

func (r rechargelogAgentDo) Take() (*model.RechargelogAgent, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogAgent), nil
	}
}

func (r rechargelogAgentDo) Last() (*model.RechargelogAgent, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogAgent), nil
	}
}

func (r rechargelogAgentDo) Find() ([]*model.RechargelogAgent, error) {
	result, err := r.DO.Find()
	return result.([]*model.RechargelogAgent), err
}

func (r rechargelogAgentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RechargelogAgent, err error) {
	buf := make([]*model.RechargelogAgent, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rechargelogAgentDo) FindInBatches(result *[]*model.RechargelogAgent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rechargelogAgentDo) Attrs(attrs ...field.AssignExpr) IRechargelogAgentDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rechargelogAgentDo) Assign(attrs ...field.AssignExpr) IRechargelogAgentDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rechargelogAgentDo) Joins(fields ...field.RelationField) IRechargelogAgentDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rechargelogAgentDo) Preload(fields ...field.RelationField) IRechargelogAgentDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rechargelogAgentDo) FirstOrInit() (*model.RechargelogAgent, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogAgent), nil
	}
}

func (r rechargelogAgentDo) FirstOrCreate() (*model.RechargelogAgent, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogAgent), nil
	}
}

func (r rechargelogAgentDo) FindByPage(offset int, limit int) (result []*model.RechargelogAgent, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rechargelogAgentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rechargelogAgentDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rechargelogAgentDo) Delete(models ...*model.RechargelogAgent) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rechargelogAgentDo) withDO(do gen.Dao) *rechargelogAgentDo {
	r.DO = *do.(*gen.DO)
	return r
}
