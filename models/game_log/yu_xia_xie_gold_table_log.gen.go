// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package game_log

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newYuXiaXieGoldTableLog(db *gorm.DB, opts ...gen.DOOption) yuXiaXieGoldTableLog {
	_yuXiaXieGoldTableLog := yuXiaXieGoldTableLog{}

	_yuXiaXieGoldTableLog.yuXiaXieGoldTableLogDo.UseDB(db, opts...)
	_yuXiaXieGoldTableLog.yuXiaXieGoldTableLogDo.UseModel(&model.YuXiaXieGoldTableLog{})

	tableName := _yuXiaXieGoldTableLog.yuXiaXieGoldTableLogDo.TableName()
	_yuXiaXieGoldTableLog.ALL = field.NewAsterisk(tableName)
	_yuXiaXieGoldTableLog.ID = field.NewInt64(tableName, "id")
	_yuXiaXieGoldTableLog.UserID = field.NewInt32(tableName, "user_id")
	_yuXiaXieGoldTableLog.TableDict = field.NewString(tableName, "table_dict")
	_yuXiaXieGoldTableLog.AddDate = field.NewTime(tableName, "add_date")

	_yuXiaXieGoldTableLog.fillFieldMap()

	return _yuXiaXieGoldTableLog
}

type yuXiaXieGoldTableLog struct {
	yuXiaXieGoldTableLogDo

	ALL       field.Asterisk
	ID        field.Int64
	UserID    field.Int32  // 用户id
	TableDict field.String // 桌子内游戏信息
	AddDate   field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (y yuXiaXieGoldTableLog) Table(newTableName string) *yuXiaXieGoldTableLog {
	y.yuXiaXieGoldTableLogDo.UseTable(newTableName)
	return y.updateTableName(newTableName)
}

func (y yuXiaXieGoldTableLog) As(alias string) *yuXiaXieGoldTableLog {
	y.yuXiaXieGoldTableLogDo.DO = *(y.yuXiaXieGoldTableLogDo.As(alias).(*gen.DO))
	return y.updateTableName(alias)
}

func (y *yuXiaXieGoldTableLog) updateTableName(table string) *yuXiaXieGoldTableLog {
	y.ALL = field.NewAsterisk(table)
	y.ID = field.NewInt64(table, "id")
	y.UserID = field.NewInt32(table, "user_id")
	y.TableDict = field.NewString(table, "table_dict")
	y.AddDate = field.NewTime(table, "add_date")

	y.fillFieldMap()

	return y
}

func (y *yuXiaXieGoldTableLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := y.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (y *yuXiaXieGoldTableLog) fillFieldMap() {
	y.fieldMap = make(map[string]field.Expr, 4)
	y.fieldMap["id"] = y.ID
	y.fieldMap["user_id"] = y.UserID
	y.fieldMap["table_dict"] = y.TableDict
	y.fieldMap["add_date"] = y.AddDate
}

func (y yuXiaXieGoldTableLog) clone(db *gorm.DB) yuXiaXieGoldTableLog {
	y.yuXiaXieGoldTableLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return y
}

func (y yuXiaXieGoldTableLog) replaceDB(db *gorm.DB) yuXiaXieGoldTableLog {
	y.yuXiaXieGoldTableLogDo.ReplaceDB(db)
	return y
}

type yuXiaXieGoldTableLogDo struct{ gen.DO }

type IYuXiaXieGoldTableLogDo interface {
	gen.SubQuery
	Debug() IYuXiaXieGoldTableLogDo
	WithContext(ctx context.Context) IYuXiaXieGoldTableLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IYuXiaXieGoldTableLogDo
	WriteDB() IYuXiaXieGoldTableLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IYuXiaXieGoldTableLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IYuXiaXieGoldTableLogDo
	Not(conds ...gen.Condition) IYuXiaXieGoldTableLogDo
	Or(conds ...gen.Condition) IYuXiaXieGoldTableLogDo
	Select(conds ...field.Expr) IYuXiaXieGoldTableLogDo
	Where(conds ...gen.Condition) IYuXiaXieGoldTableLogDo
	Order(conds ...field.Expr) IYuXiaXieGoldTableLogDo
	Distinct(cols ...field.Expr) IYuXiaXieGoldTableLogDo
	Omit(cols ...field.Expr) IYuXiaXieGoldTableLogDo
	Join(table schema.Tabler, on ...field.Expr) IYuXiaXieGoldTableLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IYuXiaXieGoldTableLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IYuXiaXieGoldTableLogDo
	Group(cols ...field.Expr) IYuXiaXieGoldTableLogDo
	Having(conds ...gen.Condition) IYuXiaXieGoldTableLogDo
	Limit(limit int) IYuXiaXieGoldTableLogDo
	Offset(offset int) IYuXiaXieGoldTableLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IYuXiaXieGoldTableLogDo
	Unscoped() IYuXiaXieGoldTableLogDo
	Create(values ...*model.YuXiaXieGoldTableLog) error
	CreateInBatches(values []*model.YuXiaXieGoldTableLog, batchSize int) error
	Save(values ...*model.YuXiaXieGoldTableLog) error
	First() (*model.YuXiaXieGoldTableLog, error)
	Take() (*model.YuXiaXieGoldTableLog, error)
	Last() (*model.YuXiaXieGoldTableLog, error)
	Find() ([]*model.YuXiaXieGoldTableLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YuXiaXieGoldTableLog, err error)
	FindInBatches(result *[]*model.YuXiaXieGoldTableLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.YuXiaXieGoldTableLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IYuXiaXieGoldTableLogDo
	Assign(attrs ...field.AssignExpr) IYuXiaXieGoldTableLogDo
	Joins(fields ...field.RelationField) IYuXiaXieGoldTableLogDo
	Preload(fields ...field.RelationField) IYuXiaXieGoldTableLogDo
	FirstOrInit() (*model.YuXiaXieGoldTableLog, error)
	FirstOrCreate() (*model.YuXiaXieGoldTableLog, error)
	FindByPage(offset int, limit int) (result []*model.YuXiaXieGoldTableLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IYuXiaXieGoldTableLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (y yuXiaXieGoldTableLogDo) Debug() IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Debug())
}

func (y yuXiaXieGoldTableLogDo) WithContext(ctx context.Context) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.WithContext(ctx))
}

func (y yuXiaXieGoldTableLogDo) ReadDB() IYuXiaXieGoldTableLogDo {
	return y.Clauses(dbresolver.Read)
}

func (y yuXiaXieGoldTableLogDo) WriteDB() IYuXiaXieGoldTableLogDo {
	return y.Clauses(dbresolver.Write)
}

func (y yuXiaXieGoldTableLogDo) Session(config *gorm.Session) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Session(config))
}

func (y yuXiaXieGoldTableLogDo) Clauses(conds ...clause.Expression) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Clauses(conds...))
}

func (y yuXiaXieGoldTableLogDo) Returning(value interface{}, columns ...string) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Returning(value, columns...))
}

func (y yuXiaXieGoldTableLogDo) Not(conds ...gen.Condition) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Not(conds...))
}

func (y yuXiaXieGoldTableLogDo) Or(conds ...gen.Condition) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Or(conds...))
}

func (y yuXiaXieGoldTableLogDo) Select(conds ...field.Expr) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Select(conds...))
}

func (y yuXiaXieGoldTableLogDo) Where(conds ...gen.Condition) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Where(conds...))
}

func (y yuXiaXieGoldTableLogDo) Order(conds ...field.Expr) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Order(conds...))
}

func (y yuXiaXieGoldTableLogDo) Distinct(cols ...field.Expr) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Distinct(cols...))
}

func (y yuXiaXieGoldTableLogDo) Omit(cols ...field.Expr) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Omit(cols...))
}

func (y yuXiaXieGoldTableLogDo) Join(table schema.Tabler, on ...field.Expr) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Join(table, on...))
}

func (y yuXiaXieGoldTableLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.LeftJoin(table, on...))
}

func (y yuXiaXieGoldTableLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.RightJoin(table, on...))
}

func (y yuXiaXieGoldTableLogDo) Group(cols ...field.Expr) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Group(cols...))
}

func (y yuXiaXieGoldTableLogDo) Having(conds ...gen.Condition) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Having(conds...))
}

func (y yuXiaXieGoldTableLogDo) Limit(limit int) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Limit(limit))
}

func (y yuXiaXieGoldTableLogDo) Offset(offset int) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Offset(offset))
}

func (y yuXiaXieGoldTableLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Scopes(funcs...))
}

func (y yuXiaXieGoldTableLogDo) Unscoped() IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Unscoped())
}

func (y yuXiaXieGoldTableLogDo) Create(values ...*model.YuXiaXieGoldTableLog) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Create(values)
}

func (y yuXiaXieGoldTableLogDo) CreateInBatches(values []*model.YuXiaXieGoldTableLog, batchSize int) error {
	return y.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (y yuXiaXieGoldTableLogDo) Save(values ...*model.YuXiaXieGoldTableLog) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Save(values)
}

func (y yuXiaXieGoldTableLogDo) First() (*model.YuXiaXieGoldTableLog, error) {
	if result, err := y.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.YuXiaXieGoldTableLog), nil
	}
}

func (y yuXiaXieGoldTableLogDo) Take() (*model.YuXiaXieGoldTableLog, error) {
	if result, err := y.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.YuXiaXieGoldTableLog), nil
	}
}

func (y yuXiaXieGoldTableLogDo) Last() (*model.YuXiaXieGoldTableLog, error) {
	if result, err := y.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.YuXiaXieGoldTableLog), nil
	}
}

func (y yuXiaXieGoldTableLogDo) Find() ([]*model.YuXiaXieGoldTableLog, error) {
	result, err := y.DO.Find()
	return result.([]*model.YuXiaXieGoldTableLog), err
}

func (y yuXiaXieGoldTableLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YuXiaXieGoldTableLog, err error) {
	buf := make([]*model.YuXiaXieGoldTableLog, 0, batchSize)
	err = y.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (y yuXiaXieGoldTableLogDo) FindInBatches(result *[]*model.YuXiaXieGoldTableLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return y.DO.FindInBatches(result, batchSize, fc)
}

func (y yuXiaXieGoldTableLogDo) Attrs(attrs ...field.AssignExpr) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Attrs(attrs...))
}

func (y yuXiaXieGoldTableLogDo) Assign(attrs ...field.AssignExpr) IYuXiaXieGoldTableLogDo {
	return y.withDO(y.DO.Assign(attrs...))
}

func (y yuXiaXieGoldTableLogDo) Joins(fields ...field.RelationField) IYuXiaXieGoldTableLogDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Joins(_f))
	}
	return &y
}

func (y yuXiaXieGoldTableLogDo) Preload(fields ...field.RelationField) IYuXiaXieGoldTableLogDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Preload(_f))
	}
	return &y
}

func (y yuXiaXieGoldTableLogDo) FirstOrInit() (*model.YuXiaXieGoldTableLog, error) {
	if result, err := y.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.YuXiaXieGoldTableLog), nil
	}
}

func (y yuXiaXieGoldTableLogDo) FirstOrCreate() (*model.YuXiaXieGoldTableLog, error) {
	if result, err := y.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.YuXiaXieGoldTableLog), nil
	}
}

func (y yuXiaXieGoldTableLogDo) FindByPage(offset int, limit int) (result []*model.YuXiaXieGoldTableLog, count int64, err error) {
	result, err = y.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = y.Offset(-1).Limit(-1).Count()
	return
}

func (y yuXiaXieGoldTableLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = y.Count()
	if err != nil {
		return
	}

	err = y.Offset(offset).Limit(limit).Scan(result)
	return
}

func (y yuXiaXieGoldTableLogDo) Scan(result interface{}) (err error) {
	return y.DO.Scan(result)
}

func (y yuXiaXieGoldTableLogDo) Delete(models ...*model.YuXiaXieGoldTableLog) (result gen.ResultInfo, err error) {
	return y.DO.Delete(models)
}

func (y *yuXiaXieGoldTableLogDo) withDO(do gen.Dao) *yuXiaXieGoldTableLogDo {
	y.DO = *do.(*gen.DO)
	return y
}
