// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package landlords

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLogTotal(db *gorm.DB, opts ...gen.DOOption) logTotal {
	_logTotal := logTotal{}

	_logTotal.logTotalDo.UseDB(db, opts...)
	_logTotal.logTotalDo.UseModel(&model.LogTotal{})

	tableName := _logTotal.logTotalDo.TableName()
	_logTotal.ALL = field.NewAsterisk(tableName)
	_logTotal.UID = field.NewUint32(tableName, "uid")
	_logTotal.Play = field.NewUint32(tableName, "play")
	_logTotal.WinAll = field.NewUint32(tableName, "win_all")
	_logTotal.DizhuNum = field.NewUint32(tableName, "dizhu_num")
	_logTotal.WinDizhu = field.NewUint32(tableName, "win_dizhu")
	_logTotal.BmScore = field.NewUint32(tableName, "bm_score")

	_logTotal.fillFieldMap()

	return _logTotal
}

type logTotal struct {
	logTotalDo

	ALL      field.Asterisk
	UID      field.Uint32
	Play     field.Uint32
	WinAll   field.Uint32
	DizhuNum field.Uint32
	WinDizhu field.Uint32
	BmScore  field.Uint32

	fieldMap map[string]field.Expr
}

func (l logTotal) Table(newTableName string) *logTotal {
	l.logTotalDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logTotal) As(alias string) *logTotal {
	l.logTotalDo.DO = *(l.logTotalDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logTotal) updateTableName(table string) *logTotal {
	l.ALL = field.NewAsterisk(table)
	l.UID = field.NewUint32(table, "uid")
	l.Play = field.NewUint32(table, "play")
	l.WinAll = field.NewUint32(table, "win_all")
	l.DizhuNum = field.NewUint32(table, "dizhu_num")
	l.WinDizhu = field.NewUint32(table, "win_dizhu")
	l.BmScore = field.NewUint32(table, "bm_score")

	l.fillFieldMap()

	return l
}

func (l *logTotal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logTotal) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 6)
	l.fieldMap["uid"] = l.UID
	l.fieldMap["play"] = l.Play
	l.fieldMap["win_all"] = l.WinAll
	l.fieldMap["dizhu_num"] = l.DizhuNum
	l.fieldMap["win_dizhu"] = l.WinDizhu
	l.fieldMap["bm_score"] = l.BmScore
}

func (l logTotal) clone(db *gorm.DB) logTotal {
	l.logTotalDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logTotal) replaceDB(db *gorm.DB) logTotal {
	l.logTotalDo.ReplaceDB(db)
	return l
}

type logTotalDo struct{ gen.DO }

type ILogTotalDo interface {
	gen.SubQuery
	Debug() ILogTotalDo
	WithContext(ctx context.Context) ILogTotalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILogTotalDo
	WriteDB() ILogTotalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILogTotalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILogTotalDo
	Not(conds ...gen.Condition) ILogTotalDo
	Or(conds ...gen.Condition) ILogTotalDo
	Select(conds ...field.Expr) ILogTotalDo
	Where(conds ...gen.Condition) ILogTotalDo
	Order(conds ...field.Expr) ILogTotalDo
	Distinct(cols ...field.Expr) ILogTotalDo
	Omit(cols ...field.Expr) ILogTotalDo
	Join(table schema.Tabler, on ...field.Expr) ILogTotalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILogTotalDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILogTotalDo
	Group(cols ...field.Expr) ILogTotalDo
	Having(conds ...gen.Condition) ILogTotalDo
	Limit(limit int) ILogTotalDo
	Offset(offset int) ILogTotalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILogTotalDo
	Unscoped() ILogTotalDo
	Create(values ...*model.LogTotal) error
	CreateInBatches(values []*model.LogTotal, batchSize int) error
	Save(values ...*model.LogTotal) error
	First() (*model.LogTotal, error)
	Take() (*model.LogTotal, error)
	Last() (*model.LogTotal, error)
	Find() ([]*model.LogTotal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogTotal, err error)
	FindInBatches(result *[]*model.LogTotal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LogTotal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILogTotalDo
	Assign(attrs ...field.AssignExpr) ILogTotalDo
	Joins(fields ...field.RelationField) ILogTotalDo
	Preload(fields ...field.RelationField) ILogTotalDo
	FirstOrInit() (*model.LogTotal, error)
	FirstOrCreate() (*model.LogTotal, error)
	FindByPage(offset int, limit int) (result []*model.LogTotal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILogTotalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l logTotalDo) Debug() ILogTotalDo {
	return l.withDO(l.DO.Debug())
}

func (l logTotalDo) WithContext(ctx context.Context) ILogTotalDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logTotalDo) ReadDB() ILogTotalDo {
	return l.Clauses(dbresolver.Read)
}

func (l logTotalDo) WriteDB() ILogTotalDo {
	return l.Clauses(dbresolver.Write)
}

func (l logTotalDo) Session(config *gorm.Session) ILogTotalDo {
	return l.withDO(l.DO.Session(config))
}

func (l logTotalDo) Clauses(conds ...clause.Expression) ILogTotalDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logTotalDo) Returning(value interface{}, columns ...string) ILogTotalDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logTotalDo) Not(conds ...gen.Condition) ILogTotalDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logTotalDo) Or(conds ...gen.Condition) ILogTotalDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logTotalDo) Select(conds ...field.Expr) ILogTotalDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logTotalDo) Where(conds ...gen.Condition) ILogTotalDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logTotalDo) Order(conds ...field.Expr) ILogTotalDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logTotalDo) Distinct(cols ...field.Expr) ILogTotalDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logTotalDo) Omit(cols ...field.Expr) ILogTotalDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logTotalDo) Join(table schema.Tabler, on ...field.Expr) ILogTotalDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logTotalDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILogTotalDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logTotalDo) RightJoin(table schema.Tabler, on ...field.Expr) ILogTotalDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logTotalDo) Group(cols ...field.Expr) ILogTotalDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logTotalDo) Having(conds ...gen.Condition) ILogTotalDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logTotalDo) Limit(limit int) ILogTotalDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logTotalDo) Offset(offset int) ILogTotalDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logTotalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILogTotalDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logTotalDo) Unscoped() ILogTotalDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logTotalDo) Create(values ...*model.LogTotal) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logTotalDo) CreateInBatches(values []*model.LogTotal, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logTotalDo) Save(values ...*model.LogTotal) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logTotalDo) First() (*model.LogTotal, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogTotal), nil
	}
}

func (l logTotalDo) Take() (*model.LogTotal, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogTotal), nil
	}
}

func (l logTotalDo) Last() (*model.LogTotal, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogTotal), nil
	}
}

func (l logTotalDo) Find() ([]*model.LogTotal, error) {
	result, err := l.DO.Find()
	return result.([]*model.LogTotal), err
}

func (l logTotalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogTotal, err error) {
	buf := make([]*model.LogTotal, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logTotalDo) FindInBatches(result *[]*model.LogTotal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logTotalDo) Attrs(attrs ...field.AssignExpr) ILogTotalDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logTotalDo) Assign(attrs ...field.AssignExpr) ILogTotalDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logTotalDo) Joins(fields ...field.RelationField) ILogTotalDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logTotalDo) Preload(fields ...field.RelationField) ILogTotalDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logTotalDo) FirstOrInit() (*model.LogTotal, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogTotal), nil
	}
}

func (l logTotalDo) FirstOrCreate() (*model.LogTotal, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogTotal), nil
	}
}

func (l logTotalDo) FindByPage(offset int, limit int) (result []*model.LogTotal, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logTotalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logTotalDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logTotalDo) Delete(models ...*model.LogTotal) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logTotalDo) withDO(do gen.Dao) *logTotalDo {
	l.DO = *do.(*gen.DO)
	return l
}
