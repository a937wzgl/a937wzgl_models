// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package game

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newTSessionPool(db *gorm.DB, opts ...gen.DOOption) tSessionPool {
	_tSessionPool := tSessionPool{}

	_tSessionPool.tSessionPoolDo.UseDB(db, opts...)
	_tSessionPool.tSessionPoolDo.UseModel(&model.TSessionPool{})

	tableName := _tSessionPool.tSessionPoolDo.TableName()
	_tSessionPool.ALL = field.NewAsterisk(tableName)
	_tSessionPool.SessionID = field.NewString(tableName, "session_id")
	_tSessionPool.Content = field.NewString(tableName, "content")

	_tSessionPool.fillFieldMap()

	return _tSessionPool
}

type tSessionPool struct {
	tSessionPoolDo

	ALL       field.Asterisk
	SessionID field.String
	Content   field.String

	fieldMap map[string]field.Expr
}

func (t tSessionPool) Table(newTableName string) *tSessionPool {
	t.tSessionPoolDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSessionPool) As(alias string) *tSessionPool {
	t.tSessionPoolDo.DO = *(t.tSessionPoolDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSessionPool) updateTableName(table string) *tSessionPool {
	t.ALL = field.NewAsterisk(table)
	t.SessionID = field.NewString(table, "session_id")
	t.Content = field.NewString(table, "content")

	t.fillFieldMap()

	return t
}

func (t *tSessionPool) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSessionPool) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["session_id"] = t.SessionID
	t.fieldMap["content"] = t.Content
}

func (t tSessionPool) clone(db *gorm.DB) tSessionPool {
	t.tSessionPoolDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tSessionPool) replaceDB(db *gorm.DB) tSessionPool {
	t.tSessionPoolDo.ReplaceDB(db)
	return t
}

type tSessionPoolDo struct{ gen.DO }

type ITSessionPoolDo interface {
	gen.SubQuery
	Debug() ITSessionPoolDo
	WithContext(ctx context.Context) ITSessionPoolDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITSessionPoolDo
	WriteDB() ITSessionPoolDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITSessionPoolDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITSessionPoolDo
	Not(conds ...gen.Condition) ITSessionPoolDo
	Or(conds ...gen.Condition) ITSessionPoolDo
	Select(conds ...field.Expr) ITSessionPoolDo
	Where(conds ...gen.Condition) ITSessionPoolDo
	Order(conds ...field.Expr) ITSessionPoolDo
	Distinct(cols ...field.Expr) ITSessionPoolDo
	Omit(cols ...field.Expr) ITSessionPoolDo
	Join(table schema.Tabler, on ...field.Expr) ITSessionPoolDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITSessionPoolDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITSessionPoolDo
	Group(cols ...field.Expr) ITSessionPoolDo
	Having(conds ...gen.Condition) ITSessionPoolDo
	Limit(limit int) ITSessionPoolDo
	Offset(offset int) ITSessionPoolDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITSessionPoolDo
	Unscoped() ITSessionPoolDo
	Create(values ...*model.TSessionPool) error
	CreateInBatches(values []*model.TSessionPool, batchSize int) error
	Save(values ...*model.TSessionPool) error
	First() (*model.TSessionPool, error)
	Take() (*model.TSessionPool, error)
	Last() (*model.TSessionPool, error)
	Find() ([]*model.TSessionPool, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSessionPool, err error)
	FindInBatches(result *[]*model.TSessionPool, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TSessionPool) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITSessionPoolDo
	Assign(attrs ...field.AssignExpr) ITSessionPoolDo
	Joins(fields ...field.RelationField) ITSessionPoolDo
	Preload(fields ...field.RelationField) ITSessionPoolDo
	FirstOrInit() (*model.TSessionPool, error)
	FirstOrCreate() (*model.TSessionPool, error)
	FindByPage(offset int, limit int) (result []*model.TSessionPool, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITSessionPoolDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tSessionPoolDo) Debug() ITSessionPoolDo {
	return t.withDO(t.DO.Debug())
}

func (t tSessionPoolDo) WithContext(ctx context.Context) ITSessionPoolDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSessionPoolDo) ReadDB() ITSessionPoolDo {
	return t.Clauses(dbresolver.Read)
}

func (t tSessionPoolDo) WriteDB() ITSessionPoolDo {
	return t.Clauses(dbresolver.Write)
}

func (t tSessionPoolDo) Session(config *gorm.Session) ITSessionPoolDo {
	return t.withDO(t.DO.Session(config))
}

func (t tSessionPoolDo) Clauses(conds ...clause.Expression) ITSessionPoolDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSessionPoolDo) Returning(value interface{}, columns ...string) ITSessionPoolDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSessionPoolDo) Not(conds ...gen.Condition) ITSessionPoolDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSessionPoolDo) Or(conds ...gen.Condition) ITSessionPoolDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSessionPoolDo) Select(conds ...field.Expr) ITSessionPoolDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSessionPoolDo) Where(conds ...gen.Condition) ITSessionPoolDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSessionPoolDo) Order(conds ...field.Expr) ITSessionPoolDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSessionPoolDo) Distinct(cols ...field.Expr) ITSessionPoolDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSessionPoolDo) Omit(cols ...field.Expr) ITSessionPoolDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSessionPoolDo) Join(table schema.Tabler, on ...field.Expr) ITSessionPoolDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSessionPoolDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITSessionPoolDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSessionPoolDo) RightJoin(table schema.Tabler, on ...field.Expr) ITSessionPoolDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSessionPoolDo) Group(cols ...field.Expr) ITSessionPoolDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSessionPoolDo) Having(conds ...gen.Condition) ITSessionPoolDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSessionPoolDo) Limit(limit int) ITSessionPoolDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSessionPoolDo) Offset(offset int) ITSessionPoolDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSessionPoolDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITSessionPoolDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSessionPoolDo) Unscoped() ITSessionPoolDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSessionPoolDo) Create(values ...*model.TSessionPool) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSessionPoolDo) CreateInBatches(values []*model.TSessionPool, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSessionPoolDo) Save(values ...*model.TSessionPool) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSessionPoolDo) First() (*model.TSessionPool, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSessionPool), nil
	}
}

func (t tSessionPoolDo) Take() (*model.TSessionPool, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSessionPool), nil
	}
}

func (t tSessionPoolDo) Last() (*model.TSessionPool, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSessionPool), nil
	}
}

func (t tSessionPoolDo) Find() ([]*model.TSessionPool, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSessionPool), err
}

func (t tSessionPoolDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSessionPool, err error) {
	buf := make([]*model.TSessionPool, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSessionPoolDo) FindInBatches(result *[]*model.TSessionPool, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSessionPoolDo) Attrs(attrs ...field.AssignExpr) ITSessionPoolDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSessionPoolDo) Assign(attrs ...field.AssignExpr) ITSessionPoolDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSessionPoolDo) Joins(fields ...field.RelationField) ITSessionPoolDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tSessionPoolDo) Preload(fields ...field.RelationField) ITSessionPoolDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tSessionPoolDo) FirstOrInit() (*model.TSessionPool, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSessionPool), nil
	}
}

func (t tSessionPoolDo) FirstOrCreate() (*model.TSessionPool, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSessionPool), nil
	}
}

func (t tSessionPoolDo) FindByPage(offset int, limit int) (result []*model.TSessionPool, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSessionPoolDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tSessionPoolDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tSessionPoolDo) Delete(models ...*model.TSessionPool) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tSessionPoolDo) withDO(do gen.Dao) *tSessionPoolDo {
	t.DO = *do.(*gen.DO)
	return t
}
