// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package la_ba

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLotterylog6005(db *gorm.DB, opts ...gen.DOOption) lotterylog6005 {
	_lotterylog6005 := lotterylog6005{}

	_lotterylog6005.lotterylog6005Do.UseDB(db, opts...)
	_lotterylog6005.lotterylog6005Do.UseModel(&model.Lotterylog6005{})

	tableName := _lotterylog6005.lotterylog6005Do.TableName()
	_lotterylog6005.ALL = field.NewAsterisk(tableName)
	_lotterylog6005.ID = field.NewInt32(tableName, "id")
	_lotterylog6005.Userid = field.NewUint32(tableName, "userid")
	_lotterylog6005.ResultArray = field.NewString(tableName, "result_array")
	_lotterylog6005.LotteryTime = field.NewTime(tableName, "lotteryTime")

	_lotterylog6005.fillFieldMap()

	return _lotterylog6005
}

type lotterylog6005 struct {
	lotterylog6005Do

	ALL         field.Asterisk
	ID          field.Int32
	Userid      field.Uint32
	ResultArray field.String
	LotteryTime field.Time

	fieldMap map[string]field.Expr
}

func (l lotterylog6005) Table(newTableName string) *lotterylog6005 {
	l.lotterylog6005Do.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lotterylog6005) As(alias string) *lotterylog6005 {
	l.lotterylog6005Do.DO = *(l.lotterylog6005Do.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lotterylog6005) updateTableName(table string) *lotterylog6005 {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Userid = field.NewUint32(table, "userid")
	l.ResultArray = field.NewString(table, "result_array")
	l.LotteryTime = field.NewTime(table, "lotteryTime")

	l.fillFieldMap()

	return l
}

func (l *lotterylog6005) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lotterylog6005) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 4)
	l.fieldMap["id"] = l.ID
	l.fieldMap["userid"] = l.Userid
	l.fieldMap["result_array"] = l.ResultArray
	l.fieldMap["lotteryTime"] = l.LotteryTime
}

func (l lotterylog6005) clone(db *gorm.DB) lotterylog6005 {
	l.lotterylog6005Do.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lotterylog6005) replaceDB(db *gorm.DB) lotterylog6005 {
	l.lotterylog6005Do.ReplaceDB(db)
	return l
}

type lotterylog6005Do struct{ gen.DO }

type ILotterylog6005Do interface {
	gen.SubQuery
	Debug() ILotterylog6005Do
	WithContext(ctx context.Context) ILotterylog6005Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILotterylog6005Do
	WriteDB() ILotterylog6005Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILotterylog6005Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILotterylog6005Do
	Not(conds ...gen.Condition) ILotterylog6005Do
	Or(conds ...gen.Condition) ILotterylog6005Do
	Select(conds ...field.Expr) ILotterylog6005Do
	Where(conds ...gen.Condition) ILotterylog6005Do
	Order(conds ...field.Expr) ILotterylog6005Do
	Distinct(cols ...field.Expr) ILotterylog6005Do
	Omit(cols ...field.Expr) ILotterylog6005Do
	Join(table schema.Tabler, on ...field.Expr) ILotterylog6005Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog6005Do
	RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog6005Do
	Group(cols ...field.Expr) ILotterylog6005Do
	Having(conds ...gen.Condition) ILotterylog6005Do
	Limit(limit int) ILotterylog6005Do
	Offset(offset int) ILotterylog6005Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog6005Do
	Unscoped() ILotterylog6005Do
	Create(values ...*model.Lotterylog6005) error
	CreateInBatches(values []*model.Lotterylog6005, batchSize int) error
	Save(values ...*model.Lotterylog6005) error
	First() (*model.Lotterylog6005, error)
	Take() (*model.Lotterylog6005, error)
	Last() (*model.Lotterylog6005, error)
	Find() ([]*model.Lotterylog6005, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog6005, err error)
	FindInBatches(result *[]*model.Lotterylog6005, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lotterylog6005) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILotterylog6005Do
	Assign(attrs ...field.AssignExpr) ILotterylog6005Do
	Joins(fields ...field.RelationField) ILotterylog6005Do
	Preload(fields ...field.RelationField) ILotterylog6005Do
	FirstOrInit() (*model.Lotterylog6005, error)
	FirstOrCreate() (*model.Lotterylog6005, error)
	FindByPage(offset int, limit int) (result []*model.Lotterylog6005, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILotterylog6005Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lotterylog6005Do) Debug() ILotterylog6005Do {
	return l.withDO(l.DO.Debug())
}

func (l lotterylog6005Do) WithContext(ctx context.Context) ILotterylog6005Do {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lotterylog6005Do) ReadDB() ILotterylog6005Do {
	return l.Clauses(dbresolver.Read)
}

func (l lotterylog6005Do) WriteDB() ILotterylog6005Do {
	return l.Clauses(dbresolver.Write)
}

func (l lotterylog6005Do) Session(config *gorm.Session) ILotterylog6005Do {
	return l.withDO(l.DO.Session(config))
}

func (l lotterylog6005Do) Clauses(conds ...clause.Expression) ILotterylog6005Do {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lotterylog6005Do) Returning(value interface{}, columns ...string) ILotterylog6005Do {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lotterylog6005Do) Not(conds ...gen.Condition) ILotterylog6005Do {
	return l.withDO(l.DO.Not(conds...))
}

func (l lotterylog6005Do) Or(conds ...gen.Condition) ILotterylog6005Do {
	return l.withDO(l.DO.Or(conds...))
}

func (l lotterylog6005Do) Select(conds ...field.Expr) ILotterylog6005Do {
	return l.withDO(l.DO.Select(conds...))
}

func (l lotterylog6005Do) Where(conds ...gen.Condition) ILotterylog6005Do {
	return l.withDO(l.DO.Where(conds...))
}

func (l lotterylog6005Do) Order(conds ...field.Expr) ILotterylog6005Do {
	return l.withDO(l.DO.Order(conds...))
}

func (l lotterylog6005Do) Distinct(cols ...field.Expr) ILotterylog6005Do {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lotterylog6005Do) Omit(cols ...field.Expr) ILotterylog6005Do {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lotterylog6005Do) Join(table schema.Tabler, on ...field.Expr) ILotterylog6005Do {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lotterylog6005Do) LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog6005Do {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lotterylog6005Do) RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog6005Do {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lotterylog6005Do) Group(cols ...field.Expr) ILotterylog6005Do {
	return l.withDO(l.DO.Group(cols...))
}

func (l lotterylog6005Do) Having(conds ...gen.Condition) ILotterylog6005Do {
	return l.withDO(l.DO.Having(conds...))
}

func (l lotterylog6005Do) Limit(limit int) ILotterylog6005Do {
	return l.withDO(l.DO.Limit(limit))
}

func (l lotterylog6005Do) Offset(offset int) ILotterylog6005Do {
	return l.withDO(l.DO.Offset(offset))
}

func (l lotterylog6005Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog6005Do {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lotterylog6005Do) Unscoped() ILotterylog6005Do {
	return l.withDO(l.DO.Unscoped())
}

func (l lotterylog6005Do) Create(values ...*model.Lotterylog6005) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lotterylog6005Do) CreateInBatches(values []*model.Lotterylog6005, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lotterylog6005Do) Save(values ...*model.Lotterylog6005) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lotterylog6005Do) First() (*model.Lotterylog6005, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog6005), nil
	}
}

func (l lotterylog6005Do) Take() (*model.Lotterylog6005, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog6005), nil
	}
}

func (l lotterylog6005Do) Last() (*model.Lotterylog6005, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog6005), nil
	}
}

func (l lotterylog6005Do) Find() ([]*model.Lotterylog6005, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lotterylog6005), err
}

func (l lotterylog6005Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog6005, err error) {
	buf := make([]*model.Lotterylog6005, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lotterylog6005Do) FindInBatches(result *[]*model.Lotterylog6005, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lotterylog6005Do) Attrs(attrs ...field.AssignExpr) ILotterylog6005Do {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lotterylog6005Do) Assign(attrs ...field.AssignExpr) ILotterylog6005Do {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lotterylog6005Do) Joins(fields ...field.RelationField) ILotterylog6005Do {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lotterylog6005Do) Preload(fields ...field.RelationField) ILotterylog6005Do {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lotterylog6005Do) FirstOrInit() (*model.Lotterylog6005, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog6005), nil
	}
}

func (l lotterylog6005Do) FirstOrCreate() (*model.Lotterylog6005, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog6005), nil
	}
}

func (l lotterylog6005Do) FindByPage(offset int, limit int) (result []*model.Lotterylog6005, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lotterylog6005Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lotterylog6005Do) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lotterylog6005Do) Delete(models ...*model.Lotterylog6005) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lotterylog6005Do) withDO(do gen.Dao) *lotterylog6005Do {
	l.DO = *do.(*gen.DO)
	return l
}
