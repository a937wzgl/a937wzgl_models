// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newUidglaid(db *gorm.DB, opts ...gen.DOOption) uidglaid {
	_uidglaid := uidglaid{}

	_uidglaid.uidglaidDo.UseDB(db, opts...)
	_uidglaid.uidglaidDo.UseModel(&model.Uidglaid{})

	tableName := _uidglaid.uidglaidDo.TableName()
	_uidglaid.ALL = field.NewAsterisk(tableName)
	_uidglaid.ID = field.NewUint32(tableName, "id")
	_uidglaid.UID = field.NewUint32(tableName, "uid")
	_uidglaid.Aid = field.NewUint32(tableName, "aid")
	_uidglaid.Createtime = field.NewString(tableName, "createtime")

	_uidglaid.fillFieldMap()

	return _uidglaid
}

type uidglaid struct {
	uidglaidDo

	ALL        field.Asterisk
	ID         field.Uint32
	UID        field.Uint32
	Aid        field.Uint32
	Createtime field.String

	fieldMap map[string]field.Expr
}

func (u uidglaid) Table(newTableName string) *uidglaid {
	u.uidglaidDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uidglaid) As(alias string) *uidglaid {
	u.uidglaidDo.DO = *(u.uidglaidDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uidglaid) updateTableName(table string) *uidglaid {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint32(table, "id")
	u.UID = field.NewUint32(table, "uid")
	u.Aid = field.NewUint32(table, "aid")
	u.Createtime = field.NewString(table, "createtime")

	u.fillFieldMap()

	return u
}

func (u *uidglaid) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uidglaid) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["aid"] = u.Aid
	u.fieldMap["createtime"] = u.Createtime
}

func (u uidglaid) clone(db *gorm.DB) uidglaid {
	u.uidglaidDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uidglaid) replaceDB(db *gorm.DB) uidglaid {
	u.uidglaidDo.ReplaceDB(db)
	return u
}

type uidglaidDo struct{ gen.DO }

type IUidglaidDo interface {
	gen.SubQuery
	Debug() IUidglaidDo
	WithContext(ctx context.Context) IUidglaidDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUidglaidDo
	WriteDB() IUidglaidDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUidglaidDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUidglaidDo
	Not(conds ...gen.Condition) IUidglaidDo
	Or(conds ...gen.Condition) IUidglaidDo
	Select(conds ...field.Expr) IUidglaidDo
	Where(conds ...gen.Condition) IUidglaidDo
	Order(conds ...field.Expr) IUidglaidDo
	Distinct(cols ...field.Expr) IUidglaidDo
	Omit(cols ...field.Expr) IUidglaidDo
	Join(table schema.Tabler, on ...field.Expr) IUidglaidDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUidglaidDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUidglaidDo
	Group(cols ...field.Expr) IUidglaidDo
	Having(conds ...gen.Condition) IUidglaidDo
	Limit(limit int) IUidglaidDo
	Offset(offset int) IUidglaidDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUidglaidDo
	Unscoped() IUidglaidDo
	Create(values ...*model.Uidglaid) error
	CreateInBatches(values []*model.Uidglaid, batchSize int) error
	Save(values ...*model.Uidglaid) error
	First() (*model.Uidglaid, error)
	Take() (*model.Uidglaid, error)
	Last() (*model.Uidglaid, error)
	Find() ([]*model.Uidglaid, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Uidglaid, err error)
	FindInBatches(result *[]*model.Uidglaid, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Uidglaid) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUidglaidDo
	Assign(attrs ...field.AssignExpr) IUidglaidDo
	Joins(fields ...field.RelationField) IUidglaidDo
	Preload(fields ...field.RelationField) IUidglaidDo
	FirstOrInit() (*model.Uidglaid, error)
	FirstOrCreate() (*model.Uidglaid, error)
	FindByPage(offset int, limit int) (result []*model.Uidglaid, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUidglaidDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u uidglaidDo) Debug() IUidglaidDo {
	return u.withDO(u.DO.Debug())
}

func (u uidglaidDo) WithContext(ctx context.Context) IUidglaidDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uidglaidDo) ReadDB() IUidglaidDo {
	return u.Clauses(dbresolver.Read)
}

func (u uidglaidDo) WriteDB() IUidglaidDo {
	return u.Clauses(dbresolver.Write)
}

func (u uidglaidDo) Session(config *gorm.Session) IUidglaidDo {
	return u.withDO(u.DO.Session(config))
}

func (u uidglaidDo) Clauses(conds ...clause.Expression) IUidglaidDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uidglaidDo) Returning(value interface{}, columns ...string) IUidglaidDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uidglaidDo) Not(conds ...gen.Condition) IUidglaidDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uidglaidDo) Or(conds ...gen.Condition) IUidglaidDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uidglaidDo) Select(conds ...field.Expr) IUidglaidDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uidglaidDo) Where(conds ...gen.Condition) IUidglaidDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uidglaidDo) Order(conds ...field.Expr) IUidglaidDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uidglaidDo) Distinct(cols ...field.Expr) IUidglaidDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uidglaidDo) Omit(cols ...field.Expr) IUidglaidDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uidglaidDo) Join(table schema.Tabler, on ...field.Expr) IUidglaidDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uidglaidDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUidglaidDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uidglaidDo) RightJoin(table schema.Tabler, on ...field.Expr) IUidglaidDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uidglaidDo) Group(cols ...field.Expr) IUidglaidDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uidglaidDo) Having(conds ...gen.Condition) IUidglaidDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uidglaidDo) Limit(limit int) IUidglaidDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uidglaidDo) Offset(offset int) IUidglaidDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uidglaidDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUidglaidDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uidglaidDo) Unscoped() IUidglaidDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uidglaidDo) Create(values ...*model.Uidglaid) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uidglaidDo) CreateInBatches(values []*model.Uidglaid, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uidglaidDo) Save(values ...*model.Uidglaid) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uidglaidDo) First() (*model.Uidglaid, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Uidglaid), nil
	}
}

func (u uidglaidDo) Take() (*model.Uidglaid, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Uidglaid), nil
	}
}

func (u uidglaidDo) Last() (*model.Uidglaid, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Uidglaid), nil
	}
}

func (u uidglaidDo) Find() ([]*model.Uidglaid, error) {
	result, err := u.DO.Find()
	return result.([]*model.Uidglaid), err
}

func (u uidglaidDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Uidglaid, err error) {
	buf := make([]*model.Uidglaid, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uidglaidDo) FindInBatches(result *[]*model.Uidglaid, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uidglaidDo) Attrs(attrs ...field.AssignExpr) IUidglaidDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uidglaidDo) Assign(attrs ...field.AssignExpr) IUidglaidDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uidglaidDo) Joins(fields ...field.RelationField) IUidglaidDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uidglaidDo) Preload(fields ...field.RelationField) IUidglaidDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uidglaidDo) FirstOrInit() (*model.Uidglaid, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Uidglaid), nil
	}
}

func (u uidglaidDo) FirstOrCreate() (*model.Uidglaid, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Uidglaid), nil
	}
}

func (u uidglaidDo) FindByPage(offset int, limit int) (result []*model.Uidglaid, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uidglaidDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uidglaidDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uidglaidDo) Delete(models ...*model.Uidglaid) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uidglaidDo) withDO(do gen.Dao) *uidglaidDo {
	u.DO = *do.(*gen.DO)
	return u
}
