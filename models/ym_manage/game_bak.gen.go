// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newGameBak(db *gorm.DB, opts ...gen.DOOption) gameBak {
	_gameBak := gameBak{}

	_gameBak.gameBakDo.UseDB(db, opts...)
	_gameBak.gameBakDo.UseModel(&model.GameBak{})

	tableName := _gameBak.gameBakDo.TableName()
	_gameBak.ALL = field.NewAsterisk(tableName)
	_gameBak.ID = field.NewUint32(tableName, "id")
	_gameBak.Gameid = field.NewUint32(tableName, "gameid")
	_gameBak.Name = field.NewString(tableName, "name")
	_gameBak.Server = field.NewUint32(tableName, "server")
	_gameBak.Port = field.NewString(tableName, "port")
	_gameBak.Version = field.NewString(tableName, "version")
	_gameBak.Type = field.NewUint32(tableName, "type")
	_gameBak.Isstart = field.NewBool(tableName, "isstart")
	_gameBak.Slotinfo = field.NewString(tableName, "slotinfo")
	_gameBak.Choushuilv = field.NewUint32(tableName, "choushuilv")
	_gameBak.Isshuigame = field.NewBool(tableName, "isshuigame")

	_gameBak.fillFieldMap()

	return _gameBak
}

type gameBak struct {
	gameBakDo

	ALL        field.Asterisk
	ID         field.Uint32
	Gameid     field.Uint32
	Name       field.String
	Server     field.Uint32
	Port       field.String
	Version    field.String
	Type       field.Uint32 // 游戏类别
	Isstart    field.Bool   // 1开启  0关闭
	Slotinfo   field.String
	Choushuilv field.Uint32 // 1-10
	Isshuigame field.Bool   // 是否含水位的游戏 1是  0不是

	fieldMap map[string]field.Expr
}

func (g gameBak) Table(newTableName string) *gameBak {
	g.gameBakDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameBak) As(alias string) *gameBak {
	g.gameBakDo.DO = *(g.gameBakDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameBak) updateTableName(table string) *gameBak {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint32(table, "id")
	g.Gameid = field.NewUint32(table, "gameid")
	g.Name = field.NewString(table, "name")
	g.Server = field.NewUint32(table, "server")
	g.Port = field.NewString(table, "port")
	g.Version = field.NewString(table, "version")
	g.Type = field.NewUint32(table, "type")
	g.Isstart = field.NewBool(table, "isstart")
	g.Slotinfo = field.NewString(table, "slotinfo")
	g.Choushuilv = field.NewUint32(table, "choushuilv")
	g.Isshuigame = field.NewBool(table, "isshuigame")

	g.fillFieldMap()

	return g
}

func (g *gameBak) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameBak) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 11)
	g.fieldMap["id"] = g.ID
	g.fieldMap["gameid"] = g.Gameid
	g.fieldMap["name"] = g.Name
	g.fieldMap["server"] = g.Server
	g.fieldMap["port"] = g.Port
	g.fieldMap["version"] = g.Version
	g.fieldMap["type"] = g.Type
	g.fieldMap["isstart"] = g.Isstart
	g.fieldMap["slotinfo"] = g.Slotinfo
	g.fieldMap["choushuilv"] = g.Choushuilv
	g.fieldMap["isshuigame"] = g.Isshuigame
}

func (g gameBak) clone(db *gorm.DB) gameBak {
	g.gameBakDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameBak) replaceDB(db *gorm.DB) gameBak {
	g.gameBakDo.ReplaceDB(db)
	return g
}

type gameBakDo struct{ gen.DO }

type IGameBakDo interface {
	gen.SubQuery
	Debug() IGameBakDo
	WithContext(ctx context.Context) IGameBakDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGameBakDo
	WriteDB() IGameBakDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGameBakDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGameBakDo
	Not(conds ...gen.Condition) IGameBakDo
	Or(conds ...gen.Condition) IGameBakDo
	Select(conds ...field.Expr) IGameBakDo
	Where(conds ...gen.Condition) IGameBakDo
	Order(conds ...field.Expr) IGameBakDo
	Distinct(cols ...field.Expr) IGameBakDo
	Omit(cols ...field.Expr) IGameBakDo
	Join(table schema.Tabler, on ...field.Expr) IGameBakDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGameBakDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGameBakDo
	Group(cols ...field.Expr) IGameBakDo
	Having(conds ...gen.Condition) IGameBakDo
	Limit(limit int) IGameBakDo
	Offset(offset int) IGameBakDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGameBakDo
	Unscoped() IGameBakDo
	Create(values ...*model.GameBak) error
	CreateInBatches(values []*model.GameBak, batchSize int) error
	Save(values ...*model.GameBak) error
	First() (*model.GameBak, error)
	Take() (*model.GameBak, error)
	Last() (*model.GameBak, error)
	Find() ([]*model.GameBak, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameBak, err error)
	FindInBatches(result *[]*model.GameBak, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GameBak) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGameBakDo
	Assign(attrs ...field.AssignExpr) IGameBakDo
	Joins(fields ...field.RelationField) IGameBakDo
	Preload(fields ...field.RelationField) IGameBakDo
	FirstOrInit() (*model.GameBak, error)
	FirstOrCreate() (*model.GameBak, error)
	FindByPage(offset int, limit int) (result []*model.GameBak, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGameBakDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gameBakDo) Debug() IGameBakDo {
	return g.withDO(g.DO.Debug())
}

func (g gameBakDo) WithContext(ctx context.Context) IGameBakDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameBakDo) ReadDB() IGameBakDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameBakDo) WriteDB() IGameBakDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameBakDo) Session(config *gorm.Session) IGameBakDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameBakDo) Clauses(conds ...clause.Expression) IGameBakDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameBakDo) Returning(value interface{}, columns ...string) IGameBakDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameBakDo) Not(conds ...gen.Condition) IGameBakDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameBakDo) Or(conds ...gen.Condition) IGameBakDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameBakDo) Select(conds ...field.Expr) IGameBakDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameBakDo) Where(conds ...gen.Condition) IGameBakDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameBakDo) Order(conds ...field.Expr) IGameBakDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameBakDo) Distinct(cols ...field.Expr) IGameBakDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameBakDo) Omit(cols ...field.Expr) IGameBakDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameBakDo) Join(table schema.Tabler, on ...field.Expr) IGameBakDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameBakDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGameBakDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameBakDo) RightJoin(table schema.Tabler, on ...field.Expr) IGameBakDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameBakDo) Group(cols ...field.Expr) IGameBakDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameBakDo) Having(conds ...gen.Condition) IGameBakDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameBakDo) Limit(limit int) IGameBakDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameBakDo) Offset(offset int) IGameBakDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameBakDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGameBakDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameBakDo) Unscoped() IGameBakDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameBakDo) Create(values ...*model.GameBak) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameBakDo) CreateInBatches(values []*model.GameBak, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameBakDo) Save(values ...*model.GameBak) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameBakDo) First() (*model.GameBak, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameBak), nil
	}
}

func (g gameBakDo) Take() (*model.GameBak, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameBak), nil
	}
}

func (g gameBakDo) Last() (*model.GameBak, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameBak), nil
	}
}

func (g gameBakDo) Find() ([]*model.GameBak, error) {
	result, err := g.DO.Find()
	return result.([]*model.GameBak), err
}

func (g gameBakDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameBak, err error) {
	buf := make([]*model.GameBak, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameBakDo) FindInBatches(result *[]*model.GameBak, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameBakDo) Attrs(attrs ...field.AssignExpr) IGameBakDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameBakDo) Assign(attrs ...field.AssignExpr) IGameBakDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameBakDo) Joins(fields ...field.RelationField) IGameBakDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameBakDo) Preload(fields ...field.RelationField) IGameBakDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameBakDo) FirstOrInit() (*model.GameBak, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameBak), nil
	}
}

func (g gameBakDo) FirstOrCreate() (*model.GameBak, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameBak), nil
	}
}

func (g gameBakDo) FindByPage(offset int, limit int) (result []*model.GameBak, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameBakDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameBakDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameBakDo) Delete(models ...*model.GameBak) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameBakDo) withDO(do gen.Dao) *gameBakDo {
	g.DO = *do.(*gen.DO)
	return g
}
