// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newKefuList(db *gorm.DB, opts ...gen.DOOption) kefuList {
	_kefuList := kefuList{}

	_kefuList.kefuListDo.UseDB(db, opts...)
	_kefuList.kefuListDo.UseModel(&model.KefuList{})

	tableName := _kefuList.kefuListDo.TableName()
	_kefuList.ALL = field.NewAsterisk(tableName)
	_kefuList.ID = field.NewUint32(tableName, "id")
	_kefuList.Name = field.NewString(tableName, "name")
	_kefuList.Account = field.NewString(tableName, "account")
	_kefuList.Password = field.NewString(tableName, "password")
	_kefuList.Isclose = field.NewBool(tableName, "isclose")
	_kefuList.Score = field.NewUint64(tableName, "score")

	_kefuList.fillFieldMap()

	return _kefuList
}

type kefuList struct {
	kefuListDo

	ALL      field.Asterisk
	ID       field.Uint32
	Name     field.String
	Account  field.String
	Password field.String
	Isclose  field.Bool
	Score    field.Uint64

	fieldMap map[string]field.Expr
}

func (k kefuList) Table(newTableName string) *kefuList {
	k.kefuListDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k kefuList) As(alias string) *kefuList {
	k.kefuListDo.DO = *(k.kefuListDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *kefuList) updateTableName(table string) *kefuList {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewUint32(table, "id")
	k.Name = field.NewString(table, "name")
	k.Account = field.NewString(table, "account")
	k.Password = field.NewString(table, "password")
	k.Isclose = field.NewBool(table, "isclose")
	k.Score = field.NewUint64(table, "score")

	k.fillFieldMap()

	return k
}

func (k *kefuList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *kefuList) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 6)
	k.fieldMap["id"] = k.ID
	k.fieldMap["name"] = k.Name
	k.fieldMap["account"] = k.Account
	k.fieldMap["password"] = k.Password
	k.fieldMap["isclose"] = k.Isclose
	k.fieldMap["score"] = k.Score
}

func (k kefuList) clone(db *gorm.DB) kefuList {
	k.kefuListDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k kefuList) replaceDB(db *gorm.DB) kefuList {
	k.kefuListDo.ReplaceDB(db)
	return k
}

type kefuListDo struct{ gen.DO }

type IKefuListDo interface {
	gen.SubQuery
	Debug() IKefuListDo
	WithContext(ctx context.Context) IKefuListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IKefuListDo
	WriteDB() IKefuListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IKefuListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IKefuListDo
	Not(conds ...gen.Condition) IKefuListDo
	Or(conds ...gen.Condition) IKefuListDo
	Select(conds ...field.Expr) IKefuListDo
	Where(conds ...gen.Condition) IKefuListDo
	Order(conds ...field.Expr) IKefuListDo
	Distinct(cols ...field.Expr) IKefuListDo
	Omit(cols ...field.Expr) IKefuListDo
	Join(table schema.Tabler, on ...field.Expr) IKefuListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IKefuListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IKefuListDo
	Group(cols ...field.Expr) IKefuListDo
	Having(conds ...gen.Condition) IKefuListDo
	Limit(limit int) IKefuListDo
	Offset(offset int) IKefuListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IKefuListDo
	Unscoped() IKefuListDo
	Create(values ...*model.KefuList) error
	CreateInBatches(values []*model.KefuList, batchSize int) error
	Save(values ...*model.KefuList) error
	First() (*model.KefuList, error)
	Take() (*model.KefuList, error)
	Last() (*model.KefuList, error)
	Find() ([]*model.KefuList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KefuList, err error)
	FindInBatches(result *[]*model.KefuList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.KefuList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IKefuListDo
	Assign(attrs ...field.AssignExpr) IKefuListDo
	Joins(fields ...field.RelationField) IKefuListDo
	Preload(fields ...field.RelationField) IKefuListDo
	FirstOrInit() (*model.KefuList, error)
	FirstOrCreate() (*model.KefuList, error)
	FindByPage(offset int, limit int) (result []*model.KefuList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IKefuListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (k kefuListDo) Debug() IKefuListDo {
	return k.withDO(k.DO.Debug())
}

func (k kefuListDo) WithContext(ctx context.Context) IKefuListDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k kefuListDo) ReadDB() IKefuListDo {
	return k.Clauses(dbresolver.Read)
}

func (k kefuListDo) WriteDB() IKefuListDo {
	return k.Clauses(dbresolver.Write)
}

func (k kefuListDo) Session(config *gorm.Session) IKefuListDo {
	return k.withDO(k.DO.Session(config))
}

func (k kefuListDo) Clauses(conds ...clause.Expression) IKefuListDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k kefuListDo) Returning(value interface{}, columns ...string) IKefuListDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k kefuListDo) Not(conds ...gen.Condition) IKefuListDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k kefuListDo) Or(conds ...gen.Condition) IKefuListDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k kefuListDo) Select(conds ...field.Expr) IKefuListDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k kefuListDo) Where(conds ...gen.Condition) IKefuListDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k kefuListDo) Order(conds ...field.Expr) IKefuListDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k kefuListDo) Distinct(cols ...field.Expr) IKefuListDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k kefuListDo) Omit(cols ...field.Expr) IKefuListDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k kefuListDo) Join(table schema.Tabler, on ...field.Expr) IKefuListDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k kefuListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IKefuListDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k kefuListDo) RightJoin(table schema.Tabler, on ...field.Expr) IKefuListDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k kefuListDo) Group(cols ...field.Expr) IKefuListDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k kefuListDo) Having(conds ...gen.Condition) IKefuListDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k kefuListDo) Limit(limit int) IKefuListDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k kefuListDo) Offset(offset int) IKefuListDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k kefuListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IKefuListDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k kefuListDo) Unscoped() IKefuListDo {
	return k.withDO(k.DO.Unscoped())
}

func (k kefuListDo) Create(values ...*model.KefuList) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k kefuListDo) CreateInBatches(values []*model.KefuList, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k kefuListDo) Save(values ...*model.KefuList) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k kefuListDo) First() (*model.KefuList, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuList), nil
	}
}

func (k kefuListDo) Take() (*model.KefuList, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuList), nil
	}
}

func (k kefuListDo) Last() (*model.KefuList, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuList), nil
	}
}

func (k kefuListDo) Find() ([]*model.KefuList, error) {
	result, err := k.DO.Find()
	return result.([]*model.KefuList), err
}

func (k kefuListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KefuList, err error) {
	buf := make([]*model.KefuList, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k kefuListDo) FindInBatches(result *[]*model.KefuList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k kefuListDo) Attrs(attrs ...field.AssignExpr) IKefuListDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k kefuListDo) Assign(attrs ...field.AssignExpr) IKefuListDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k kefuListDo) Joins(fields ...field.RelationField) IKefuListDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k kefuListDo) Preload(fields ...field.RelationField) IKefuListDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k kefuListDo) FirstOrInit() (*model.KefuList, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuList), nil
	}
}

func (k kefuListDo) FirstOrCreate() (*model.KefuList, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.KefuList), nil
	}
}

func (k kefuListDo) FindByPage(offset int, limit int) (result []*model.KefuList, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k kefuListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k kefuListDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k kefuListDo) Delete(models ...*model.KefuList) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *kefuListDo) withDO(do gen.Dao) *kefuListDo {
	k.DO = *do.(*gen.DO)
	return k
}
