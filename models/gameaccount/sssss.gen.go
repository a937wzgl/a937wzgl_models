// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newSssss(db *gorm.DB, opts ...gen.DOOption) sssss {
	_sssss := sssss{}

	_sssss.sssssDo.UseDB(db, opts...)
	_sssss.sssssDo.UseModel(&model.Sssss{})

	tableName := _sssss.sssssDo.TableName()
	_sssss.ALL = field.NewAsterisk(tableName)
	_sssss.UID = field.NewInt32(tableName, "Uid")
	_sssss.NickName = field.NewString(tableName, "NickName")

	_sssss.fillFieldMap()

	return _sssss
}

type sssss struct {
	sssssDo

	ALL      field.Asterisk
	UID      field.Int32
	NickName field.String

	fieldMap map[string]field.Expr
}

func (s sssss) Table(newTableName string) *sssss {
	s.sssssDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sssss) As(alias string) *sssss {
	s.sssssDo.DO = *(s.sssssDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sssss) updateTableName(table string) *sssss {
	s.ALL = field.NewAsterisk(table)
	s.UID = field.NewInt32(table, "Uid")
	s.NickName = field.NewString(table, "NickName")

	s.fillFieldMap()

	return s
}

func (s *sssss) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sssss) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["Uid"] = s.UID
	s.fieldMap["NickName"] = s.NickName
}

func (s sssss) clone(db *gorm.DB) sssss {
	s.sssssDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sssss) replaceDB(db *gorm.DB) sssss {
	s.sssssDo.ReplaceDB(db)
	return s
}

type sssssDo struct{ gen.DO }

type ISssssDo interface {
	gen.SubQuery
	Debug() ISssssDo
	WithContext(ctx context.Context) ISssssDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISssssDo
	WriteDB() ISssssDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISssssDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISssssDo
	Not(conds ...gen.Condition) ISssssDo
	Or(conds ...gen.Condition) ISssssDo
	Select(conds ...field.Expr) ISssssDo
	Where(conds ...gen.Condition) ISssssDo
	Order(conds ...field.Expr) ISssssDo
	Distinct(cols ...field.Expr) ISssssDo
	Omit(cols ...field.Expr) ISssssDo
	Join(table schema.Tabler, on ...field.Expr) ISssssDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISssssDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISssssDo
	Group(cols ...field.Expr) ISssssDo
	Having(conds ...gen.Condition) ISssssDo
	Limit(limit int) ISssssDo
	Offset(offset int) ISssssDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISssssDo
	Unscoped() ISssssDo
	Create(values ...*model.Sssss) error
	CreateInBatches(values []*model.Sssss, batchSize int) error
	Save(values ...*model.Sssss) error
	First() (*model.Sssss, error)
	Take() (*model.Sssss, error)
	Last() (*model.Sssss, error)
	Find() ([]*model.Sssss, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sssss, err error)
	FindInBatches(result *[]*model.Sssss, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sssss) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISssssDo
	Assign(attrs ...field.AssignExpr) ISssssDo
	Joins(fields ...field.RelationField) ISssssDo
	Preload(fields ...field.RelationField) ISssssDo
	FirstOrInit() (*model.Sssss, error)
	FirstOrCreate() (*model.Sssss, error)
	FindByPage(offset int, limit int) (result []*model.Sssss, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISssssDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sssssDo) Debug() ISssssDo {
	return s.withDO(s.DO.Debug())
}

func (s sssssDo) WithContext(ctx context.Context) ISssssDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sssssDo) ReadDB() ISssssDo {
	return s.Clauses(dbresolver.Read)
}

func (s sssssDo) WriteDB() ISssssDo {
	return s.Clauses(dbresolver.Write)
}

func (s sssssDo) Session(config *gorm.Session) ISssssDo {
	return s.withDO(s.DO.Session(config))
}

func (s sssssDo) Clauses(conds ...clause.Expression) ISssssDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sssssDo) Returning(value interface{}, columns ...string) ISssssDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sssssDo) Not(conds ...gen.Condition) ISssssDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sssssDo) Or(conds ...gen.Condition) ISssssDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sssssDo) Select(conds ...field.Expr) ISssssDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sssssDo) Where(conds ...gen.Condition) ISssssDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sssssDo) Order(conds ...field.Expr) ISssssDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sssssDo) Distinct(cols ...field.Expr) ISssssDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sssssDo) Omit(cols ...field.Expr) ISssssDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sssssDo) Join(table schema.Tabler, on ...field.Expr) ISssssDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sssssDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISssssDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sssssDo) RightJoin(table schema.Tabler, on ...field.Expr) ISssssDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sssssDo) Group(cols ...field.Expr) ISssssDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sssssDo) Having(conds ...gen.Condition) ISssssDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sssssDo) Limit(limit int) ISssssDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sssssDo) Offset(offset int) ISssssDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sssssDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISssssDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sssssDo) Unscoped() ISssssDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sssssDo) Create(values ...*model.Sssss) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sssssDo) CreateInBatches(values []*model.Sssss, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sssssDo) Save(values ...*model.Sssss) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sssssDo) First() (*model.Sssss, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sssss), nil
	}
}

func (s sssssDo) Take() (*model.Sssss, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sssss), nil
	}
}

func (s sssssDo) Last() (*model.Sssss, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sssss), nil
	}
}

func (s sssssDo) Find() ([]*model.Sssss, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sssss), err
}

func (s sssssDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sssss, err error) {
	buf := make([]*model.Sssss, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sssssDo) FindInBatches(result *[]*model.Sssss, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sssssDo) Attrs(attrs ...field.AssignExpr) ISssssDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sssssDo) Assign(attrs ...field.AssignExpr) ISssssDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sssssDo) Joins(fields ...field.RelationField) ISssssDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sssssDo) Preload(fields ...field.RelationField) ISssssDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sssssDo) FirstOrInit() (*model.Sssss, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sssss), nil
	}
}

func (s sssssDo) FirstOrCreate() (*model.Sssss, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sssss), nil
	}
}

func (s sssssDo) FindByPage(offset int, limit int) (result []*model.Sssss, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sssssDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sssssDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sssssDo) Delete(models ...*model.Sssss) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sssssDo) withDO(do gen.Dao) *sssssDo {
	s.DO = *do.(*gen.DO)
	return s
}
