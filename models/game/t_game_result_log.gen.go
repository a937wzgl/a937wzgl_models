// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package game

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newTGameResultLog(db *gorm.DB, opts ...gen.DOOption) tGameResultLog {
	_tGameResultLog := tGameResultLog{}

	_tGameResultLog.tGameResultLogDo.UseDB(db, opts...)
	_tGameResultLog.tGameResultLogDo.UseModel(&model.TGameResultLog{})

	tableName := _tGameResultLog.tGameResultLogDo.TableName()
	_tGameResultLog.ALL = field.NewAsterisk(tableName)
	_tGameResultLog.ID = field.NewUint32(tableName, "id")
	_tGameResultLog.Roomid = field.NewInt32(tableName, "roomid")
	_tGameResultLog.Tax = field.NewInt32(tableName, "tax")
	_tGameResultLog.Data = field.NewString(tableName, "data")
	_tGameResultLog.Time = field.NewInt32(tableName, "time")

	_tGameResultLog.fillFieldMap()

	return _tGameResultLog
}

type tGameResultLog struct {
	tGameResultLogDo

	ALL    field.Asterisk
	ID     field.Uint32
	Roomid field.Int32  // 房间ID
	Tax    field.Int32  // 税率
	Data   field.String // 房间数据列表
	Time   field.Int32  // 创建时间

	fieldMap map[string]field.Expr
}

func (t tGameResultLog) Table(newTableName string) *tGameResultLog {
	t.tGameResultLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tGameResultLog) As(alias string) *tGameResultLog {
	t.tGameResultLogDo.DO = *(t.tGameResultLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tGameResultLog) updateTableName(table string) *tGameResultLog {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint32(table, "id")
	t.Roomid = field.NewInt32(table, "roomid")
	t.Tax = field.NewInt32(table, "tax")
	t.Data = field.NewString(table, "data")
	t.Time = field.NewInt32(table, "time")

	t.fillFieldMap()

	return t
}

func (t *tGameResultLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tGameResultLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["id"] = t.ID
	t.fieldMap["roomid"] = t.Roomid
	t.fieldMap["tax"] = t.Tax
	t.fieldMap["data"] = t.Data
	t.fieldMap["time"] = t.Time
}

func (t tGameResultLog) clone(db *gorm.DB) tGameResultLog {
	t.tGameResultLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tGameResultLog) replaceDB(db *gorm.DB) tGameResultLog {
	t.tGameResultLogDo.ReplaceDB(db)
	return t
}

type tGameResultLogDo struct{ gen.DO }

type ITGameResultLogDo interface {
	gen.SubQuery
	Debug() ITGameResultLogDo
	WithContext(ctx context.Context) ITGameResultLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITGameResultLogDo
	WriteDB() ITGameResultLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITGameResultLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITGameResultLogDo
	Not(conds ...gen.Condition) ITGameResultLogDo
	Or(conds ...gen.Condition) ITGameResultLogDo
	Select(conds ...field.Expr) ITGameResultLogDo
	Where(conds ...gen.Condition) ITGameResultLogDo
	Order(conds ...field.Expr) ITGameResultLogDo
	Distinct(cols ...field.Expr) ITGameResultLogDo
	Omit(cols ...field.Expr) ITGameResultLogDo
	Join(table schema.Tabler, on ...field.Expr) ITGameResultLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITGameResultLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITGameResultLogDo
	Group(cols ...field.Expr) ITGameResultLogDo
	Having(conds ...gen.Condition) ITGameResultLogDo
	Limit(limit int) ITGameResultLogDo
	Offset(offset int) ITGameResultLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITGameResultLogDo
	Unscoped() ITGameResultLogDo
	Create(values ...*model.TGameResultLog) error
	CreateInBatches(values []*model.TGameResultLog, batchSize int) error
	Save(values ...*model.TGameResultLog) error
	First() (*model.TGameResultLog, error)
	Take() (*model.TGameResultLog, error)
	Last() (*model.TGameResultLog, error)
	Find() ([]*model.TGameResultLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TGameResultLog, err error)
	FindInBatches(result *[]*model.TGameResultLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TGameResultLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITGameResultLogDo
	Assign(attrs ...field.AssignExpr) ITGameResultLogDo
	Joins(fields ...field.RelationField) ITGameResultLogDo
	Preload(fields ...field.RelationField) ITGameResultLogDo
	FirstOrInit() (*model.TGameResultLog, error)
	FirstOrCreate() (*model.TGameResultLog, error)
	FindByPage(offset int, limit int) (result []*model.TGameResultLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITGameResultLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tGameResultLogDo) Debug() ITGameResultLogDo {
	return t.withDO(t.DO.Debug())
}

func (t tGameResultLogDo) WithContext(ctx context.Context) ITGameResultLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tGameResultLogDo) ReadDB() ITGameResultLogDo {
	return t.Clauses(dbresolver.Read)
}

func (t tGameResultLogDo) WriteDB() ITGameResultLogDo {
	return t.Clauses(dbresolver.Write)
}

func (t tGameResultLogDo) Session(config *gorm.Session) ITGameResultLogDo {
	return t.withDO(t.DO.Session(config))
}

func (t tGameResultLogDo) Clauses(conds ...clause.Expression) ITGameResultLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tGameResultLogDo) Returning(value interface{}, columns ...string) ITGameResultLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tGameResultLogDo) Not(conds ...gen.Condition) ITGameResultLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tGameResultLogDo) Or(conds ...gen.Condition) ITGameResultLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tGameResultLogDo) Select(conds ...field.Expr) ITGameResultLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tGameResultLogDo) Where(conds ...gen.Condition) ITGameResultLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tGameResultLogDo) Order(conds ...field.Expr) ITGameResultLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tGameResultLogDo) Distinct(cols ...field.Expr) ITGameResultLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tGameResultLogDo) Omit(cols ...field.Expr) ITGameResultLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tGameResultLogDo) Join(table schema.Tabler, on ...field.Expr) ITGameResultLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tGameResultLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITGameResultLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tGameResultLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ITGameResultLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tGameResultLogDo) Group(cols ...field.Expr) ITGameResultLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tGameResultLogDo) Having(conds ...gen.Condition) ITGameResultLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tGameResultLogDo) Limit(limit int) ITGameResultLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tGameResultLogDo) Offset(offset int) ITGameResultLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tGameResultLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITGameResultLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tGameResultLogDo) Unscoped() ITGameResultLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tGameResultLogDo) Create(values ...*model.TGameResultLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tGameResultLogDo) CreateInBatches(values []*model.TGameResultLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tGameResultLogDo) Save(values ...*model.TGameResultLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tGameResultLogDo) First() (*model.TGameResultLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGameResultLog), nil
	}
}

func (t tGameResultLogDo) Take() (*model.TGameResultLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGameResultLog), nil
	}
}

func (t tGameResultLogDo) Last() (*model.TGameResultLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGameResultLog), nil
	}
}

func (t tGameResultLogDo) Find() ([]*model.TGameResultLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TGameResultLog), err
}

func (t tGameResultLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TGameResultLog, err error) {
	buf := make([]*model.TGameResultLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tGameResultLogDo) FindInBatches(result *[]*model.TGameResultLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tGameResultLogDo) Attrs(attrs ...field.AssignExpr) ITGameResultLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tGameResultLogDo) Assign(attrs ...field.AssignExpr) ITGameResultLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tGameResultLogDo) Joins(fields ...field.RelationField) ITGameResultLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tGameResultLogDo) Preload(fields ...field.RelationField) ITGameResultLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tGameResultLogDo) FirstOrInit() (*model.TGameResultLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGameResultLog), nil
	}
}

func (t tGameResultLogDo) FirstOrCreate() (*model.TGameResultLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGameResultLog), nil
	}
}

func (t tGameResultLogDo) FindByPage(offset int, limit int) (result []*model.TGameResultLog, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tGameResultLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tGameResultLogDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tGameResultLogDo) Delete(models ...*model.TGameResultLog) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tGameResultLogDo) withDO(do gen.Dao) *tGameResultLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
