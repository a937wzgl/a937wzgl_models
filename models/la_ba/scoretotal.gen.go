// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package la_ba

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newScoretotal(db *gorm.DB, opts ...gen.DOOption) scoretotal {
	_scoretotal := scoretotal{}

	_scoretotal.scoretotalDo.UseDB(db, opts...)
	_scoretotal.scoretotalDo.UseModel(&model.Scoretotal{})

	tableName := _scoretotal.scoretotalDo.TableName()
	_scoretotal.ALL = field.NewAsterisk(tableName)
	_scoretotal.ServeID = field.NewInt32(tableName, "serve_id")
	_scoretotal.WinScoreTotal = field.NewFloat32(tableName, "winScoreTotal")
	_scoretotal.LotteryTotal = field.NewInt32(tableName, "lotteryTotal")
	_scoretotal.UpdateTime = field.NewTime(tableName, "updateTime")

	_scoretotal.fillFieldMap()

	return _scoretotal
}

type scoretotal struct {
	scoretotalDo

	ALL           field.Asterisk
	ServeID       field.Int32
	WinScoreTotal field.Float32
	LotteryTotal  field.Int32
	UpdateTime    field.Time // 创建时间

	fieldMap map[string]field.Expr
}

func (s scoretotal) Table(newTableName string) *scoretotal {
	s.scoretotalDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scoretotal) As(alias string) *scoretotal {
	s.scoretotalDo.DO = *(s.scoretotalDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scoretotal) updateTableName(table string) *scoretotal {
	s.ALL = field.NewAsterisk(table)
	s.ServeID = field.NewInt32(table, "serve_id")
	s.WinScoreTotal = field.NewFloat32(table, "winScoreTotal")
	s.LotteryTotal = field.NewInt32(table, "lotteryTotal")
	s.UpdateTime = field.NewTime(table, "updateTime")

	s.fillFieldMap()

	return s
}

func (s *scoretotal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scoretotal) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["serve_id"] = s.ServeID
	s.fieldMap["winScoreTotal"] = s.WinScoreTotal
	s.fieldMap["lotteryTotal"] = s.LotteryTotal
	s.fieldMap["updateTime"] = s.UpdateTime
}

func (s scoretotal) clone(db *gorm.DB) scoretotal {
	s.scoretotalDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scoretotal) replaceDB(db *gorm.DB) scoretotal {
	s.scoretotalDo.ReplaceDB(db)
	return s
}

type scoretotalDo struct{ gen.DO }

type IScoretotalDo interface {
	gen.SubQuery
	Debug() IScoretotalDo
	WithContext(ctx context.Context) IScoretotalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScoretotalDo
	WriteDB() IScoretotalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScoretotalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScoretotalDo
	Not(conds ...gen.Condition) IScoretotalDo
	Or(conds ...gen.Condition) IScoretotalDo
	Select(conds ...field.Expr) IScoretotalDo
	Where(conds ...gen.Condition) IScoretotalDo
	Order(conds ...field.Expr) IScoretotalDo
	Distinct(cols ...field.Expr) IScoretotalDo
	Omit(cols ...field.Expr) IScoretotalDo
	Join(table schema.Tabler, on ...field.Expr) IScoretotalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScoretotalDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScoretotalDo
	Group(cols ...field.Expr) IScoretotalDo
	Having(conds ...gen.Condition) IScoretotalDo
	Limit(limit int) IScoretotalDo
	Offset(offset int) IScoretotalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScoretotalDo
	Unscoped() IScoretotalDo
	Create(values ...*model.Scoretotal) error
	CreateInBatches(values []*model.Scoretotal, batchSize int) error
	Save(values ...*model.Scoretotal) error
	First() (*model.Scoretotal, error)
	Take() (*model.Scoretotal, error)
	Last() (*model.Scoretotal, error)
	Find() ([]*model.Scoretotal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Scoretotal, err error)
	FindInBatches(result *[]*model.Scoretotal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Scoretotal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScoretotalDo
	Assign(attrs ...field.AssignExpr) IScoretotalDo
	Joins(fields ...field.RelationField) IScoretotalDo
	Preload(fields ...field.RelationField) IScoretotalDo
	FirstOrInit() (*model.Scoretotal, error)
	FirstOrCreate() (*model.Scoretotal, error)
	FindByPage(offset int, limit int) (result []*model.Scoretotal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScoretotalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scoretotalDo) Debug() IScoretotalDo {
	return s.withDO(s.DO.Debug())
}

func (s scoretotalDo) WithContext(ctx context.Context) IScoretotalDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scoretotalDo) ReadDB() IScoretotalDo {
	return s.Clauses(dbresolver.Read)
}

func (s scoretotalDo) WriteDB() IScoretotalDo {
	return s.Clauses(dbresolver.Write)
}

func (s scoretotalDo) Session(config *gorm.Session) IScoretotalDo {
	return s.withDO(s.DO.Session(config))
}

func (s scoretotalDo) Clauses(conds ...clause.Expression) IScoretotalDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scoretotalDo) Returning(value interface{}, columns ...string) IScoretotalDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scoretotalDo) Not(conds ...gen.Condition) IScoretotalDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scoretotalDo) Or(conds ...gen.Condition) IScoretotalDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scoretotalDo) Select(conds ...field.Expr) IScoretotalDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scoretotalDo) Where(conds ...gen.Condition) IScoretotalDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scoretotalDo) Order(conds ...field.Expr) IScoretotalDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scoretotalDo) Distinct(cols ...field.Expr) IScoretotalDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scoretotalDo) Omit(cols ...field.Expr) IScoretotalDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scoretotalDo) Join(table schema.Tabler, on ...field.Expr) IScoretotalDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scoretotalDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScoretotalDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scoretotalDo) RightJoin(table schema.Tabler, on ...field.Expr) IScoretotalDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scoretotalDo) Group(cols ...field.Expr) IScoretotalDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scoretotalDo) Having(conds ...gen.Condition) IScoretotalDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scoretotalDo) Limit(limit int) IScoretotalDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scoretotalDo) Offset(offset int) IScoretotalDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scoretotalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScoretotalDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scoretotalDo) Unscoped() IScoretotalDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scoretotalDo) Create(values ...*model.Scoretotal) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scoretotalDo) CreateInBatches(values []*model.Scoretotal, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scoretotalDo) Save(values ...*model.Scoretotal) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scoretotalDo) First() (*model.Scoretotal, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scoretotal), nil
	}
}

func (s scoretotalDo) Take() (*model.Scoretotal, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scoretotal), nil
	}
}

func (s scoretotalDo) Last() (*model.Scoretotal, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scoretotal), nil
	}
}

func (s scoretotalDo) Find() ([]*model.Scoretotal, error) {
	result, err := s.DO.Find()
	return result.([]*model.Scoretotal), err
}

func (s scoretotalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Scoretotal, err error) {
	buf := make([]*model.Scoretotal, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scoretotalDo) FindInBatches(result *[]*model.Scoretotal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scoretotalDo) Attrs(attrs ...field.AssignExpr) IScoretotalDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scoretotalDo) Assign(attrs ...field.AssignExpr) IScoretotalDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scoretotalDo) Joins(fields ...field.RelationField) IScoretotalDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scoretotalDo) Preload(fields ...field.RelationField) IScoretotalDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scoretotalDo) FirstOrInit() (*model.Scoretotal, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scoretotal), nil
	}
}

func (s scoretotalDo) FirstOrCreate() (*model.Scoretotal, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scoretotal), nil
	}
}

func (s scoretotalDo) FindByPage(offset int, limit int) (result []*model.Scoretotal, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scoretotalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scoretotalDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scoretotalDo) Delete(models ...*model.Scoretotal) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scoretotalDo) withDO(do gen.Dao) *scoretotalDo {
	s.DO = *do.(*gen.DO)
	return s
}
