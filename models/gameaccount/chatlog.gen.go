// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newChatlog(db *gorm.DB, opts ...gen.DOOption) chatlog {
	_chatlog := chatlog{}

	_chatlog.chatlogDo.UseDB(db, opts...)
	_chatlog.chatlogDo.UseModel(&model.Chatlog{})

	tableName := _chatlog.chatlogDo.TableName()
	_chatlog.ALL = field.NewAsterisk(tableName)
	_chatlog.ID = field.NewInt32(tableName, "id")
	_chatlog.UserID = field.NewInt32(tableName, "userId")
	_chatlog.ToUserID = field.NewInt32(tableName, "toUserId")
	_chatlog.Nickname = field.NewString(tableName, "nickname")
	_chatlog.Msg = field.NewString(tableName, "msg")
	_chatlog.IsSendEnd = field.NewBool(tableName, "isSendEnd")
	_chatlog.AddDate = field.NewTime(tableName, "addDate")

	_chatlog.fillFieldMap()

	return _chatlog
}

type chatlog struct {
	chatlogDo

	ALL       field.Asterisk
	ID        field.Int32
	UserID    field.Int32
	ToUserID  field.Int32
	Nickname  field.String
	Msg       field.String
	IsSendEnd field.Bool
	AddDate   field.Time

	fieldMap map[string]field.Expr
}

func (c chatlog) Table(newTableName string) *chatlog {
	c.chatlogDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chatlog) As(alias string) *chatlog {
	c.chatlogDo.DO = *(c.chatlogDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chatlog) updateTableName(table string) *chatlog {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.UserID = field.NewInt32(table, "userId")
	c.ToUserID = field.NewInt32(table, "toUserId")
	c.Nickname = field.NewString(table, "nickname")
	c.Msg = field.NewString(table, "msg")
	c.IsSendEnd = field.NewBool(table, "isSendEnd")
	c.AddDate = field.NewTime(table, "addDate")

	c.fillFieldMap()

	return c
}

func (c *chatlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chatlog) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["userId"] = c.UserID
	c.fieldMap["toUserId"] = c.ToUserID
	c.fieldMap["nickname"] = c.Nickname
	c.fieldMap["msg"] = c.Msg
	c.fieldMap["isSendEnd"] = c.IsSendEnd
	c.fieldMap["addDate"] = c.AddDate
}

func (c chatlog) clone(db *gorm.DB) chatlog {
	c.chatlogDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chatlog) replaceDB(db *gorm.DB) chatlog {
	c.chatlogDo.ReplaceDB(db)
	return c
}

type chatlogDo struct{ gen.DO }

type IChatlogDo interface {
	gen.SubQuery
	Debug() IChatlogDo
	WithContext(ctx context.Context) IChatlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChatlogDo
	WriteDB() IChatlogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChatlogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChatlogDo
	Not(conds ...gen.Condition) IChatlogDo
	Or(conds ...gen.Condition) IChatlogDo
	Select(conds ...field.Expr) IChatlogDo
	Where(conds ...gen.Condition) IChatlogDo
	Order(conds ...field.Expr) IChatlogDo
	Distinct(cols ...field.Expr) IChatlogDo
	Omit(cols ...field.Expr) IChatlogDo
	Join(table schema.Tabler, on ...field.Expr) IChatlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChatlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChatlogDo
	Group(cols ...field.Expr) IChatlogDo
	Having(conds ...gen.Condition) IChatlogDo
	Limit(limit int) IChatlogDo
	Offset(offset int) IChatlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChatlogDo
	Unscoped() IChatlogDo
	Create(values ...*model.Chatlog) error
	CreateInBatches(values []*model.Chatlog, batchSize int) error
	Save(values ...*model.Chatlog) error
	First() (*model.Chatlog, error)
	Take() (*model.Chatlog, error)
	Last() (*model.Chatlog, error)
	Find() ([]*model.Chatlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Chatlog, err error)
	FindInBatches(result *[]*model.Chatlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Chatlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChatlogDo
	Assign(attrs ...field.AssignExpr) IChatlogDo
	Joins(fields ...field.RelationField) IChatlogDo
	Preload(fields ...field.RelationField) IChatlogDo
	FirstOrInit() (*model.Chatlog, error)
	FirstOrCreate() (*model.Chatlog, error)
	FindByPage(offset int, limit int) (result []*model.Chatlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChatlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c chatlogDo) Debug() IChatlogDo {
	return c.withDO(c.DO.Debug())
}

func (c chatlogDo) WithContext(ctx context.Context) IChatlogDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatlogDo) ReadDB() IChatlogDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatlogDo) WriteDB() IChatlogDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatlogDo) Session(config *gorm.Session) IChatlogDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatlogDo) Clauses(conds ...clause.Expression) IChatlogDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatlogDo) Returning(value interface{}, columns ...string) IChatlogDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatlogDo) Not(conds ...gen.Condition) IChatlogDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatlogDo) Or(conds ...gen.Condition) IChatlogDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatlogDo) Select(conds ...field.Expr) IChatlogDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatlogDo) Where(conds ...gen.Condition) IChatlogDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatlogDo) Order(conds ...field.Expr) IChatlogDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatlogDo) Distinct(cols ...field.Expr) IChatlogDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatlogDo) Omit(cols ...field.Expr) IChatlogDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatlogDo) Join(table schema.Tabler, on ...field.Expr) IChatlogDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChatlogDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatlogDo) RightJoin(table schema.Tabler, on ...field.Expr) IChatlogDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatlogDo) Group(cols ...field.Expr) IChatlogDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatlogDo) Having(conds ...gen.Condition) IChatlogDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatlogDo) Limit(limit int) IChatlogDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatlogDo) Offset(offset int) IChatlogDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChatlogDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatlogDo) Unscoped() IChatlogDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatlogDo) Create(values ...*model.Chatlog) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatlogDo) CreateInBatches(values []*model.Chatlog, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatlogDo) Save(values ...*model.Chatlog) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatlogDo) First() (*model.Chatlog, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chatlog), nil
	}
}

func (c chatlogDo) Take() (*model.Chatlog, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chatlog), nil
	}
}

func (c chatlogDo) Last() (*model.Chatlog, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chatlog), nil
	}
}

func (c chatlogDo) Find() ([]*model.Chatlog, error) {
	result, err := c.DO.Find()
	return result.([]*model.Chatlog), err
}

func (c chatlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Chatlog, err error) {
	buf := make([]*model.Chatlog, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatlogDo) FindInBatches(result *[]*model.Chatlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatlogDo) Attrs(attrs ...field.AssignExpr) IChatlogDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatlogDo) Assign(attrs ...field.AssignExpr) IChatlogDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatlogDo) Joins(fields ...field.RelationField) IChatlogDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatlogDo) Preload(fields ...field.RelationField) IChatlogDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatlogDo) FirstOrInit() (*model.Chatlog, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chatlog), nil
	}
}

func (c chatlogDo) FirstOrCreate() (*model.Chatlog, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chatlog), nil
	}
}

func (c chatlogDo) FindByPage(offset int, limit int) (result []*model.Chatlog, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatlogDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatlogDo) Delete(models ...*model.Chatlog) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatlogDo) withDO(do gen.Dao) *chatlogDo {
	c.DO = *do.(*gen.DO)
	return c
}
