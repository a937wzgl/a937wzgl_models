// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newRechargeFirst(db *gorm.DB, opts ...gen.DOOption) rechargeFirst {
	_rechargeFirst := rechargeFirst{}

	_rechargeFirst.rechargeFirstDo.UseDB(db, opts...)
	_rechargeFirst.rechargeFirstDo.UseModel(&model.RechargeFirst{})

	tableName := _rechargeFirst.rechargeFirstDo.TableName()
	_rechargeFirst.ALL = field.NewAsterisk(tableName)
	_rechargeFirst.UserID = field.NewInt32(tableName, "userId")
	_rechargeFirst.FIRST = field.NewBool(tableName, "FIRST")
	_rechargeFirst.AnyFirst = field.NewBool(tableName, "anyFirst")
	_rechargeFirst.Goods1 = field.NewBool(tableName, "goods1")
	_rechargeFirst.Goods2 = field.NewBool(tableName, "goods2")
	_rechargeFirst.Goods3 = field.NewBool(tableName, "goods3")
	_rechargeFirst.Goods4 = field.NewBool(tableName, "goods4")
	_rechargeFirst.Goods5 = field.NewBool(tableName, "goods5")
	_rechargeFirst.Daytime = field.NewTime(tableName, "daytime")

	_rechargeFirst.fillFieldMap()

	return _rechargeFirst
}

type rechargeFirst struct {
	rechargeFirstDo

	ALL      field.Asterisk
	UserID   field.Int32
	FIRST    field.Bool
	AnyFirst field.Bool
	Goods1   field.Bool
	Goods2   field.Bool
	Goods3   field.Bool
	Goods4   field.Bool
	Goods5   field.Bool
	Daytime  field.Time // 创建时间

	fieldMap map[string]field.Expr
}

func (r rechargeFirst) Table(newTableName string) *rechargeFirst {
	r.rechargeFirstDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rechargeFirst) As(alias string) *rechargeFirst {
	r.rechargeFirstDo.DO = *(r.rechargeFirstDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rechargeFirst) updateTableName(table string) *rechargeFirst {
	r.ALL = field.NewAsterisk(table)
	r.UserID = field.NewInt32(table, "userId")
	r.FIRST = field.NewBool(table, "FIRST")
	r.AnyFirst = field.NewBool(table, "anyFirst")
	r.Goods1 = field.NewBool(table, "goods1")
	r.Goods2 = field.NewBool(table, "goods2")
	r.Goods3 = field.NewBool(table, "goods3")
	r.Goods4 = field.NewBool(table, "goods4")
	r.Goods5 = field.NewBool(table, "goods5")
	r.Daytime = field.NewTime(table, "daytime")

	r.fillFieldMap()

	return r
}

func (r *rechargeFirst) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rechargeFirst) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["userId"] = r.UserID
	r.fieldMap["FIRST"] = r.FIRST
	r.fieldMap["anyFirst"] = r.AnyFirst
	r.fieldMap["goods1"] = r.Goods1
	r.fieldMap["goods2"] = r.Goods2
	r.fieldMap["goods3"] = r.Goods3
	r.fieldMap["goods4"] = r.Goods4
	r.fieldMap["goods5"] = r.Goods5
	r.fieldMap["daytime"] = r.Daytime
}

func (r rechargeFirst) clone(db *gorm.DB) rechargeFirst {
	r.rechargeFirstDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rechargeFirst) replaceDB(db *gorm.DB) rechargeFirst {
	r.rechargeFirstDo.ReplaceDB(db)
	return r
}

type rechargeFirstDo struct{ gen.DO }

type IRechargeFirstDo interface {
	gen.SubQuery
	Debug() IRechargeFirstDo
	WithContext(ctx context.Context) IRechargeFirstDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRechargeFirstDo
	WriteDB() IRechargeFirstDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRechargeFirstDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRechargeFirstDo
	Not(conds ...gen.Condition) IRechargeFirstDo
	Or(conds ...gen.Condition) IRechargeFirstDo
	Select(conds ...field.Expr) IRechargeFirstDo
	Where(conds ...gen.Condition) IRechargeFirstDo
	Order(conds ...field.Expr) IRechargeFirstDo
	Distinct(cols ...field.Expr) IRechargeFirstDo
	Omit(cols ...field.Expr) IRechargeFirstDo
	Join(table schema.Tabler, on ...field.Expr) IRechargeFirstDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRechargeFirstDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRechargeFirstDo
	Group(cols ...field.Expr) IRechargeFirstDo
	Having(conds ...gen.Condition) IRechargeFirstDo
	Limit(limit int) IRechargeFirstDo
	Offset(offset int) IRechargeFirstDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargeFirstDo
	Unscoped() IRechargeFirstDo
	Create(values ...*model.RechargeFirst) error
	CreateInBatches(values []*model.RechargeFirst, batchSize int) error
	Save(values ...*model.RechargeFirst) error
	First() (*model.RechargeFirst, error)
	Take() (*model.RechargeFirst, error)
	Last() (*model.RechargeFirst, error)
	Find() ([]*model.RechargeFirst, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RechargeFirst, err error)
	FindInBatches(result *[]*model.RechargeFirst, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RechargeFirst) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRechargeFirstDo
	Assign(attrs ...field.AssignExpr) IRechargeFirstDo
	Joins(fields ...field.RelationField) IRechargeFirstDo
	Preload(fields ...field.RelationField) IRechargeFirstDo
	FirstOrInit() (*model.RechargeFirst, error)
	FirstOrCreate() (*model.RechargeFirst, error)
	FindByPage(offset int, limit int) (result []*model.RechargeFirst, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRechargeFirstDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rechargeFirstDo) Debug() IRechargeFirstDo {
	return r.withDO(r.DO.Debug())
}

func (r rechargeFirstDo) WithContext(ctx context.Context) IRechargeFirstDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rechargeFirstDo) ReadDB() IRechargeFirstDo {
	return r.Clauses(dbresolver.Read)
}

func (r rechargeFirstDo) WriteDB() IRechargeFirstDo {
	return r.Clauses(dbresolver.Write)
}

func (r rechargeFirstDo) Session(config *gorm.Session) IRechargeFirstDo {
	return r.withDO(r.DO.Session(config))
}

func (r rechargeFirstDo) Clauses(conds ...clause.Expression) IRechargeFirstDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rechargeFirstDo) Returning(value interface{}, columns ...string) IRechargeFirstDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rechargeFirstDo) Not(conds ...gen.Condition) IRechargeFirstDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rechargeFirstDo) Or(conds ...gen.Condition) IRechargeFirstDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rechargeFirstDo) Select(conds ...field.Expr) IRechargeFirstDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rechargeFirstDo) Where(conds ...gen.Condition) IRechargeFirstDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rechargeFirstDo) Order(conds ...field.Expr) IRechargeFirstDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rechargeFirstDo) Distinct(cols ...field.Expr) IRechargeFirstDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rechargeFirstDo) Omit(cols ...field.Expr) IRechargeFirstDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rechargeFirstDo) Join(table schema.Tabler, on ...field.Expr) IRechargeFirstDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rechargeFirstDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRechargeFirstDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rechargeFirstDo) RightJoin(table schema.Tabler, on ...field.Expr) IRechargeFirstDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rechargeFirstDo) Group(cols ...field.Expr) IRechargeFirstDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rechargeFirstDo) Having(conds ...gen.Condition) IRechargeFirstDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rechargeFirstDo) Limit(limit int) IRechargeFirstDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rechargeFirstDo) Offset(offset int) IRechargeFirstDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rechargeFirstDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargeFirstDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rechargeFirstDo) Unscoped() IRechargeFirstDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rechargeFirstDo) Create(values ...*model.RechargeFirst) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rechargeFirstDo) CreateInBatches(values []*model.RechargeFirst, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rechargeFirstDo) Save(values ...*model.RechargeFirst) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rechargeFirstDo) First() (*model.RechargeFirst, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargeFirst), nil
	}
}

func (r rechargeFirstDo) Take() (*model.RechargeFirst, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargeFirst), nil
	}
}

func (r rechargeFirstDo) Last() (*model.RechargeFirst, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargeFirst), nil
	}
}

func (r rechargeFirstDo) Find() ([]*model.RechargeFirst, error) {
	result, err := r.DO.Find()
	return result.([]*model.RechargeFirst), err
}

func (r rechargeFirstDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RechargeFirst, err error) {
	buf := make([]*model.RechargeFirst, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rechargeFirstDo) FindInBatches(result *[]*model.RechargeFirst, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rechargeFirstDo) Attrs(attrs ...field.AssignExpr) IRechargeFirstDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rechargeFirstDo) Assign(attrs ...field.AssignExpr) IRechargeFirstDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rechargeFirstDo) Joins(fields ...field.RelationField) IRechargeFirstDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rechargeFirstDo) Preload(fields ...field.RelationField) IRechargeFirstDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rechargeFirstDo) FirstOrInit() (*model.RechargeFirst, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargeFirst), nil
	}
}

func (r rechargeFirstDo) FirstOrCreate() (*model.RechargeFirst, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargeFirst), nil
	}
}

func (r rechargeFirstDo) FindByPage(offset int, limit int) (result []*model.RechargeFirst, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rechargeFirstDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rechargeFirstDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rechargeFirstDo) Delete(models ...*model.RechargeFirst) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rechargeFirstDo) withDO(do gen.Dao) *rechargeFirstDo {
	r.DO = *do.(*gen.DO)
	return r
}
