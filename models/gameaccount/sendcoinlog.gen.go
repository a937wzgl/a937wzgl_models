// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newSendcoinlog(db *gorm.DB, opts ...gen.DOOption) sendcoinlog {
	_sendcoinlog := sendcoinlog{}

	_sendcoinlog.sendcoinlogDo.UseDB(db, opts...)
	_sendcoinlog.sendcoinlogDo.UseModel(&model.Sendcoinlog{})

	tableName := _sendcoinlog.sendcoinlogDo.TableName()
	_sendcoinlog.ALL = field.NewAsterisk(tableName)
	_sendcoinlog.Userid = field.NewInt32(tableName, "userid")
	_sendcoinlog.Getcoinuserid = field.NewInt32(tableName, "getcoinuserid")
	_sendcoinlog.Sendcoin = field.NewInt32(tableName, "sendcoin")
	_sendcoinlog.Addtime = field.NewTime(tableName, "addtime")

	_sendcoinlog.fillFieldMap()

	return _sendcoinlog
}

type sendcoinlog struct {
	sendcoinlogDo

	ALL           field.Asterisk
	Userid        field.Int32 // 用户id
	Getcoinuserid field.Int32 // 被赠送用户id
	Sendcoin      field.Int32 // 赠送金额
	Addtime       field.Time

	fieldMap map[string]field.Expr
}

func (s sendcoinlog) Table(newTableName string) *sendcoinlog {
	s.sendcoinlogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sendcoinlog) As(alias string) *sendcoinlog {
	s.sendcoinlogDo.DO = *(s.sendcoinlogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sendcoinlog) updateTableName(table string) *sendcoinlog {
	s.ALL = field.NewAsterisk(table)
	s.Userid = field.NewInt32(table, "userid")
	s.Getcoinuserid = field.NewInt32(table, "getcoinuserid")
	s.Sendcoin = field.NewInt32(table, "sendcoin")
	s.Addtime = field.NewTime(table, "addtime")

	s.fillFieldMap()

	return s
}

func (s *sendcoinlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sendcoinlog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["userid"] = s.Userid
	s.fieldMap["getcoinuserid"] = s.Getcoinuserid
	s.fieldMap["sendcoin"] = s.Sendcoin
	s.fieldMap["addtime"] = s.Addtime
}

func (s sendcoinlog) clone(db *gorm.DB) sendcoinlog {
	s.sendcoinlogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sendcoinlog) replaceDB(db *gorm.DB) sendcoinlog {
	s.sendcoinlogDo.ReplaceDB(db)
	return s
}

type sendcoinlogDo struct{ gen.DO }

type ISendcoinlogDo interface {
	gen.SubQuery
	Debug() ISendcoinlogDo
	WithContext(ctx context.Context) ISendcoinlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISendcoinlogDo
	WriteDB() ISendcoinlogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISendcoinlogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISendcoinlogDo
	Not(conds ...gen.Condition) ISendcoinlogDo
	Or(conds ...gen.Condition) ISendcoinlogDo
	Select(conds ...field.Expr) ISendcoinlogDo
	Where(conds ...gen.Condition) ISendcoinlogDo
	Order(conds ...field.Expr) ISendcoinlogDo
	Distinct(cols ...field.Expr) ISendcoinlogDo
	Omit(cols ...field.Expr) ISendcoinlogDo
	Join(table schema.Tabler, on ...field.Expr) ISendcoinlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISendcoinlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISendcoinlogDo
	Group(cols ...field.Expr) ISendcoinlogDo
	Having(conds ...gen.Condition) ISendcoinlogDo
	Limit(limit int) ISendcoinlogDo
	Offset(offset int) ISendcoinlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISendcoinlogDo
	Unscoped() ISendcoinlogDo
	Create(values ...*model.Sendcoinlog) error
	CreateInBatches(values []*model.Sendcoinlog, batchSize int) error
	Save(values ...*model.Sendcoinlog) error
	First() (*model.Sendcoinlog, error)
	Take() (*model.Sendcoinlog, error)
	Last() (*model.Sendcoinlog, error)
	Find() ([]*model.Sendcoinlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sendcoinlog, err error)
	FindInBatches(result *[]*model.Sendcoinlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sendcoinlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISendcoinlogDo
	Assign(attrs ...field.AssignExpr) ISendcoinlogDo
	Joins(fields ...field.RelationField) ISendcoinlogDo
	Preload(fields ...field.RelationField) ISendcoinlogDo
	FirstOrInit() (*model.Sendcoinlog, error)
	FirstOrCreate() (*model.Sendcoinlog, error)
	FindByPage(offset int, limit int) (result []*model.Sendcoinlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISendcoinlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sendcoinlogDo) Debug() ISendcoinlogDo {
	return s.withDO(s.DO.Debug())
}

func (s sendcoinlogDo) WithContext(ctx context.Context) ISendcoinlogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sendcoinlogDo) ReadDB() ISendcoinlogDo {
	return s.Clauses(dbresolver.Read)
}

func (s sendcoinlogDo) WriteDB() ISendcoinlogDo {
	return s.Clauses(dbresolver.Write)
}

func (s sendcoinlogDo) Session(config *gorm.Session) ISendcoinlogDo {
	return s.withDO(s.DO.Session(config))
}

func (s sendcoinlogDo) Clauses(conds ...clause.Expression) ISendcoinlogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sendcoinlogDo) Returning(value interface{}, columns ...string) ISendcoinlogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sendcoinlogDo) Not(conds ...gen.Condition) ISendcoinlogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sendcoinlogDo) Or(conds ...gen.Condition) ISendcoinlogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sendcoinlogDo) Select(conds ...field.Expr) ISendcoinlogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sendcoinlogDo) Where(conds ...gen.Condition) ISendcoinlogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sendcoinlogDo) Order(conds ...field.Expr) ISendcoinlogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sendcoinlogDo) Distinct(cols ...field.Expr) ISendcoinlogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sendcoinlogDo) Omit(cols ...field.Expr) ISendcoinlogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sendcoinlogDo) Join(table schema.Tabler, on ...field.Expr) ISendcoinlogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sendcoinlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISendcoinlogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sendcoinlogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISendcoinlogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sendcoinlogDo) Group(cols ...field.Expr) ISendcoinlogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sendcoinlogDo) Having(conds ...gen.Condition) ISendcoinlogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sendcoinlogDo) Limit(limit int) ISendcoinlogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sendcoinlogDo) Offset(offset int) ISendcoinlogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sendcoinlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISendcoinlogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sendcoinlogDo) Unscoped() ISendcoinlogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sendcoinlogDo) Create(values ...*model.Sendcoinlog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sendcoinlogDo) CreateInBatches(values []*model.Sendcoinlog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sendcoinlogDo) Save(values ...*model.Sendcoinlog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sendcoinlogDo) First() (*model.Sendcoinlog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sendcoinlog), nil
	}
}

func (s sendcoinlogDo) Take() (*model.Sendcoinlog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sendcoinlog), nil
	}
}

func (s sendcoinlogDo) Last() (*model.Sendcoinlog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sendcoinlog), nil
	}
}

func (s sendcoinlogDo) Find() ([]*model.Sendcoinlog, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sendcoinlog), err
}

func (s sendcoinlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sendcoinlog, err error) {
	buf := make([]*model.Sendcoinlog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sendcoinlogDo) FindInBatches(result *[]*model.Sendcoinlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sendcoinlogDo) Attrs(attrs ...field.AssignExpr) ISendcoinlogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sendcoinlogDo) Assign(attrs ...field.AssignExpr) ISendcoinlogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sendcoinlogDo) Joins(fields ...field.RelationField) ISendcoinlogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sendcoinlogDo) Preload(fields ...field.RelationField) ISendcoinlogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sendcoinlogDo) FirstOrInit() (*model.Sendcoinlog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sendcoinlog), nil
	}
}

func (s sendcoinlogDo) FirstOrCreate() (*model.Sendcoinlog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sendcoinlog), nil
	}
}

func (s sendcoinlogDo) FindByPage(offset int, limit int) (result []*model.Sendcoinlog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sendcoinlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sendcoinlogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sendcoinlogDo) Delete(models ...*model.Sendcoinlog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sendcoinlogDo) withDO(do gen.Dao) *sendcoinlogDo {
	s.DO = *do.(*gen.DO)
	return s
}
