// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package qiang_cow

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newDowncoinlog(db *gorm.DB, opts ...gen.DOOption) downcoinlog {
	_downcoinlog := downcoinlog{}

	_downcoinlog.downcoinlogDo.UseDB(db, opts...)
	_downcoinlog.downcoinlogDo.UseModel(&model.Downcoinlog{})

	tableName := _downcoinlog.downcoinlogDo.TableName()
	_downcoinlog.ALL = field.NewAsterisk(tableName)
	_downcoinlog.ID = field.NewInt32(tableName, "id")
	_downcoinlog.UserID = field.NewInt32(tableName, "userId")
	_downcoinlog.MatchID = field.NewInt32(tableName, "MatchId")
	_downcoinlog.CallBet = field.NewInt32(tableName, "callBet")
	_downcoinlog.SelectBet = field.NewInt32(tableName, "selectBet")
	_downcoinlog.SeverBet = field.NewInt32(tableName, "severBet")
	_downcoinlog.WinCoin = field.NewInt32(tableName, "winCoin")
	_downcoinlog.Tax = field.NewInt32(tableName, "tax")
	_downcoinlog.IsBanker = field.NewBool(tableName, "isBanker")
	_downcoinlog.ServerID = field.NewInt32(tableName, "serverId")
	_downcoinlog.Tableid = field.NewInt32(tableName, "tableid")
	_downcoinlog.Adddate = field.NewTime(tableName, "Adddate")
	_downcoinlog.Mark = field.NewBool(tableName, "mark")

	_downcoinlog.fillFieldMap()

	return _downcoinlog
}

type downcoinlog struct {
	downcoinlogDo

	ALL       field.Asterisk
	ID        field.Int32
	UserID    field.Int32
	MatchID   field.Int32 // 场次ID
	CallBet   field.Int32
	SelectBet field.Int32
	SeverBet  field.Int32
	WinCoin   field.Int32
	Tax       field.Int32
	IsBanker  field.Bool
	ServerID  field.Int32
	Tableid   field.Int32
	Adddate   field.Time
	Mark      field.Bool

	fieldMap map[string]field.Expr
}

func (d downcoinlog) Table(newTableName string) *downcoinlog {
	d.downcoinlogDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d downcoinlog) As(alias string) *downcoinlog {
	d.downcoinlogDo.DO = *(d.downcoinlogDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *downcoinlog) updateTableName(table string) *downcoinlog {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.UserID = field.NewInt32(table, "userId")
	d.MatchID = field.NewInt32(table, "MatchId")
	d.CallBet = field.NewInt32(table, "callBet")
	d.SelectBet = field.NewInt32(table, "selectBet")
	d.SeverBet = field.NewInt32(table, "severBet")
	d.WinCoin = field.NewInt32(table, "winCoin")
	d.Tax = field.NewInt32(table, "tax")
	d.IsBanker = field.NewBool(table, "isBanker")
	d.ServerID = field.NewInt32(table, "serverId")
	d.Tableid = field.NewInt32(table, "tableid")
	d.Adddate = field.NewTime(table, "Adddate")
	d.Mark = field.NewBool(table, "mark")

	d.fillFieldMap()

	return d
}

func (d *downcoinlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *downcoinlog) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 13)
	d.fieldMap["id"] = d.ID
	d.fieldMap["userId"] = d.UserID
	d.fieldMap["MatchId"] = d.MatchID
	d.fieldMap["callBet"] = d.CallBet
	d.fieldMap["selectBet"] = d.SelectBet
	d.fieldMap["severBet"] = d.SeverBet
	d.fieldMap["winCoin"] = d.WinCoin
	d.fieldMap["tax"] = d.Tax
	d.fieldMap["isBanker"] = d.IsBanker
	d.fieldMap["serverId"] = d.ServerID
	d.fieldMap["tableid"] = d.Tableid
	d.fieldMap["Adddate"] = d.Adddate
	d.fieldMap["mark"] = d.Mark
}

func (d downcoinlog) clone(db *gorm.DB) downcoinlog {
	d.downcoinlogDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d downcoinlog) replaceDB(db *gorm.DB) downcoinlog {
	d.downcoinlogDo.ReplaceDB(db)
	return d
}

type downcoinlogDo struct{ gen.DO }

type IDowncoinlogDo interface {
	gen.SubQuery
	Debug() IDowncoinlogDo
	WithContext(ctx context.Context) IDowncoinlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDowncoinlogDo
	WriteDB() IDowncoinlogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDowncoinlogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDowncoinlogDo
	Not(conds ...gen.Condition) IDowncoinlogDo
	Or(conds ...gen.Condition) IDowncoinlogDo
	Select(conds ...field.Expr) IDowncoinlogDo
	Where(conds ...gen.Condition) IDowncoinlogDo
	Order(conds ...field.Expr) IDowncoinlogDo
	Distinct(cols ...field.Expr) IDowncoinlogDo
	Omit(cols ...field.Expr) IDowncoinlogDo
	Join(table schema.Tabler, on ...field.Expr) IDowncoinlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDowncoinlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDowncoinlogDo
	Group(cols ...field.Expr) IDowncoinlogDo
	Having(conds ...gen.Condition) IDowncoinlogDo
	Limit(limit int) IDowncoinlogDo
	Offset(offset int) IDowncoinlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDowncoinlogDo
	Unscoped() IDowncoinlogDo
	Create(values ...*model.Downcoinlog) error
	CreateInBatches(values []*model.Downcoinlog, batchSize int) error
	Save(values ...*model.Downcoinlog) error
	First() (*model.Downcoinlog, error)
	Take() (*model.Downcoinlog, error)
	Last() (*model.Downcoinlog, error)
	Find() ([]*model.Downcoinlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Downcoinlog, err error)
	FindInBatches(result *[]*model.Downcoinlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Downcoinlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDowncoinlogDo
	Assign(attrs ...field.AssignExpr) IDowncoinlogDo
	Joins(fields ...field.RelationField) IDowncoinlogDo
	Preload(fields ...field.RelationField) IDowncoinlogDo
	FirstOrInit() (*model.Downcoinlog, error)
	FirstOrCreate() (*model.Downcoinlog, error)
	FindByPage(offset int, limit int) (result []*model.Downcoinlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDowncoinlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d downcoinlogDo) Debug() IDowncoinlogDo {
	return d.withDO(d.DO.Debug())
}

func (d downcoinlogDo) WithContext(ctx context.Context) IDowncoinlogDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d downcoinlogDo) ReadDB() IDowncoinlogDo {
	return d.Clauses(dbresolver.Read)
}

func (d downcoinlogDo) WriteDB() IDowncoinlogDo {
	return d.Clauses(dbresolver.Write)
}

func (d downcoinlogDo) Session(config *gorm.Session) IDowncoinlogDo {
	return d.withDO(d.DO.Session(config))
}

func (d downcoinlogDo) Clauses(conds ...clause.Expression) IDowncoinlogDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d downcoinlogDo) Returning(value interface{}, columns ...string) IDowncoinlogDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d downcoinlogDo) Not(conds ...gen.Condition) IDowncoinlogDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d downcoinlogDo) Or(conds ...gen.Condition) IDowncoinlogDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d downcoinlogDo) Select(conds ...field.Expr) IDowncoinlogDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d downcoinlogDo) Where(conds ...gen.Condition) IDowncoinlogDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d downcoinlogDo) Order(conds ...field.Expr) IDowncoinlogDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d downcoinlogDo) Distinct(cols ...field.Expr) IDowncoinlogDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d downcoinlogDo) Omit(cols ...field.Expr) IDowncoinlogDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d downcoinlogDo) Join(table schema.Tabler, on ...field.Expr) IDowncoinlogDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d downcoinlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDowncoinlogDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d downcoinlogDo) RightJoin(table schema.Tabler, on ...field.Expr) IDowncoinlogDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d downcoinlogDo) Group(cols ...field.Expr) IDowncoinlogDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d downcoinlogDo) Having(conds ...gen.Condition) IDowncoinlogDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d downcoinlogDo) Limit(limit int) IDowncoinlogDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d downcoinlogDo) Offset(offset int) IDowncoinlogDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d downcoinlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDowncoinlogDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d downcoinlogDo) Unscoped() IDowncoinlogDo {
	return d.withDO(d.DO.Unscoped())
}

func (d downcoinlogDo) Create(values ...*model.Downcoinlog) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d downcoinlogDo) CreateInBatches(values []*model.Downcoinlog, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d downcoinlogDo) Save(values ...*model.Downcoinlog) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d downcoinlogDo) First() (*model.Downcoinlog, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Downcoinlog), nil
	}
}

func (d downcoinlogDo) Take() (*model.Downcoinlog, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Downcoinlog), nil
	}
}

func (d downcoinlogDo) Last() (*model.Downcoinlog, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Downcoinlog), nil
	}
}

func (d downcoinlogDo) Find() ([]*model.Downcoinlog, error) {
	result, err := d.DO.Find()
	return result.([]*model.Downcoinlog), err
}

func (d downcoinlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Downcoinlog, err error) {
	buf := make([]*model.Downcoinlog, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d downcoinlogDo) FindInBatches(result *[]*model.Downcoinlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d downcoinlogDo) Attrs(attrs ...field.AssignExpr) IDowncoinlogDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d downcoinlogDo) Assign(attrs ...field.AssignExpr) IDowncoinlogDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d downcoinlogDo) Joins(fields ...field.RelationField) IDowncoinlogDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d downcoinlogDo) Preload(fields ...field.RelationField) IDowncoinlogDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d downcoinlogDo) FirstOrInit() (*model.Downcoinlog, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Downcoinlog), nil
	}
}

func (d downcoinlogDo) FirstOrCreate() (*model.Downcoinlog, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Downcoinlog), nil
	}
}

func (d downcoinlogDo) FindByPage(offset int, limit int) (result []*model.Downcoinlog, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d downcoinlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d downcoinlogDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d downcoinlogDo) Delete(models ...*model.Downcoinlog) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *downcoinlogDo) withDO(do gen.Dao) *downcoinlogDo {
	d.DO = *do.(*gen.DO)
	return d
}
