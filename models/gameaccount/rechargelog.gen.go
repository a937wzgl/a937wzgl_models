// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newRechargelog(db *gorm.DB, opts ...gen.DOOption) rechargelog {
	_rechargelog := rechargelog{}

	_rechargelog.rechargelogDo.UseDB(db, opts...)
	_rechargelog.rechargelogDo.UseModel(&model.Rechargelog{})

	tableName := _rechargelog.rechargelogDo.TableName()
	_rechargelog.ALL = field.NewAsterisk(tableName)
	_rechargelog.ID = field.NewUint32(tableName, "id")
	_rechargelog.Adminid = field.NewUint32(tableName, "adminid")
	_rechargelog.Userid = field.NewUint32(tableName, "userid")
	_rechargelog.Createtime = field.NewString(tableName, "createtime")
	_rechargelog.Czfee = field.NewUint64(tableName, "czfee")
	_rechargelog.Oldfee = field.NewUint64(tableName, "oldfee")
	_rechargelog.Newfee = field.NewUint64(tableName, "newfee")
	_rechargelog.Type = field.NewBool(tableName, "type")

	_rechargelog.fillFieldMap()

	return _rechargelog
}

type rechargelog struct {
	rechargelogDo

	ALL        field.Asterisk
	ID         field.Uint32
	Adminid    field.Uint32
	Userid     field.Uint32
	Createtime field.String
	Czfee      field.Uint64
	Oldfee     field.Uint64
	Newfee     field.Uint64
	Type       field.Bool // 0 -  1 +

	fieldMap map[string]field.Expr
}

func (r rechargelog) Table(newTableName string) *rechargelog {
	r.rechargelogDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rechargelog) As(alias string) *rechargelog {
	r.rechargelogDo.DO = *(r.rechargelogDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rechargelog) updateTableName(table string) *rechargelog {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint32(table, "id")
	r.Adminid = field.NewUint32(table, "adminid")
	r.Userid = field.NewUint32(table, "userid")
	r.Createtime = field.NewString(table, "createtime")
	r.Czfee = field.NewUint64(table, "czfee")
	r.Oldfee = field.NewUint64(table, "oldfee")
	r.Newfee = field.NewUint64(table, "newfee")
	r.Type = field.NewBool(table, "type")

	r.fillFieldMap()

	return r
}

func (r *rechargelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rechargelog) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["adminid"] = r.Adminid
	r.fieldMap["userid"] = r.Userid
	r.fieldMap["createtime"] = r.Createtime
	r.fieldMap["czfee"] = r.Czfee
	r.fieldMap["oldfee"] = r.Oldfee
	r.fieldMap["newfee"] = r.Newfee
	r.fieldMap["type"] = r.Type
}

func (r rechargelog) clone(db *gorm.DB) rechargelog {
	r.rechargelogDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rechargelog) replaceDB(db *gorm.DB) rechargelog {
	r.rechargelogDo.ReplaceDB(db)
	return r
}

type rechargelogDo struct{ gen.DO }

type IRechargelogDo interface {
	gen.SubQuery
	Debug() IRechargelogDo
	WithContext(ctx context.Context) IRechargelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRechargelogDo
	WriteDB() IRechargelogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRechargelogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRechargelogDo
	Not(conds ...gen.Condition) IRechargelogDo
	Or(conds ...gen.Condition) IRechargelogDo
	Select(conds ...field.Expr) IRechargelogDo
	Where(conds ...gen.Condition) IRechargelogDo
	Order(conds ...field.Expr) IRechargelogDo
	Distinct(cols ...field.Expr) IRechargelogDo
	Omit(cols ...field.Expr) IRechargelogDo
	Join(table schema.Tabler, on ...field.Expr) IRechargelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRechargelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRechargelogDo
	Group(cols ...field.Expr) IRechargelogDo
	Having(conds ...gen.Condition) IRechargelogDo
	Limit(limit int) IRechargelogDo
	Offset(offset int) IRechargelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargelogDo
	Unscoped() IRechargelogDo
	Create(values ...*model.Rechargelog) error
	CreateInBatches(values []*model.Rechargelog, batchSize int) error
	Save(values ...*model.Rechargelog) error
	First() (*model.Rechargelog, error)
	Take() (*model.Rechargelog, error)
	Last() (*model.Rechargelog, error)
	Find() ([]*model.Rechargelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Rechargelog, err error)
	FindInBatches(result *[]*model.Rechargelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Rechargelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRechargelogDo
	Assign(attrs ...field.AssignExpr) IRechargelogDo
	Joins(fields ...field.RelationField) IRechargelogDo
	Preload(fields ...field.RelationField) IRechargelogDo
	FirstOrInit() (*model.Rechargelog, error)
	FirstOrCreate() (*model.Rechargelog, error)
	FindByPage(offset int, limit int) (result []*model.Rechargelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRechargelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rechargelogDo) Debug() IRechargelogDo {
	return r.withDO(r.DO.Debug())
}

func (r rechargelogDo) WithContext(ctx context.Context) IRechargelogDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rechargelogDo) ReadDB() IRechargelogDo {
	return r.Clauses(dbresolver.Read)
}

func (r rechargelogDo) WriteDB() IRechargelogDo {
	return r.Clauses(dbresolver.Write)
}

func (r rechargelogDo) Session(config *gorm.Session) IRechargelogDo {
	return r.withDO(r.DO.Session(config))
}

func (r rechargelogDo) Clauses(conds ...clause.Expression) IRechargelogDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rechargelogDo) Returning(value interface{}, columns ...string) IRechargelogDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rechargelogDo) Not(conds ...gen.Condition) IRechargelogDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rechargelogDo) Or(conds ...gen.Condition) IRechargelogDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rechargelogDo) Select(conds ...field.Expr) IRechargelogDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rechargelogDo) Where(conds ...gen.Condition) IRechargelogDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rechargelogDo) Order(conds ...field.Expr) IRechargelogDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rechargelogDo) Distinct(cols ...field.Expr) IRechargelogDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rechargelogDo) Omit(cols ...field.Expr) IRechargelogDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rechargelogDo) Join(table schema.Tabler, on ...field.Expr) IRechargelogDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rechargelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRechargelogDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rechargelogDo) RightJoin(table schema.Tabler, on ...field.Expr) IRechargelogDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rechargelogDo) Group(cols ...field.Expr) IRechargelogDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rechargelogDo) Having(conds ...gen.Condition) IRechargelogDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rechargelogDo) Limit(limit int) IRechargelogDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rechargelogDo) Offset(offset int) IRechargelogDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rechargelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargelogDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rechargelogDo) Unscoped() IRechargelogDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rechargelogDo) Create(values ...*model.Rechargelog) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rechargelogDo) CreateInBatches(values []*model.Rechargelog, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rechargelogDo) Save(values ...*model.Rechargelog) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rechargelogDo) First() (*model.Rechargelog, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rechargelog), nil
	}
}

func (r rechargelogDo) Take() (*model.Rechargelog, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rechargelog), nil
	}
}

func (r rechargelogDo) Last() (*model.Rechargelog, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rechargelog), nil
	}
}

func (r rechargelogDo) Find() ([]*model.Rechargelog, error) {
	result, err := r.DO.Find()
	return result.([]*model.Rechargelog), err
}

func (r rechargelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Rechargelog, err error) {
	buf := make([]*model.Rechargelog, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rechargelogDo) FindInBatches(result *[]*model.Rechargelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rechargelogDo) Attrs(attrs ...field.AssignExpr) IRechargelogDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rechargelogDo) Assign(attrs ...field.AssignExpr) IRechargelogDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rechargelogDo) Joins(fields ...field.RelationField) IRechargelogDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rechargelogDo) Preload(fields ...field.RelationField) IRechargelogDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rechargelogDo) FirstOrInit() (*model.Rechargelog, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rechargelog), nil
	}
}

func (r rechargelogDo) FirstOrCreate() (*model.Rechargelog, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rechargelog), nil
	}
}

func (r rechargelogDo) FindByPage(offset int, limit int) (result []*model.Rechargelog, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rechargelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rechargelogDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rechargelogDo) Delete(models ...*model.Rechargelog) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rechargelogDo) withDO(do gen.Dao) *rechargelogDo {
	r.DO = *do.(*gen.DO)
	return r
}
