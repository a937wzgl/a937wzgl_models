// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gameaccount

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newBankbindlist(db *gorm.DB, opts ...gen.DOOption) bankbindlist {
	_bankbindlist := bankbindlist{}

	_bankbindlist.bankbindlistDo.UseDB(db, opts...)
	_bankbindlist.bankbindlistDo.UseModel(&model.Bankbindlist{})

	tableName := _bankbindlist.bankbindlistDo.TableName()
	_bankbindlist.ALL = field.NewAsterisk(tableName)
	_bankbindlist.CardID = field.NewInt32(tableName, "cardId")
	_bankbindlist.UserID = field.NewInt32(tableName, "userId")
	_bankbindlist.Account = field.NewString(tableName, "account")
	_bankbindlist.Name = field.NewString(tableName, "name")
	_bankbindlist.BankType = field.NewInt32(tableName, "bankType")

	_bankbindlist.fillFieldMap()

	return _bankbindlist
}

type bankbindlist struct {
	bankbindlistDo

	ALL      field.Asterisk
	CardID   field.Int32
	UserID   field.Int32
	Account  field.String
	Name     field.String
	BankType field.Int32

	fieldMap map[string]field.Expr
}

func (b bankbindlist) Table(newTableName string) *bankbindlist {
	b.bankbindlistDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bankbindlist) As(alias string) *bankbindlist {
	b.bankbindlistDo.DO = *(b.bankbindlistDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bankbindlist) updateTableName(table string) *bankbindlist {
	b.ALL = field.NewAsterisk(table)
	b.CardID = field.NewInt32(table, "cardId")
	b.UserID = field.NewInt32(table, "userId")
	b.Account = field.NewString(table, "account")
	b.Name = field.NewString(table, "name")
	b.BankType = field.NewInt32(table, "bankType")

	b.fillFieldMap()

	return b
}

func (b *bankbindlist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bankbindlist) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 5)
	b.fieldMap["cardId"] = b.CardID
	b.fieldMap["userId"] = b.UserID
	b.fieldMap["account"] = b.Account
	b.fieldMap["name"] = b.Name
	b.fieldMap["bankType"] = b.BankType
}

func (b bankbindlist) clone(db *gorm.DB) bankbindlist {
	b.bankbindlistDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bankbindlist) replaceDB(db *gorm.DB) bankbindlist {
	b.bankbindlistDo.ReplaceDB(db)
	return b
}

type bankbindlistDo struct{ gen.DO }

type IBankbindlistDo interface {
	gen.SubQuery
	Debug() IBankbindlistDo
	WithContext(ctx context.Context) IBankbindlistDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBankbindlistDo
	WriteDB() IBankbindlistDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBankbindlistDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBankbindlistDo
	Not(conds ...gen.Condition) IBankbindlistDo
	Or(conds ...gen.Condition) IBankbindlistDo
	Select(conds ...field.Expr) IBankbindlistDo
	Where(conds ...gen.Condition) IBankbindlistDo
	Order(conds ...field.Expr) IBankbindlistDo
	Distinct(cols ...field.Expr) IBankbindlistDo
	Omit(cols ...field.Expr) IBankbindlistDo
	Join(table schema.Tabler, on ...field.Expr) IBankbindlistDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBankbindlistDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBankbindlistDo
	Group(cols ...field.Expr) IBankbindlistDo
	Having(conds ...gen.Condition) IBankbindlistDo
	Limit(limit int) IBankbindlistDo
	Offset(offset int) IBankbindlistDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBankbindlistDo
	Unscoped() IBankbindlistDo
	Create(values ...*model.Bankbindlist) error
	CreateInBatches(values []*model.Bankbindlist, batchSize int) error
	Save(values ...*model.Bankbindlist) error
	First() (*model.Bankbindlist, error)
	Take() (*model.Bankbindlist, error)
	Last() (*model.Bankbindlist, error)
	Find() ([]*model.Bankbindlist, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Bankbindlist, err error)
	FindInBatches(result *[]*model.Bankbindlist, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Bankbindlist) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBankbindlistDo
	Assign(attrs ...field.AssignExpr) IBankbindlistDo
	Joins(fields ...field.RelationField) IBankbindlistDo
	Preload(fields ...field.RelationField) IBankbindlistDo
	FirstOrInit() (*model.Bankbindlist, error)
	FirstOrCreate() (*model.Bankbindlist, error)
	FindByPage(offset int, limit int) (result []*model.Bankbindlist, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBankbindlistDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bankbindlistDo) Debug() IBankbindlistDo {
	return b.withDO(b.DO.Debug())
}

func (b bankbindlistDo) WithContext(ctx context.Context) IBankbindlistDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bankbindlistDo) ReadDB() IBankbindlistDo {
	return b.Clauses(dbresolver.Read)
}

func (b bankbindlistDo) WriteDB() IBankbindlistDo {
	return b.Clauses(dbresolver.Write)
}

func (b bankbindlistDo) Session(config *gorm.Session) IBankbindlistDo {
	return b.withDO(b.DO.Session(config))
}

func (b bankbindlistDo) Clauses(conds ...clause.Expression) IBankbindlistDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bankbindlistDo) Returning(value interface{}, columns ...string) IBankbindlistDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bankbindlistDo) Not(conds ...gen.Condition) IBankbindlistDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bankbindlistDo) Or(conds ...gen.Condition) IBankbindlistDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bankbindlistDo) Select(conds ...field.Expr) IBankbindlistDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bankbindlistDo) Where(conds ...gen.Condition) IBankbindlistDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bankbindlistDo) Order(conds ...field.Expr) IBankbindlistDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bankbindlistDo) Distinct(cols ...field.Expr) IBankbindlistDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bankbindlistDo) Omit(cols ...field.Expr) IBankbindlistDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bankbindlistDo) Join(table schema.Tabler, on ...field.Expr) IBankbindlistDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bankbindlistDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBankbindlistDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bankbindlistDo) RightJoin(table schema.Tabler, on ...field.Expr) IBankbindlistDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bankbindlistDo) Group(cols ...field.Expr) IBankbindlistDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bankbindlistDo) Having(conds ...gen.Condition) IBankbindlistDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bankbindlistDo) Limit(limit int) IBankbindlistDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bankbindlistDo) Offset(offset int) IBankbindlistDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bankbindlistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBankbindlistDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bankbindlistDo) Unscoped() IBankbindlistDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bankbindlistDo) Create(values ...*model.Bankbindlist) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bankbindlistDo) CreateInBatches(values []*model.Bankbindlist, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bankbindlistDo) Save(values ...*model.Bankbindlist) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bankbindlistDo) First() (*model.Bankbindlist, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bankbindlist), nil
	}
}

func (b bankbindlistDo) Take() (*model.Bankbindlist, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bankbindlist), nil
	}
}

func (b bankbindlistDo) Last() (*model.Bankbindlist, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bankbindlist), nil
	}
}

func (b bankbindlistDo) Find() ([]*model.Bankbindlist, error) {
	result, err := b.DO.Find()
	return result.([]*model.Bankbindlist), err
}

func (b bankbindlistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Bankbindlist, err error) {
	buf := make([]*model.Bankbindlist, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bankbindlistDo) FindInBatches(result *[]*model.Bankbindlist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bankbindlistDo) Attrs(attrs ...field.AssignExpr) IBankbindlistDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bankbindlistDo) Assign(attrs ...field.AssignExpr) IBankbindlistDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bankbindlistDo) Joins(fields ...field.RelationField) IBankbindlistDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bankbindlistDo) Preload(fields ...field.RelationField) IBankbindlistDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bankbindlistDo) FirstOrInit() (*model.Bankbindlist, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bankbindlist), nil
	}
}

func (b bankbindlistDo) FirstOrCreate() (*model.Bankbindlist, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bankbindlist), nil
	}
}

func (b bankbindlistDo) FindByPage(offset int, limit int) (result []*model.Bankbindlist, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bankbindlistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bankbindlistDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bankbindlistDo) Delete(models ...*model.Bankbindlist) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bankbindlistDo) withDO(do gen.Dao) *bankbindlistDo {
	b.DO = *do.(*gen.DO)
	return b
}
