// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package game_log

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newYuXiaXieClubTableLog(db *gorm.DB, opts ...gen.DOOption) yuXiaXieClubTableLog {
	_yuXiaXieClubTableLog := yuXiaXieClubTableLog{}

	_yuXiaXieClubTableLog.yuXiaXieClubTableLogDo.UseDB(db, opts...)
	_yuXiaXieClubTableLog.yuXiaXieClubTableLogDo.UseModel(&model.YuXiaXieClubTableLog{})

	tableName := _yuXiaXieClubTableLog.yuXiaXieClubTableLogDo.TableName()
	_yuXiaXieClubTableLog.ALL = field.NewAsterisk(tableName)
	_yuXiaXieClubTableLog.ID = field.NewInt64(tableName, "id")
	_yuXiaXieClubTableLog.UserID = field.NewInt32(tableName, "user_id")
	_yuXiaXieClubTableLog.TableDict = field.NewString(tableName, "table_dict")
	_yuXiaXieClubTableLog.AddDate = field.NewTime(tableName, "add_date")
	_yuXiaXieClubTableLog.ClubID = field.NewString(tableName, "club_id")

	_yuXiaXieClubTableLog.fillFieldMap()

	return _yuXiaXieClubTableLog
}

type yuXiaXieClubTableLog struct {
	yuXiaXieClubTableLogDo

	ALL       field.Asterisk
	ID        field.Int64
	UserID    field.Int32  // 用户id
	TableDict field.String // 桌子内游戏信息
	AddDate   field.Time   // 创建时间
	ClubID    field.String // 俱乐部id

	fieldMap map[string]field.Expr
}

func (y yuXiaXieClubTableLog) Table(newTableName string) *yuXiaXieClubTableLog {
	y.yuXiaXieClubTableLogDo.UseTable(newTableName)
	return y.updateTableName(newTableName)
}

func (y yuXiaXieClubTableLog) As(alias string) *yuXiaXieClubTableLog {
	y.yuXiaXieClubTableLogDo.DO = *(y.yuXiaXieClubTableLogDo.As(alias).(*gen.DO))
	return y.updateTableName(alias)
}

func (y *yuXiaXieClubTableLog) updateTableName(table string) *yuXiaXieClubTableLog {
	y.ALL = field.NewAsterisk(table)
	y.ID = field.NewInt64(table, "id")
	y.UserID = field.NewInt32(table, "user_id")
	y.TableDict = field.NewString(table, "table_dict")
	y.AddDate = field.NewTime(table, "add_date")
	y.ClubID = field.NewString(table, "club_id")

	y.fillFieldMap()

	return y
}

func (y *yuXiaXieClubTableLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := y.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (y *yuXiaXieClubTableLog) fillFieldMap() {
	y.fieldMap = make(map[string]field.Expr, 5)
	y.fieldMap["id"] = y.ID
	y.fieldMap["user_id"] = y.UserID
	y.fieldMap["table_dict"] = y.TableDict
	y.fieldMap["add_date"] = y.AddDate
	y.fieldMap["club_id"] = y.ClubID
}

func (y yuXiaXieClubTableLog) clone(db *gorm.DB) yuXiaXieClubTableLog {
	y.yuXiaXieClubTableLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return y
}

func (y yuXiaXieClubTableLog) replaceDB(db *gorm.DB) yuXiaXieClubTableLog {
	y.yuXiaXieClubTableLogDo.ReplaceDB(db)
	return y
}

type yuXiaXieClubTableLogDo struct{ gen.DO }

type IYuXiaXieClubTableLogDo interface {
	gen.SubQuery
	Debug() IYuXiaXieClubTableLogDo
	WithContext(ctx context.Context) IYuXiaXieClubTableLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IYuXiaXieClubTableLogDo
	WriteDB() IYuXiaXieClubTableLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IYuXiaXieClubTableLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IYuXiaXieClubTableLogDo
	Not(conds ...gen.Condition) IYuXiaXieClubTableLogDo
	Or(conds ...gen.Condition) IYuXiaXieClubTableLogDo
	Select(conds ...field.Expr) IYuXiaXieClubTableLogDo
	Where(conds ...gen.Condition) IYuXiaXieClubTableLogDo
	Order(conds ...field.Expr) IYuXiaXieClubTableLogDo
	Distinct(cols ...field.Expr) IYuXiaXieClubTableLogDo
	Omit(cols ...field.Expr) IYuXiaXieClubTableLogDo
	Join(table schema.Tabler, on ...field.Expr) IYuXiaXieClubTableLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IYuXiaXieClubTableLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IYuXiaXieClubTableLogDo
	Group(cols ...field.Expr) IYuXiaXieClubTableLogDo
	Having(conds ...gen.Condition) IYuXiaXieClubTableLogDo
	Limit(limit int) IYuXiaXieClubTableLogDo
	Offset(offset int) IYuXiaXieClubTableLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IYuXiaXieClubTableLogDo
	Unscoped() IYuXiaXieClubTableLogDo
	Create(values ...*model.YuXiaXieClubTableLog) error
	CreateInBatches(values []*model.YuXiaXieClubTableLog, batchSize int) error
	Save(values ...*model.YuXiaXieClubTableLog) error
	First() (*model.YuXiaXieClubTableLog, error)
	Take() (*model.YuXiaXieClubTableLog, error)
	Last() (*model.YuXiaXieClubTableLog, error)
	Find() ([]*model.YuXiaXieClubTableLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YuXiaXieClubTableLog, err error)
	FindInBatches(result *[]*model.YuXiaXieClubTableLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.YuXiaXieClubTableLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IYuXiaXieClubTableLogDo
	Assign(attrs ...field.AssignExpr) IYuXiaXieClubTableLogDo
	Joins(fields ...field.RelationField) IYuXiaXieClubTableLogDo
	Preload(fields ...field.RelationField) IYuXiaXieClubTableLogDo
	FirstOrInit() (*model.YuXiaXieClubTableLog, error)
	FirstOrCreate() (*model.YuXiaXieClubTableLog, error)
	FindByPage(offset int, limit int) (result []*model.YuXiaXieClubTableLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IYuXiaXieClubTableLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (y yuXiaXieClubTableLogDo) Debug() IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Debug())
}

func (y yuXiaXieClubTableLogDo) WithContext(ctx context.Context) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.WithContext(ctx))
}

func (y yuXiaXieClubTableLogDo) ReadDB() IYuXiaXieClubTableLogDo {
	return y.Clauses(dbresolver.Read)
}

func (y yuXiaXieClubTableLogDo) WriteDB() IYuXiaXieClubTableLogDo {
	return y.Clauses(dbresolver.Write)
}

func (y yuXiaXieClubTableLogDo) Session(config *gorm.Session) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Session(config))
}

func (y yuXiaXieClubTableLogDo) Clauses(conds ...clause.Expression) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Clauses(conds...))
}

func (y yuXiaXieClubTableLogDo) Returning(value interface{}, columns ...string) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Returning(value, columns...))
}

func (y yuXiaXieClubTableLogDo) Not(conds ...gen.Condition) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Not(conds...))
}

func (y yuXiaXieClubTableLogDo) Or(conds ...gen.Condition) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Or(conds...))
}

func (y yuXiaXieClubTableLogDo) Select(conds ...field.Expr) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Select(conds...))
}

func (y yuXiaXieClubTableLogDo) Where(conds ...gen.Condition) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Where(conds...))
}

func (y yuXiaXieClubTableLogDo) Order(conds ...field.Expr) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Order(conds...))
}

func (y yuXiaXieClubTableLogDo) Distinct(cols ...field.Expr) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Distinct(cols...))
}

func (y yuXiaXieClubTableLogDo) Omit(cols ...field.Expr) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Omit(cols...))
}

func (y yuXiaXieClubTableLogDo) Join(table schema.Tabler, on ...field.Expr) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Join(table, on...))
}

func (y yuXiaXieClubTableLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.LeftJoin(table, on...))
}

func (y yuXiaXieClubTableLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.RightJoin(table, on...))
}

func (y yuXiaXieClubTableLogDo) Group(cols ...field.Expr) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Group(cols...))
}

func (y yuXiaXieClubTableLogDo) Having(conds ...gen.Condition) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Having(conds...))
}

func (y yuXiaXieClubTableLogDo) Limit(limit int) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Limit(limit))
}

func (y yuXiaXieClubTableLogDo) Offset(offset int) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Offset(offset))
}

func (y yuXiaXieClubTableLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Scopes(funcs...))
}

func (y yuXiaXieClubTableLogDo) Unscoped() IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Unscoped())
}

func (y yuXiaXieClubTableLogDo) Create(values ...*model.YuXiaXieClubTableLog) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Create(values)
}

func (y yuXiaXieClubTableLogDo) CreateInBatches(values []*model.YuXiaXieClubTableLog, batchSize int) error {
	return y.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (y yuXiaXieClubTableLogDo) Save(values ...*model.YuXiaXieClubTableLog) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Save(values)
}

func (y yuXiaXieClubTableLogDo) First() (*model.YuXiaXieClubTableLog, error) {
	if result, err := y.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.YuXiaXieClubTableLog), nil
	}
}

func (y yuXiaXieClubTableLogDo) Take() (*model.YuXiaXieClubTableLog, error) {
	if result, err := y.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.YuXiaXieClubTableLog), nil
	}
}

func (y yuXiaXieClubTableLogDo) Last() (*model.YuXiaXieClubTableLog, error) {
	if result, err := y.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.YuXiaXieClubTableLog), nil
	}
}

func (y yuXiaXieClubTableLogDo) Find() ([]*model.YuXiaXieClubTableLog, error) {
	result, err := y.DO.Find()
	return result.([]*model.YuXiaXieClubTableLog), err
}

func (y yuXiaXieClubTableLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YuXiaXieClubTableLog, err error) {
	buf := make([]*model.YuXiaXieClubTableLog, 0, batchSize)
	err = y.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (y yuXiaXieClubTableLogDo) FindInBatches(result *[]*model.YuXiaXieClubTableLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return y.DO.FindInBatches(result, batchSize, fc)
}

func (y yuXiaXieClubTableLogDo) Attrs(attrs ...field.AssignExpr) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Attrs(attrs...))
}

func (y yuXiaXieClubTableLogDo) Assign(attrs ...field.AssignExpr) IYuXiaXieClubTableLogDo {
	return y.withDO(y.DO.Assign(attrs...))
}

func (y yuXiaXieClubTableLogDo) Joins(fields ...field.RelationField) IYuXiaXieClubTableLogDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Joins(_f))
	}
	return &y
}

func (y yuXiaXieClubTableLogDo) Preload(fields ...field.RelationField) IYuXiaXieClubTableLogDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Preload(_f))
	}
	return &y
}

func (y yuXiaXieClubTableLogDo) FirstOrInit() (*model.YuXiaXieClubTableLog, error) {
	if result, err := y.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.YuXiaXieClubTableLog), nil
	}
}

func (y yuXiaXieClubTableLogDo) FirstOrCreate() (*model.YuXiaXieClubTableLog, error) {
	if result, err := y.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.YuXiaXieClubTableLog), nil
	}
}

func (y yuXiaXieClubTableLogDo) FindByPage(offset int, limit int) (result []*model.YuXiaXieClubTableLog, count int64, err error) {
	result, err = y.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = y.Offset(-1).Limit(-1).Count()
	return
}

func (y yuXiaXieClubTableLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = y.Count()
	if err != nil {
		return
	}

	err = y.Offset(offset).Limit(limit).Scan(result)
	return
}

func (y yuXiaXieClubTableLogDo) Scan(result interface{}) (err error) {
	return y.DO.Scan(result)
}

func (y yuXiaXieClubTableLogDo) Delete(models ...*model.YuXiaXieClubTableLog) (result gen.ResultInfo, err error) {
	return y.DO.Delete(models)
}

func (y *yuXiaXieClubTableLogDo) withDO(do gen.Dao) *yuXiaXieClubTableLogDo {
	y.DO = *do.(*gen.DO)
	return y
}
