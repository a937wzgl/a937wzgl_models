// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newKucunlog(db *gorm.DB, opts ...gen.DOOption) kucunlog {
	_kucunlog := kucunlog{}

	_kucunlog.kucunlogDo.UseDB(db, opts...)
	_kucunlog.kucunlogDo.UseModel(&model.Kucunlog{})

	tableName := _kucunlog.kucunlogDo.TableName()
	_kucunlog.ALL = field.NewAsterisk(tableName)
	_kucunlog.ID = field.NewUint32(tableName, "id")
	_kucunlog.Gameid = field.NewUint32(tableName, "gameid")
	_kucunlog.Shuiwei = field.NewUint32(tableName, "shuiwei")
	_kucunlog.Kucun = field.NewUint64(tableName, "kucun")
	_kucunlog.Jiangchi = field.NewUint64(tableName, "jiangchi")
	_kucunlog.Createtime = field.NewTime(tableName, "createtime")

	_kucunlog.fillFieldMap()

	return _kucunlog
}

type kucunlog struct {
	kucunlogDo

	ALL        field.Asterisk
	ID         field.Uint32
	Gameid     field.Uint32
	Shuiwei    field.Uint32
	Kucun      field.Uint64
	Jiangchi   field.Uint64
	Createtime field.Time

	fieldMap map[string]field.Expr
}

func (k kucunlog) Table(newTableName string) *kucunlog {
	k.kucunlogDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k kucunlog) As(alias string) *kucunlog {
	k.kucunlogDo.DO = *(k.kucunlogDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *kucunlog) updateTableName(table string) *kucunlog {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewUint32(table, "id")
	k.Gameid = field.NewUint32(table, "gameid")
	k.Shuiwei = field.NewUint32(table, "shuiwei")
	k.Kucun = field.NewUint64(table, "kucun")
	k.Jiangchi = field.NewUint64(table, "jiangchi")
	k.Createtime = field.NewTime(table, "createtime")

	k.fillFieldMap()

	return k
}

func (k *kucunlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *kucunlog) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 6)
	k.fieldMap["id"] = k.ID
	k.fieldMap["gameid"] = k.Gameid
	k.fieldMap["shuiwei"] = k.Shuiwei
	k.fieldMap["kucun"] = k.Kucun
	k.fieldMap["jiangchi"] = k.Jiangchi
	k.fieldMap["createtime"] = k.Createtime
}

func (k kucunlog) clone(db *gorm.DB) kucunlog {
	k.kucunlogDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k kucunlog) replaceDB(db *gorm.DB) kucunlog {
	k.kucunlogDo.ReplaceDB(db)
	return k
}

type kucunlogDo struct{ gen.DO }

type IKucunlogDo interface {
	gen.SubQuery
	Debug() IKucunlogDo
	WithContext(ctx context.Context) IKucunlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IKucunlogDo
	WriteDB() IKucunlogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IKucunlogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IKucunlogDo
	Not(conds ...gen.Condition) IKucunlogDo
	Or(conds ...gen.Condition) IKucunlogDo
	Select(conds ...field.Expr) IKucunlogDo
	Where(conds ...gen.Condition) IKucunlogDo
	Order(conds ...field.Expr) IKucunlogDo
	Distinct(cols ...field.Expr) IKucunlogDo
	Omit(cols ...field.Expr) IKucunlogDo
	Join(table schema.Tabler, on ...field.Expr) IKucunlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IKucunlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IKucunlogDo
	Group(cols ...field.Expr) IKucunlogDo
	Having(conds ...gen.Condition) IKucunlogDo
	Limit(limit int) IKucunlogDo
	Offset(offset int) IKucunlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IKucunlogDo
	Unscoped() IKucunlogDo
	Create(values ...*model.Kucunlog) error
	CreateInBatches(values []*model.Kucunlog, batchSize int) error
	Save(values ...*model.Kucunlog) error
	First() (*model.Kucunlog, error)
	Take() (*model.Kucunlog, error)
	Last() (*model.Kucunlog, error)
	Find() ([]*model.Kucunlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Kucunlog, err error)
	FindInBatches(result *[]*model.Kucunlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Kucunlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IKucunlogDo
	Assign(attrs ...field.AssignExpr) IKucunlogDo
	Joins(fields ...field.RelationField) IKucunlogDo
	Preload(fields ...field.RelationField) IKucunlogDo
	FirstOrInit() (*model.Kucunlog, error)
	FirstOrCreate() (*model.Kucunlog, error)
	FindByPage(offset int, limit int) (result []*model.Kucunlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IKucunlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (k kucunlogDo) Debug() IKucunlogDo {
	return k.withDO(k.DO.Debug())
}

func (k kucunlogDo) WithContext(ctx context.Context) IKucunlogDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k kucunlogDo) ReadDB() IKucunlogDo {
	return k.Clauses(dbresolver.Read)
}

func (k kucunlogDo) WriteDB() IKucunlogDo {
	return k.Clauses(dbresolver.Write)
}

func (k kucunlogDo) Session(config *gorm.Session) IKucunlogDo {
	return k.withDO(k.DO.Session(config))
}

func (k kucunlogDo) Clauses(conds ...clause.Expression) IKucunlogDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k kucunlogDo) Returning(value interface{}, columns ...string) IKucunlogDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k kucunlogDo) Not(conds ...gen.Condition) IKucunlogDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k kucunlogDo) Or(conds ...gen.Condition) IKucunlogDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k kucunlogDo) Select(conds ...field.Expr) IKucunlogDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k kucunlogDo) Where(conds ...gen.Condition) IKucunlogDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k kucunlogDo) Order(conds ...field.Expr) IKucunlogDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k kucunlogDo) Distinct(cols ...field.Expr) IKucunlogDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k kucunlogDo) Omit(cols ...field.Expr) IKucunlogDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k kucunlogDo) Join(table schema.Tabler, on ...field.Expr) IKucunlogDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k kucunlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IKucunlogDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k kucunlogDo) RightJoin(table schema.Tabler, on ...field.Expr) IKucunlogDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k kucunlogDo) Group(cols ...field.Expr) IKucunlogDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k kucunlogDo) Having(conds ...gen.Condition) IKucunlogDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k kucunlogDo) Limit(limit int) IKucunlogDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k kucunlogDo) Offset(offset int) IKucunlogDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k kucunlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IKucunlogDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k kucunlogDo) Unscoped() IKucunlogDo {
	return k.withDO(k.DO.Unscoped())
}

func (k kucunlogDo) Create(values ...*model.Kucunlog) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k kucunlogDo) CreateInBatches(values []*model.Kucunlog, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k kucunlogDo) Save(values ...*model.Kucunlog) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k kucunlogDo) First() (*model.Kucunlog, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kucunlog), nil
	}
}

func (k kucunlogDo) Take() (*model.Kucunlog, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kucunlog), nil
	}
}

func (k kucunlogDo) Last() (*model.Kucunlog, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kucunlog), nil
	}
}

func (k kucunlogDo) Find() ([]*model.Kucunlog, error) {
	result, err := k.DO.Find()
	return result.([]*model.Kucunlog), err
}

func (k kucunlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Kucunlog, err error) {
	buf := make([]*model.Kucunlog, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k kucunlogDo) FindInBatches(result *[]*model.Kucunlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k kucunlogDo) Attrs(attrs ...field.AssignExpr) IKucunlogDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k kucunlogDo) Assign(attrs ...field.AssignExpr) IKucunlogDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k kucunlogDo) Joins(fields ...field.RelationField) IKucunlogDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k kucunlogDo) Preload(fields ...field.RelationField) IKucunlogDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k kucunlogDo) FirstOrInit() (*model.Kucunlog, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kucunlog), nil
	}
}

func (k kucunlogDo) FirstOrCreate() (*model.Kucunlog, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kucunlog), nil
	}
}

func (k kucunlogDo) FindByPage(offset int, limit int) (result []*model.Kucunlog, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k kucunlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k kucunlogDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k kucunlogDo) Delete(models ...*model.Kucunlog) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *kucunlogDo) withDO(do gen.Dao) *kucunlogDo {
	k.DO = *do.(*gen.DO)
	return k
}
