// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package landlords

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLogBaomingSave(db *gorm.DB, opts ...gen.DOOption) logBaomingSave {
	_logBaomingSave := logBaomingSave{}

	_logBaomingSave.logBaomingSaveDo.UseDB(db, opts...)
	_logBaomingSave.logBaomingSaveDo.UseModel(&model.LogBaomingSave{})

	tableName := _logBaomingSave.logBaomingSaveDo.TableName()
	_logBaomingSave.ALL = field.NewAsterisk(tableName)
	_logBaomingSave.ID = field.NewUint32(tableName, "id")
	_logBaomingSave.UID = field.NewUint32(tableName, "uid")
	_logBaomingSave.Allc = field.NewUint32(tableName, "allc")
	_logBaomingSave.Play = field.NewUint32(tableName, "play")
	_logBaomingSave.WinAll = field.NewUint32(tableName, "win_all")
	_logBaomingSave.DizhuNum = field.NewUint32(tableName, "dizhu_num")
	_logBaomingSave.WinDizhu = field.NewUint32(tableName, "win_dizhu")
	_logBaomingSave.BmScore = field.NewUint32(tableName, "bm_score")
	_logBaomingSave.Result = field.NewUint32(tableName, "result")
	_logBaomingSave.ResultRes = field.NewString(tableName, "result_res")
	_logBaomingSave.IsSendWin = field.NewUint32(tableName, "is_send_win")
	_logBaomingSave.CreateTime = field.NewString(tableName, "create_time")
	_logBaomingSave.NickName = field.NewString(tableName, "nick_name")
	_logBaomingSave.HeadURL = field.NewString(tableName, "head_url")

	_logBaomingSave.fillFieldMap()

	return _logBaomingSave
}

type logBaomingSave struct {
	logBaomingSaveDo

	ALL        field.Asterisk
	ID         field.Uint32
	UID        field.Uint32
	Allc       field.Uint32
	Play       field.Uint32
	WinAll     field.Uint32
	DizhuNum   field.Uint32
	WinDizhu   field.Uint32
	BmScore    field.Uint32
	Result     field.Uint32
	ResultRes  field.String
	IsSendWin  field.Uint32
	CreateTime field.String
	NickName   field.String
	HeadURL    field.String

	fieldMap map[string]field.Expr
}

func (l logBaomingSave) Table(newTableName string) *logBaomingSave {
	l.logBaomingSaveDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logBaomingSave) As(alias string) *logBaomingSave {
	l.logBaomingSaveDo.DO = *(l.logBaomingSaveDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logBaomingSave) updateTableName(table string) *logBaomingSave {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint32(table, "id")
	l.UID = field.NewUint32(table, "uid")
	l.Allc = field.NewUint32(table, "allc")
	l.Play = field.NewUint32(table, "play")
	l.WinAll = field.NewUint32(table, "win_all")
	l.DizhuNum = field.NewUint32(table, "dizhu_num")
	l.WinDizhu = field.NewUint32(table, "win_dizhu")
	l.BmScore = field.NewUint32(table, "bm_score")
	l.Result = field.NewUint32(table, "result")
	l.ResultRes = field.NewString(table, "result_res")
	l.IsSendWin = field.NewUint32(table, "is_send_win")
	l.CreateTime = field.NewString(table, "create_time")
	l.NickName = field.NewString(table, "nick_name")
	l.HeadURL = field.NewString(table, "head_url")

	l.fillFieldMap()

	return l
}

func (l *logBaomingSave) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logBaomingSave) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["id"] = l.ID
	l.fieldMap["uid"] = l.UID
	l.fieldMap["allc"] = l.Allc
	l.fieldMap["play"] = l.Play
	l.fieldMap["win_all"] = l.WinAll
	l.fieldMap["dizhu_num"] = l.DizhuNum
	l.fieldMap["win_dizhu"] = l.WinDizhu
	l.fieldMap["bm_score"] = l.BmScore
	l.fieldMap["result"] = l.Result
	l.fieldMap["result_res"] = l.ResultRes
	l.fieldMap["is_send_win"] = l.IsSendWin
	l.fieldMap["create_time"] = l.CreateTime
	l.fieldMap["nick_name"] = l.NickName
	l.fieldMap["head_url"] = l.HeadURL
}

func (l logBaomingSave) clone(db *gorm.DB) logBaomingSave {
	l.logBaomingSaveDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logBaomingSave) replaceDB(db *gorm.DB) logBaomingSave {
	l.logBaomingSaveDo.ReplaceDB(db)
	return l
}

type logBaomingSaveDo struct{ gen.DO }

type ILogBaomingSaveDo interface {
	gen.SubQuery
	Debug() ILogBaomingSaveDo
	WithContext(ctx context.Context) ILogBaomingSaveDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILogBaomingSaveDo
	WriteDB() ILogBaomingSaveDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILogBaomingSaveDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILogBaomingSaveDo
	Not(conds ...gen.Condition) ILogBaomingSaveDo
	Or(conds ...gen.Condition) ILogBaomingSaveDo
	Select(conds ...field.Expr) ILogBaomingSaveDo
	Where(conds ...gen.Condition) ILogBaomingSaveDo
	Order(conds ...field.Expr) ILogBaomingSaveDo
	Distinct(cols ...field.Expr) ILogBaomingSaveDo
	Omit(cols ...field.Expr) ILogBaomingSaveDo
	Join(table schema.Tabler, on ...field.Expr) ILogBaomingSaveDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILogBaomingSaveDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILogBaomingSaveDo
	Group(cols ...field.Expr) ILogBaomingSaveDo
	Having(conds ...gen.Condition) ILogBaomingSaveDo
	Limit(limit int) ILogBaomingSaveDo
	Offset(offset int) ILogBaomingSaveDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILogBaomingSaveDo
	Unscoped() ILogBaomingSaveDo
	Create(values ...*model.LogBaomingSave) error
	CreateInBatches(values []*model.LogBaomingSave, batchSize int) error
	Save(values ...*model.LogBaomingSave) error
	First() (*model.LogBaomingSave, error)
	Take() (*model.LogBaomingSave, error)
	Last() (*model.LogBaomingSave, error)
	Find() ([]*model.LogBaomingSave, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogBaomingSave, err error)
	FindInBatches(result *[]*model.LogBaomingSave, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LogBaomingSave) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILogBaomingSaveDo
	Assign(attrs ...field.AssignExpr) ILogBaomingSaveDo
	Joins(fields ...field.RelationField) ILogBaomingSaveDo
	Preload(fields ...field.RelationField) ILogBaomingSaveDo
	FirstOrInit() (*model.LogBaomingSave, error)
	FirstOrCreate() (*model.LogBaomingSave, error)
	FindByPage(offset int, limit int) (result []*model.LogBaomingSave, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILogBaomingSaveDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l logBaomingSaveDo) Debug() ILogBaomingSaveDo {
	return l.withDO(l.DO.Debug())
}

func (l logBaomingSaveDo) WithContext(ctx context.Context) ILogBaomingSaveDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logBaomingSaveDo) ReadDB() ILogBaomingSaveDo {
	return l.Clauses(dbresolver.Read)
}

func (l logBaomingSaveDo) WriteDB() ILogBaomingSaveDo {
	return l.Clauses(dbresolver.Write)
}

func (l logBaomingSaveDo) Session(config *gorm.Session) ILogBaomingSaveDo {
	return l.withDO(l.DO.Session(config))
}

func (l logBaomingSaveDo) Clauses(conds ...clause.Expression) ILogBaomingSaveDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logBaomingSaveDo) Returning(value interface{}, columns ...string) ILogBaomingSaveDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logBaomingSaveDo) Not(conds ...gen.Condition) ILogBaomingSaveDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logBaomingSaveDo) Or(conds ...gen.Condition) ILogBaomingSaveDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logBaomingSaveDo) Select(conds ...field.Expr) ILogBaomingSaveDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logBaomingSaveDo) Where(conds ...gen.Condition) ILogBaomingSaveDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logBaomingSaveDo) Order(conds ...field.Expr) ILogBaomingSaveDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logBaomingSaveDo) Distinct(cols ...field.Expr) ILogBaomingSaveDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logBaomingSaveDo) Omit(cols ...field.Expr) ILogBaomingSaveDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logBaomingSaveDo) Join(table schema.Tabler, on ...field.Expr) ILogBaomingSaveDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logBaomingSaveDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILogBaomingSaveDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logBaomingSaveDo) RightJoin(table schema.Tabler, on ...field.Expr) ILogBaomingSaveDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logBaomingSaveDo) Group(cols ...field.Expr) ILogBaomingSaveDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logBaomingSaveDo) Having(conds ...gen.Condition) ILogBaomingSaveDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logBaomingSaveDo) Limit(limit int) ILogBaomingSaveDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logBaomingSaveDo) Offset(offset int) ILogBaomingSaveDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logBaomingSaveDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILogBaomingSaveDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logBaomingSaveDo) Unscoped() ILogBaomingSaveDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logBaomingSaveDo) Create(values ...*model.LogBaomingSave) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logBaomingSaveDo) CreateInBatches(values []*model.LogBaomingSave, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logBaomingSaveDo) Save(values ...*model.LogBaomingSave) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logBaomingSaveDo) First() (*model.LogBaomingSave, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogBaomingSave), nil
	}
}

func (l logBaomingSaveDo) Take() (*model.LogBaomingSave, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogBaomingSave), nil
	}
}

func (l logBaomingSaveDo) Last() (*model.LogBaomingSave, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogBaomingSave), nil
	}
}

func (l logBaomingSaveDo) Find() ([]*model.LogBaomingSave, error) {
	result, err := l.DO.Find()
	return result.([]*model.LogBaomingSave), err
}

func (l logBaomingSaveDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogBaomingSave, err error) {
	buf := make([]*model.LogBaomingSave, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logBaomingSaveDo) FindInBatches(result *[]*model.LogBaomingSave, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logBaomingSaveDo) Attrs(attrs ...field.AssignExpr) ILogBaomingSaveDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logBaomingSaveDo) Assign(attrs ...field.AssignExpr) ILogBaomingSaveDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logBaomingSaveDo) Joins(fields ...field.RelationField) ILogBaomingSaveDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logBaomingSaveDo) Preload(fields ...field.RelationField) ILogBaomingSaveDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logBaomingSaveDo) FirstOrInit() (*model.LogBaomingSave, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogBaomingSave), nil
	}
}

func (l logBaomingSaveDo) FirstOrCreate() (*model.LogBaomingSave, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogBaomingSave), nil
	}
}

func (l logBaomingSaveDo) FindByPage(offset int, limit int) (result []*model.LogBaomingSave, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logBaomingSaveDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logBaomingSaveDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logBaomingSaveDo) Delete(models ...*model.LogBaomingSave) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logBaomingSaveDo) withDO(do gen.Dao) *logBaomingSaveDo {
	l.DO = *do.(*gen.DO)
	return l
}
