// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package la_ba

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLotterylog1001User(db *gorm.DB, opts ...gen.DOOption) lotterylog1001User {
	_lotterylog1001User := lotterylog1001User{}

	_lotterylog1001User.lotterylog1001UserDo.UseDB(db, opts...)
	_lotterylog1001User.lotterylog1001UserDo.UseModel(&model.Lotterylog1001User{})

	tableName := _lotterylog1001User.lotterylog1001UserDo.TableName()
	_lotterylog1001User.ALL = field.NewAsterisk(tableName)
	_lotterylog1001User.ID = field.NewInt32(tableName, "id")
	_lotterylog1001User.Userid = field.NewInt32(tableName, "userid")
	_lotterylog1001User.Bet = field.NewInt32(tableName, "bet")
	_lotterylog1001User.LineS = field.NewInt32(tableName, "line_s")
	_lotterylog1001User.ScoreBefore = field.NewInt32(tableName, "score_before")
	_lotterylog1001User.ScoreLinescore = field.NewInt32(tableName, "score_linescore")
	_lotterylog1001User.ScoreWin = field.NewInt32(tableName, "score_win")
	_lotterylog1001User.ScoreCurrent = field.NewInt32(tableName, "score_current")
	_lotterylog1001User.FreeCountBefore = field.NewInt32(tableName, "free_count_before")
	_lotterylog1001User.FreeCountWin = field.NewInt32(tableName, "free_count_win")
	_lotterylog1001User.FreeCountCurrent = field.NewInt32(tableName, "free_count_current")
	_lotterylog1001User.ResultArray = field.NewString(tableName, "result_array")
	_lotterylog1001User.LotteryTime = field.NewTime(tableName, "lotteryTime")
	_lotterylog1001User.Mark = field.NewBool(tableName, "mark")

	_lotterylog1001User.fillFieldMap()

	return _lotterylog1001User
}

type lotterylog1001User struct {
	lotterylog1001UserDo

	ALL              field.Asterisk
	ID               field.Int32
	Userid           field.Int32
	Bet              field.Int32
	LineS            field.Int32
	ScoreBefore      field.Int32
	ScoreLinescore   field.Int32
	ScoreWin         field.Int32
	ScoreCurrent     field.Int32
	FreeCountBefore  field.Int32
	FreeCountWin     field.Int32
	FreeCountCurrent field.Int32
	ResultArray      field.String
	LotteryTime      field.Time
	Mark             field.Bool

	fieldMap map[string]field.Expr
}

func (l lotterylog1001User) Table(newTableName string) *lotterylog1001User {
	l.lotterylog1001UserDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lotterylog1001User) As(alias string) *lotterylog1001User {
	l.lotterylog1001UserDo.DO = *(l.lotterylog1001UserDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lotterylog1001User) updateTableName(table string) *lotterylog1001User {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Userid = field.NewInt32(table, "userid")
	l.Bet = field.NewInt32(table, "bet")
	l.LineS = field.NewInt32(table, "line_s")
	l.ScoreBefore = field.NewInt32(table, "score_before")
	l.ScoreLinescore = field.NewInt32(table, "score_linescore")
	l.ScoreWin = field.NewInt32(table, "score_win")
	l.ScoreCurrent = field.NewInt32(table, "score_current")
	l.FreeCountBefore = field.NewInt32(table, "free_count_before")
	l.FreeCountWin = field.NewInt32(table, "free_count_win")
	l.FreeCountCurrent = field.NewInt32(table, "free_count_current")
	l.ResultArray = field.NewString(table, "result_array")
	l.LotteryTime = field.NewTime(table, "lotteryTime")
	l.Mark = field.NewBool(table, "mark")

	l.fillFieldMap()

	return l
}

func (l *lotterylog1001User) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lotterylog1001User) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["id"] = l.ID
	l.fieldMap["userid"] = l.Userid
	l.fieldMap["bet"] = l.Bet
	l.fieldMap["line_s"] = l.LineS
	l.fieldMap["score_before"] = l.ScoreBefore
	l.fieldMap["score_linescore"] = l.ScoreLinescore
	l.fieldMap["score_win"] = l.ScoreWin
	l.fieldMap["score_current"] = l.ScoreCurrent
	l.fieldMap["free_count_before"] = l.FreeCountBefore
	l.fieldMap["free_count_win"] = l.FreeCountWin
	l.fieldMap["free_count_current"] = l.FreeCountCurrent
	l.fieldMap["result_array"] = l.ResultArray
	l.fieldMap["lotteryTime"] = l.LotteryTime
	l.fieldMap["mark"] = l.Mark
}

func (l lotterylog1001User) clone(db *gorm.DB) lotterylog1001User {
	l.lotterylog1001UserDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lotterylog1001User) replaceDB(db *gorm.DB) lotterylog1001User {
	l.lotterylog1001UserDo.ReplaceDB(db)
	return l
}

type lotterylog1001UserDo struct{ gen.DO }

type ILotterylog1001UserDo interface {
	gen.SubQuery
	Debug() ILotterylog1001UserDo
	WithContext(ctx context.Context) ILotterylog1001UserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILotterylog1001UserDo
	WriteDB() ILotterylog1001UserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILotterylog1001UserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILotterylog1001UserDo
	Not(conds ...gen.Condition) ILotterylog1001UserDo
	Or(conds ...gen.Condition) ILotterylog1001UserDo
	Select(conds ...field.Expr) ILotterylog1001UserDo
	Where(conds ...gen.Condition) ILotterylog1001UserDo
	Order(conds ...field.Expr) ILotterylog1001UserDo
	Distinct(cols ...field.Expr) ILotterylog1001UserDo
	Omit(cols ...field.Expr) ILotterylog1001UserDo
	Join(table schema.Tabler, on ...field.Expr) ILotterylog1001UserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog1001UserDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog1001UserDo
	Group(cols ...field.Expr) ILotterylog1001UserDo
	Having(conds ...gen.Condition) ILotterylog1001UserDo
	Limit(limit int) ILotterylog1001UserDo
	Offset(offset int) ILotterylog1001UserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog1001UserDo
	Unscoped() ILotterylog1001UserDo
	Create(values ...*model.Lotterylog1001User) error
	CreateInBatches(values []*model.Lotterylog1001User, batchSize int) error
	Save(values ...*model.Lotterylog1001User) error
	First() (*model.Lotterylog1001User, error)
	Take() (*model.Lotterylog1001User, error)
	Last() (*model.Lotterylog1001User, error)
	Find() ([]*model.Lotterylog1001User, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog1001User, err error)
	FindInBatches(result *[]*model.Lotterylog1001User, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lotterylog1001User) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILotterylog1001UserDo
	Assign(attrs ...field.AssignExpr) ILotterylog1001UserDo
	Joins(fields ...field.RelationField) ILotterylog1001UserDo
	Preload(fields ...field.RelationField) ILotterylog1001UserDo
	FirstOrInit() (*model.Lotterylog1001User, error)
	FirstOrCreate() (*model.Lotterylog1001User, error)
	FindByPage(offset int, limit int) (result []*model.Lotterylog1001User, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILotterylog1001UserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lotterylog1001UserDo) Debug() ILotterylog1001UserDo {
	return l.withDO(l.DO.Debug())
}

func (l lotterylog1001UserDo) WithContext(ctx context.Context) ILotterylog1001UserDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lotterylog1001UserDo) ReadDB() ILotterylog1001UserDo {
	return l.Clauses(dbresolver.Read)
}

func (l lotterylog1001UserDo) WriteDB() ILotterylog1001UserDo {
	return l.Clauses(dbresolver.Write)
}

func (l lotterylog1001UserDo) Session(config *gorm.Session) ILotterylog1001UserDo {
	return l.withDO(l.DO.Session(config))
}

func (l lotterylog1001UserDo) Clauses(conds ...clause.Expression) ILotterylog1001UserDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lotterylog1001UserDo) Returning(value interface{}, columns ...string) ILotterylog1001UserDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lotterylog1001UserDo) Not(conds ...gen.Condition) ILotterylog1001UserDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lotterylog1001UserDo) Or(conds ...gen.Condition) ILotterylog1001UserDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lotterylog1001UserDo) Select(conds ...field.Expr) ILotterylog1001UserDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lotterylog1001UserDo) Where(conds ...gen.Condition) ILotterylog1001UserDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lotterylog1001UserDo) Order(conds ...field.Expr) ILotterylog1001UserDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lotterylog1001UserDo) Distinct(cols ...field.Expr) ILotterylog1001UserDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lotterylog1001UserDo) Omit(cols ...field.Expr) ILotterylog1001UserDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lotterylog1001UserDo) Join(table schema.Tabler, on ...field.Expr) ILotterylog1001UserDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lotterylog1001UserDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog1001UserDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lotterylog1001UserDo) RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog1001UserDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lotterylog1001UserDo) Group(cols ...field.Expr) ILotterylog1001UserDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lotterylog1001UserDo) Having(conds ...gen.Condition) ILotterylog1001UserDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lotterylog1001UserDo) Limit(limit int) ILotterylog1001UserDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lotterylog1001UserDo) Offset(offset int) ILotterylog1001UserDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lotterylog1001UserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog1001UserDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lotterylog1001UserDo) Unscoped() ILotterylog1001UserDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lotterylog1001UserDo) Create(values ...*model.Lotterylog1001User) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lotterylog1001UserDo) CreateInBatches(values []*model.Lotterylog1001User, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lotterylog1001UserDo) Save(values ...*model.Lotterylog1001User) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lotterylog1001UserDo) First() (*model.Lotterylog1001User, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog1001User), nil
	}
}

func (l lotterylog1001UserDo) Take() (*model.Lotterylog1001User, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog1001User), nil
	}
}

func (l lotterylog1001UserDo) Last() (*model.Lotterylog1001User, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog1001User), nil
	}
}

func (l lotterylog1001UserDo) Find() ([]*model.Lotterylog1001User, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lotterylog1001User), err
}

func (l lotterylog1001UserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog1001User, err error) {
	buf := make([]*model.Lotterylog1001User, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lotterylog1001UserDo) FindInBatches(result *[]*model.Lotterylog1001User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lotterylog1001UserDo) Attrs(attrs ...field.AssignExpr) ILotterylog1001UserDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lotterylog1001UserDo) Assign(attrs ...field.AssignExpr) ILotterylog1001UserDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lotterylog1001UserDo) Joins(fields ...field.RelationField) ILotterylog1001UserDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lotterylog1001UserDo) Preload(fields ...field.RelationField) ILotterylog1001UserDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lotterylog1001UserDo) FirstOrInit() (*model.Lotterylog1001User, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog1001User), nil
	}
}

func (l lotterylog1001UserDo) FirstOrCreate() (*model.Lotterylog1001User, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog1001User), nil
	}
}

func (l lotterylog1001UserDo) FindByPage(offset int, limit int) (result []*model.Lotterylog1001User, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lotterylog1001UserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lotterylog1001UserDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lotterylog1001UserDo) Delete(models ...*model.Lotterylog1001User) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lotterylog1001UserDo) withDO(do gen.Dao) *lotterylog1001UserDo {
	l.DO = *do.(*gen.DO)
	return l
}
