// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fish

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newWincoin(db *gorm.DB, opts ...gen.DOOption) wincoin {
	_wincoin := wincoin{}

	_wincoin.wincoinDo.UseDB(db, opts...)
	_wincoin.wincoinDo.UseModel(&model.Wincoin{})

	tableName := _wincoin.wincoinDo.TableName()
	_wincoin.ALL = field.NewAsterisk(tableName)
	_wincoin.UserID = field.NewInt32(tableName, "userId")
	_wincoin.Wincoin = field.NewInt32(tableName, "wincoin")
	_wincoin.Lv = field.NewInt32(tableName, "lv")

	_wincoin.fillFieldMap()

	return _wincoin
}

type wincoin struct {
	wincoinDo

	ALL     field.Asterisk
	UserID  field.Int32
	Wincoin field.Int32
	Lv      field.Int32

	fieldMap map[string]field.Expr
}

func (w wincoin) Table(newTableName string) *wincoin {
	w.wincoinDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wincoin) As(alias string) *wincoin {
	w.wincoinDo.DO = *(w.wincoinDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wincoin) updateTableName(table string) *wincoin {
	w.ALL = field.NewAsterisk(table)
	w.UserID = field.NewInt32(table, "userId")
	w.Wincoin = field.NewInt32(table, "wincoin")
	w.Lv = field.NewInt32(table, "lv")

	w.fillFieldMap()

	return w
}

func (w *wincoin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wincoin) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 3)
	w.fieldMap["userId"] = w.UserID
	w.fieldMap["wincoin"] = w.Wincoin
	w.fieldMap["lv"] = w.Lv
}

func (w wincoin) clone(db *gorm.DB) wincoin {
	w.wincoinDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wincoin) replaceDB(db *gorm.DB) wincoin {
	w.wincoinDo.ReplaceDB(db)
	return w
}

type wincoinDo struct{ gen.DO }

type IWincoinDo interface {
	gen.SubQuery
	Debug() IWincoinDo
	WithContext(ctx context.Context) IWincoinDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWincoinDo
	WriteDB() IWincoinDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWincoinDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWincoinDo
	Not(conds ...gen.Condition) IWincoinDo
	Or(conds ...gen.Condition) IWincoinDo
	Select(conds ...field.Expr) IWincoinDo
	Where(conds ...gen.Condition) IWincoinDo
	Order(conds ...field.Expr) IWincoinDo
	Distinct(cols ...field.Expr) IWincoinDo
	Omit(cols ...field.Expr) IWincoinDo
	Join(table schema.Tabler, on ...field.Expr) IWincoinDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWincoinDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWincoinDo
	Group(cols ...field.Expr) IWincoinDo
	Having(conds ...gen.Condition) IWincoinDo
	Limit(limit int) IWincoinDo
	Offset(offset int) IWincoinDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWincoinDo
	Unscoped() IWincoinDo
	Create(values ...*model.Wincoin) error
	CreateInBatches(values []*model.Wincoin, batchSize int) error
	Save(values ...*model.Wincoin) error
	First() (*model.Wincoin, error)
	Take() (*model.Wincoin, error)
	Last() (*model.Wincoin, error)
	Find() ([]*model.Wincoin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Wincoin, err error)
	FindInBatches(result *[]*model.Wincoin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Wincoin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWincoinDo
	Assign(attrs ...field.AssignExpr) IWincoinDo
	Joins(fields ...field.RelationField) IWincoinDo
	Preload(fields ...field.RelationField) IWincoinDo
	FirstOrInit() (*model.Wincoin, error)
	FirstOrCreate() (*model.Wincoin, error)
	FindByPage(offset int, limit int) (result []*model.Wincoin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWincoinDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wincoinDo) Debug() IWincoinDo {
	return w.withDO(w.DO.Debug())
}

func (w wincoinDo) WithContext(ctx context.Context) IWincoinDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wincoinDo) ReadDB() IWincoinDo {
	return w.Clauses(dbresolver.Read)
}

func (w wincoinDo) WriteDB() IWincoinDo {
	return w.Clauses(dbresolver.Write)
}

func (w wincoinDo) Session(config *gorm.Session) IWincoinDo {
	return w.withDO(w.DO.Session(config))
}

func (w wincoinDo) Clauses(conds ...clause.Expression) IWincoinDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wincoinDo) Returning(value interface{}, columns ...string) IWincoinDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wincoinDo) Not(conds ...gen.Condition) IWincoinDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wincoinDo) Or(conds ...gen.Condition) IWincoinDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wincoinDo) Select(conds ...field.Expr) IWincoinDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wincoinDo) Where(conds ...gen.Condition) IWincoinDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wincoinDo) Order(conds ...field.Expr) IWincoinDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wincoinDo) Distinct(cols ...field.Expr) IWincoinDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wincoinDo) Omit(cols ...field.Expr) IWincoinDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wincoinDo) Join(table schema.Tabler, on ...field.Expr) IWincoinDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wincoinDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWincoinDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wincoinDo) RightJoin(table schema.Tabler, on ...field.Expr) IWincoinDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wincoinDo) Group(cols ...field.Expr) IWincoinDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wincoinDo) Having(conds ...gen.Condition) IWincoinDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wincoinDo) Limit(limit int) IWincoinDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wincoinDo) Offset(offset int) IWincoinDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wincoinDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWincoinDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wincoinDo) Unscoped() IWincoinDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wincoinDo) Create(values ...*model.Wincoin) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wincoinDo) CreateInBatches(values []*model.Wincoin, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wincoinDo) Save(values ...*model.Wincoin) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wincoinDo) First() (*model.Wincoin, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wincoin), nil
	}
}

func (w wincoinDo) Take() (*model.Wincoin, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wincoin), nil
	}
}

func (w wincoinDo) Last() (*model.Wincoin, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wincoin), nil
	}
}

func (w wincoinDo) Find() ([]*model.Wincoin, error) {
	result, err := w.DO.Find()
	return result.([]*model.Wincoin), err
}

func (w wincoinDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Wincoin, err error) {
	buf := make([]*model.Wincoin, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wincoinDo) FindInBatches(result *[]*model.Wincoin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wincoinDo) Attrs(attrs ...field.AssignExpr) IWincoinDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wincoinDo) Assign(attrs ...field.AssignExpr) IWincoinDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wincoinDo) Joins(fields ...field.RelationField) IWincoinDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wincoinDo) Preload(fields ...field.RelationField) IWincoinDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wincoinDo) FirstOrInit() (*model.Wincoin, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wincoin), nil
	}
}

func (w wincoinDo) FirstOrCreate() (*model.Wincoin, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wincoin), nil
	}
}

func (w wincoinDo) FindByPage(offset int, limit int) (result []*model.Wincoin, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wincoinDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wincoinDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wincoinDo) Delete(models ...*model.Wincoin) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wincoinDo) withDO(do gen.Dao) *wincoinDo {
	w.DO = *do.(*gen.DO)
	return w
}
