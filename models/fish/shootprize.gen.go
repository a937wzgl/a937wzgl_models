// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fish

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newShootprize(db *gorm.DB, opts ...gen.DOOption) shootprize {
	_shootprize := shootprize{}

	_shootprize.shootprizeDo.UseDB(db, opts...)
	_shootprize.shootprizeDo.UseModel(&model.Shootprize{})

	tableName := _shootprize.shootprizeDo.TableName()
	_shootprize.ALL = field.NewAsterisk(tableName)
	_shootprize.Lv = field.NewInt32(tableName, "lv")
	_shootprize.Value = field.NewInt32(tableName, "value")
	_shootprize.Propid = field.NewInt32(tableName, "propid")
	_shootprize.Propcount = field.NewInt32(tableName, "propcount")
	_shootprize.Winsocre = field.NewInt32(tableName, "winsocre")

	_shootprize.fillFieldMap()

	return _shootprize
}

type shootprize struct {
	shootprizeDo

	ALL       field.Asterisk
	Lv        field.Int32
	Value     field.Int32
	Propid    field.Int32 // 道具id
	Propcount field.Int32 // 道具count
	Winsocre  field.Int32 // 获得金钱

	fieldMap map[string]field.Expr
}

func (s shootprize) Table(newTableName string) *shootprize {
	s.shootprizeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shootprize) As(alias string) *shootprize {
	s.shootprizeDo.DO = *(s.shootprizeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shootprize) updateTableName(table string) *shootprize {
	s.ALL = field.NewAsterisk(table)
	s.Lv = field.NewInt32(table, "lv")
	s.Value = field.NewInt32(table, "value")
	s.Propid = field.NewInt32(table, "propid")
	s.Propcount = field.NewInt32(table, "propcount")
	s.Winsocre = field.NewInt32(table, "winsocre")

	s.fillFieldMap()

	return s
}

func (s *shootprize) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shootprize) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["lv"] = s.Lv
	s.fieldMap["value"] = s.Value
	s.fieldMap["propid"] = s.Propid
	s.fieldMap["propcount"] = s.Propcount
	s.fieldMap["winsocre"] = s.Winsocre
}

func (s shootprize) clone(db *gorm.DB) shootprize {
	s.shootprizeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shootprize) replaceDB(db *gorm.DB) shootprize {
	s.shootprizeDo.ReplaceDB(db)
	return s
}

type shootprizeDo struct{ gen.DO }

type IShootprizeDo interface {
	gen.SubQuery
	Debug() IShootprizeDo
	WithContext(ctx context.Context) IShootprizeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IShootprizeDo
	WriteDB() IShootprizeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IShootprizeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IShootprizeDo
	Not(conds ...gen.Condition) IShootprizeDo
	Or(conds ...gen.Condition) IShootprizeDo
	Select(conds ...field.Expr) IShootprizeDo
	Where(conds ...gen.Condition) IShootprizeDo
	Order(conds ...field.Expr) IShootprizeDo
	Distinct(cols ...field.Expr) IShootprizeDo
	Omit(cols ...field.Expr) IShootprizeDo
	Join(table schema.Tabler, on ...field.Expr) IShootprizeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IShootprizeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IShootprizeDo
	Group(cols ...field.Expr) IShootprizeDo
	Having(conds ...gen.Condition) IShootprizeDo
	Limit(limit int) IShootprizeDo
	Offset(offset int) IShootprizeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IShootprizeDo
	Unscoped() IShootprizeDo
	Create(values ...*model.Shootprize) error
	CreateInBatches(values []*model.Shootprize, batchSize int) error
	Save(values ...*model.Shootprize) error
	First() (*model.Shootprize, error)
	Take() (*model.Shootprize, error)
	Last() (*model.Shootprize, error)
	Find() ([]*model.Shootprize, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Shootprize, err error)
	FindInBatches(result *[]*model.Shootprize, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Shootprize) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IShootprizeDo
	Assign(attrs ...field.AssignExpr) IShootprizeDo
	Joins(fields ...field.RelationField) IShootprizeDo
	Preload(fields ...field.RelationField) IShootprizeDo
	FirstOrInit() (*model.Shootprize, error)
	FirstOrCreate() (*model.Shootprize, error)
	FindByPage(offset int, limit int) (result []*model.Shootprize, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IShootprizeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s shootprizeDo) Debug() IShootprizeDo {
	return s.withDO(s.DO.Debug())
}

func (s shootprizeDo) WithContext(ctx context.Context) IShootprizeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shootprizeDo) ReadDB() IShootprizeDo {
	return s.Clauses(dbresolver.Read)
}

func (s shootprizeDo) WriteDB() IShootprizeDo {
	return s.Clauses(dbresolver.Write)
}

func (s shootprizeDo) Session(config *gorm.Session) IShootprizeDo {
	return s.withDO(s.DO.Session(config))
}

func (s shootprizeDo) Clauses(conds ...clause.Expression) IShootprizeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shootprizeDo) Returning(value interface{}, columns ...string) IShootprizeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shootprizeDo) Not(conds ...gen.Condition) IShootprizeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shootprizeDo) Or(conds ...gen.Condition) IShootprizeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shootprizeDo) Select(conds ...field.Expr) IShootprizeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shootprizeDo) Where(conds ...gen.Condition) IShootprizeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shootprizeDo) Order(conds ...field.Expr) IShootprizeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shootprizeDo) Distinct(cols ...field.Expr) IShootprizeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shootprizeDo) Omit(cols ...field.Expr) IShootprizeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shootprizeDo) Join(table schema.Tabler, on ...field.Expr) IShootprizeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shootprizeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IShootprizeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shootprizeDo) RightJoin(table schema.Tabler, on ...field.Expr) IShootprizeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shootprizeDo) Group(cols ...field.Expr) IShootprizeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shootprizeDo) Having(conds ...gen.Condition) IShootprizeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shootprizeDo) Limit(limit int) IShootprizeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shootprizeDo) Offset(offset int) IShootprizeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shootprizeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IShootprizeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shootprizeDo) Unscoped() IShootprizeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shootprizeDo) Create(values ...*model.Shootprize) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shootprizeDo) CreateInBatches(values []*model.Shootprize, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shootprizeDo) Save(values ...*model.Shootprize) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shootprizeDo) First() (*model.Shootprize, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Shootprize), nil
	}
}

func (s shootprizeDo) Take() (*model.Shootprize, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Shootprize), nil
	}
}

func (s shootprizeDo) Last() (*model.Shootprize, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Shootprize), nil
	}
}

func (s shootprizeDo) Find() ([]*model.Shootprize, error) {
	result, err := s.DO.Find()
	return result.([]*model.Shootprize), err
}

func (s shootprizeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Shootprize, err error) {
	buf := make([]*model.Shootprize, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shootprizeDo) FindInBatches(result *[]*model.Shootprize, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shootprizeDo) Attrs(attrs ...field.AssignExpr) IShootprizeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shootprizeDo) Assign(attrs ...field.AssignExpr) IShootprizeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shootprizeDo) Joins(fields ...field.RelationField) IShootprizeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shootprizeDo) Preload(fields ...field.RelationField) IShootprizeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shootprizeDo) FirstOrInit() (*model.Shootprize, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Shootprize), nil
	}
}

func (s shootprizeDo) FirstOrCreate() (*model.Shootprize, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Shootprize), nil
	}
}

func (s shootprizeDo) FindByPage(offset int, limit int) (result []*model.Shootprize, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shootprizeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shootprizeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shootprizeDo) Delete(models ...*model.Shootprize) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shootprizeDo) withDO(do gen.Dao) *shootprizeDo {
	s.DO = *do.(*gen.DO)
	return s
}
