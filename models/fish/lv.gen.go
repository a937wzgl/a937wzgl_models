// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package fish

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLv(db *gorm.DB, opts ...gen.DOOption) lv {
	_lv := lv{}

	_lv.lvDo.UseDB(db, opts...)
	_lv.lvDo.UseModel(&model.Lv{})

	tableName := _lv.lvDo.TableName()
	_lv.ALL = field.NewAsterisk(tableName)
	_lv.Lv = field.NewInt32(tableName, "lv")
	_lv.Wincoinvalue = field.NewInt32(tableName, "wincoinvalue")

	_lv.fillFieldMap()

	return _lv
}

type lv struct {
	lvDo

	ALL          field.Asterisk
	Lv           field.Int32
	Wincoinvalue field.Int32

	fieldMap map[string]field.Expr
}

func (l lv) Table(newTableName string) *lv {
	l.lvDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lv) As(alias string) *lv {
	l.lvDo.DO = *(l.lvDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lv) updateTableName(table string) *lv {
	l.ALL = field.NewAsterisk(table)
	l.Lv = field.NewInt32(table, "lv")
	l.Wincoinvalue = field.NewInt32(table, "wincoinvalue")

	l.fillFieldMap()

	return l
}

func (l *lv) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lv) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 2)
	l.fieldMap["lv"] = l.Lv
	l.fieldMap["wincoinvalue"] = l.Wincoinvalue
}

func (l lv) clone(db *gorm.DB) lv {
	l.lvDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lv) replaceDB(db *gorm.DB) lv {
	l.lvDo.ReplaceDB(db)
	return l
}

type lvDo struct{ gen.DO }

type ILvDo interface {
	gen.SubQuery
	Debug() ILvDo
	WithContext(ctx context.Context) ILvDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILvDo
	WriteDB() ILvDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILvDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILvDo
	Not(conds ...gen.Condition) ILvDo
	Or(conds ...gen.Condition) ILvDo
	Select(conds ...field.Expr) ILvDo
	Where(conds ...gen.Condition) ILvDo
	Order(conds ...field.Expr) ILvDo
	Distinct(cols ...field.Expr) ILvDo
	Omit(cols ...field.Expr) ILvDo
	Join(table schema.Tabler, on ...field.Expr) ILvDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILvDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILvDo
	Group(cols ...field.Expr) ILvDo
	Having(conds ...gen.Condition) ILvDo
	Limit(limit int) ILvDo
	Offset(offset int) ILvDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILvDo
	Unscoped() ILvDo
	Create(values ...*model.Lv) error
	CreateInBatches(values []*model.Lv, batchSize int) error
	Save(values ...*model.Lv) error
	First() (*model.Lv, error)
	Take() (*model.Lv, error)
	Last() (*model.Lv, error)
	Find() ([]*model.Lv, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lv, err error)
	FindInBatches(result *[]*model.Lv, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lv) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILvDo
	Assign(attrs ...field.AssignExpr) ILvDo
	Joins(fields ...field.RelationField) ILvDo
	Preload(fields ...field.RelationField) ILvDo
	FirstOrInit() (*model.Lv, error)
	FirstOrCreate() (*model.Lv, error)
	FindByPage(offset int, limit int) (result []*model.Lv, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILvDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lvDo) Debug() ILvDo {
	return l.withDO(l.DO.Debug())
}

func (l lvDo) WithContext(ctx context.Context) ILvDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lvDo) ReadDB() ILvDo {
	return l.Clauses(dbresolver.Read)
}

func (l lvDo) WriteDB() ILvDo {
	return l.Clauses(dbresolver.Write)
}

func (l lvDo) Session(config *gorm.Session) ILvDo {
	return l.withDO(l.DO.Session(config))
}

func (l lvDo) Clauses(conds ...clause.Expression) ILvDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lvDo) Returning(value interface{}, columns ...string) ILvDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lvDo) Not(conds ...gen.Condition) ILvDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lvDo) Or(conds ...gen.Condition) ILvDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lvDo) Select(conds ...field.Expr) ILvDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lvDo) Where(conds ...gen.Condition) ILvDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lvDo) Order(conds ...field.Expr) ILvDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lvDo) Distinct(cols ...field.Expr) ILvDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lvDo) Omit(cols ...field.Expr) ILvDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lvDo) Join(table schema.Tabler, on ...field.Expr) ILvDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lvDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILvDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lvDo) RightJoin(table schema.Tabler, on ...field.Expr) ILvDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lvDo) Group(cols ...field.Expr) ILvDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lvDo) Having(conds ...gen.Condition) ILvDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lvDo) Limit(limit int) ILvDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lvDo) Offset(offset int) ILvDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lvDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILvDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lvDo) Unscoped() ILvDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lvDo) Create(values ...*model.Lv) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lvDo) CreateInBatches(values []*model.Lv, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lvDo) Save(values ...*model.Lv) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lvDo) First() (*model.Lv, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lv), nil
	}
}

func (l lvDo) Take() (*model.Lv, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lv), nil
	}
}

func (l lvDo) Last() (*model.Lv, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lv), nil
	}
}

func (l lvDo) Find() ([]*model.Lv, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lv), err
}

func (l lvDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lv, err error) {
	buf := make([]*model.Lv, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lvDo) FindInBatches(result *[]*model.Lv, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lvDo) Attrs(attrs ...field.AssignExpr) ILvDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lvDo) Assign(attrs ...field.AssignExpr) ILvDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lvDo) Joins(fields ...field.RelationField) ILvDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lvDo) Preload(fields ...field.RelationField) ILvDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lvDo) FirstOrInit() (*model.Lv, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lv), nil
	}
}

func (l lvDo) FirstOrCreate() (*model.Lv, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lv), nil
	}
}

func (l lvDo) FindByPage(offset int, limit int) (result []*model.Lv, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lvDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lvDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lvDo) Delete(models ...*model.Lv) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lvDo) withDO(do gen.Dao) *lvDo {
	l.DO = *do.(*gen.DO)
	return l
}
