// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newRechargelogKefu(db *gorm.DB, opts ...gen.DOOption) rechargelogKefu {
	_rechargelogKefu := rechargelogKefu{}

	_rechargelogKefu.rechargelogKefuDo.UseDB(db, opts...)
	_rechargelogKefu.rechargelogKefuDo.UseModel(&model.RechargelogKefu{})

	tableName := _rechargelogKefu.rechargelogKefuDo.TableName()
	_rechargelogKefu.ALL = field.NewAsterisk(tableName)
	_rechargelogKefu.ID = field.NewUint32(tableName, "id")
	_rechargelogKefu.Adminid = field.NewUint32(tableName, "adminid")
	_rechargelogKefu.Kefuid = field.NewUint32(tableName, "kefuid")
	_rechargelogKefu.Createtime = field.NewString(tableName, "createtime")
	_rechargelogKefu.Czfee = field.NewUint64(tableName, "czfee")
	_rechargelogKefu.Oldfee = field.NewUint64(tableName, "oldfee")
	_rechargelogKefu.Newfee = field.NewUint64(tableName, "newfee")
	_rechargelogKefu.Type = field.NewBool(tableName, "type")

	_rechargelogKefu.fillFieldMap()

	return _rechargelogKefu
}

type rechargelogKefu struct {
	rechargelogKefuDo

	ALL        field.Asterisk
	ID         field.Uint32
	Adminid    field.Uint32
	Kefuid     field.Uint32
	Createtime field.String
	Czfee      field.Uint64
	Oldfee     field.Uint64
	Newfee     field.Uint64
	Type       field.Bool // 0 -  1 +

	fieldMap map[string]field.Expr
}

func (r rechargelogKefu) Table(newTableName string) *rechargelogKefu {
	r.rechargelogKefuDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rechargelogKefu) As(alias string) *rechargelogKefu {
	r.rechargelogKefuDo.DO = *(r.rechargelogKefuDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rechargelogKefu) updateTableName(table string) *rechargelogKefu {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint32(table, "id")
	r.Adminid = field.NewUint32(table, "adminid")
	r.Kefuid = field.NewUint32(table, "kefuid")
	r.Createtime = field.NewString(table, "createtime")
	r.Czfee = field.NewUint64(table, "czfee")
	r.Oldfee = field.NewUint64(table, "oldfee")
	r.Newfee = field.NewUint64(table, "newfee")
	r.Type = field.NewBool(table, "type")

	r.fillFieldMap()

	return r
}

func (r *rechargelogKefu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rechargelogKefu) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["adminid"] = r.Adminid
	r.fieldMap["kefuid"] = r.Kefuid
	r.fieldMap["createtime"] = r.Createtime
	r.fieldMap["czfee"] = r.Czfee
	r.fieldMap["oldfee"] = r.Oldfee
	r.fieldMap["newfee"] = r.Newfee
	r.fieldMap["type"] = r.Type
}

func (r rechargelogKefu) clone(db *gorm.DB) rechargelogKefu {
	r.rechargelogKefuDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rechargelogKefu) replaceDB(db *gorm.DB) rechargelogKefu {
	r.rechargelogKefuDo.ReplaceDB(db)
	return r
}

type rechargelogKefuDo struct{ gen.DO }

type IRechargelogKefuDo interface {
	gen.SubQuery
	Debug() IRechargelogKefuDo
	WithContext(ctx context.Context) IRechargelogKefuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRechargelogKefuDo
	WriteDB() IRechargelogKefuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRechargelogKefuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRechargelogKefuDo
	Not(conds ...gen.Condition) IRechargelogKefuDo
	Or(conds ...gen.Condition) IRechargelogKefuDo
	Select(conds ...field.Expr) IRechargelogKefuDo
	Where(conds ...gen.Condition) IRechargelogKefuDo
	Order(conds ...field.Expr) IRechargelogKefuDo
	Distinct(cols ...field.Expr) IRechargelogKefuDo
	Omit(cols ...field.Expr) IRechargelogKefuDo
	Join(table schema.Tabler, on ...field.Expr) IRechargelogKefuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRechargelogKefuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRechargelogKefuDo
	Group(cols ...field.Expr) IRechargelogKefuDo
	Having(conds ...gen.Condition) IRechargelogKefuDo
	Limit(limit int) IRechargelogKefuDo
	Offset(offset int) IRechargelogKefuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargelogKefuDo
	Unscoped() IRechargelogKefuDo
	Create(values ...*model.RechargelogKefu) error
	CreateInBatches(values []*model.RechargelogKefu, batchSize int) error
	Save(values ...*model.RechargelogKefu) error
	First() (*model.RechargelogKefu, error)
	Take() (*model.RechargelogKefu, error)
	Last() (*model.RechargelogKefu, error)
	Find() ([]*model.RechargelogKefu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RechargelogKefu, err error)
	FindInBatches(result *[]*model.RechargelogKefu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RechargelogKefu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRechargelogKefuDo
	Assign(attrs ...field.AssignExpr) IRechargelogKefuDo
	Joins(fields ...field.RelationField) IRechargelogKefuDo
	Preload(fields ...field.RelationField) IRechargelogKefuDo
	FirstOrInit() (*model.RechargelogKefu, error)
	FirstOrCreate() (*model.RechargelogKefu, error)
	FindByPage(offset int, limit int) (result []*model.RechargelogKefu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRechargelogKefuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rechargelogKefuDo) Debug() IRechargelogKefuDo {
	return r.withDO(r.DO.Debug())
}

func (r rechargelogKefuDo) WithContext(ctx context.Context) IRechargelogKefuDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rechargelogKefuDo) ReadDB() IRechargelogKefuDo {
	return r.Clauses(dbresolver.Read)
}

func (r rechargelogKefuDo) WriteDB() IRechargelogKefuDo {
	return r.Clauses(dbresolver.Write)
}

func (r rechargelogKefuDo) Session(config *gorm.Session) IRechargelogKefuDo {
	return r.withDO(r.DO.Session(config))
}

func (r rechargelogKefuDo) Clauses(conds ...clause.Expression) IRechargelogKefuDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rechargelogKefuDo) Returning(value interface{}, columns ...string) IRechargelogKefuDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rechargelogKefuDo) Not(conds ...gen.Condition) IRechargelogKefuDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rechargelogKefuDo) Or(conds ...gen.Condition) IRechargelogKefuDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rechargelogKefuDo) Select(conds ...field.Expr) IRechargelogKefuDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rechargelogKefuDo) Where(conds ...gen.Condition) IRechargelogKefuDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rechargelogKefuDo) Order(conds ...field.Expr) IRechargelogKefuDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rechargelogKefuDo) Distinct(cols ...field.Expr) IRechargelogKefuDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rechargelogKefuDo) Omit(cols ...field.Expr) IRechargelogKefuDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rechargelogKefuDo) Join(table schema.Tabler, on ...field.Expr) IRechargelogKefuDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rechargelogKefuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRechargelogKefuDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rechargelogKefuDo) RightJoin(table schema.Tabler, on ...field.Expr) IRechargelogKefuDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rechargelogKefuDo) Group(cols ...field.Expr) IRechargelogKefuDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rechargelogKefuDo) Having(conds ...gen.Condition) IRechargelogKefuDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rechargelogKefuDo) Limit(limit int) IRechargelogKefuDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rechargelogKefuDo) Offset(offset int) IRechargelogKefuDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rechargelogKefuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargelogKefuDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rechargelogKefuDo) Unscoped() IRechargelogKefuDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rechargelogKefuDo) Create(values ...*model.RechargelogKefu) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rechargelogKefuDo) CreateInBatches(values []*model.RechargelogKefu, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rechargelogKefuDo) Save(values ...*model.RechargelogKefu) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rechargelogKefuDo) First() (*model.RechargelogKefu, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogKefu), nil
	}
}

func (r rechargelogKefuDo) Take() (*model.RechargelogKefu, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogKefu), nil
	}
}

func (r rechargelogKefuDo) Last() (*model.RechargelogKefu, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogKefu), nil
	}
}

func (r rechargelogKefuDo) Find() ([]*model.RechargelogKefu, error) {
	result, err := r.DO.Find()
	return result.([]*model.RechargelogKefu), err
}

func (r rechargelogKefuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RechargelogKefu, err error) {
	buf := make([]*model.RechargelogKefu, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rechargelogKefuDo) FindInBatches(result *[]*model.RechargelogKefu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rechargelogKefuDo) Attrs(attrs ...field.AssignExpr) IRechargelogKefuDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rechargelogKefuDo) Assign(attrs ...field.AssignExpr) IRechargelogKefuDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rechargelogKefuDo) Joins(fields ...field.RelationField) IRechargelogKefuDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rechargelogKefuDo) Preload(fields ...field.RelationField) IRechargelogKefuDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rechargelogKefuDo) FirstOrInit() (*model.RechargelogKefu, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogKefu), nil
	}
}

func (r rechargelogKefuDo) FirstOrCreate() (*model.RechargelogKefu, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogKefu), nil
	}
}

func (r rechargelogKefuDo) FindByPage(offset int, limit int) (result []*model.RechargelogKefu, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rechargelogKefuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rechargelogKefuDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rechargelogKefuDo) Delete(models ...*model.RechargelogKefu) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rechargelogKefuDo) withDO(do gen.Dao) *rechargelogKefuDo {
	r.DO = *do.(*gen.DO)
	return r
}
