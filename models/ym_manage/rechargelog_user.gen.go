// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ym_manage

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newRechargelogUser(db *gorm.DB, opts ...gen.DOOption) rechargelogUser {
	_rechargelogUser := rechargelogUser{}

	_rechargelogUser.rechargelogUserDo.UseDB(db, opts...)
	_rechargelogUser.rechargelogUserDo.UseModel(&model.RechargelogUser{})

	tableName := _rechargelogUser.rechargelogUserDo.TableName()
	_rechargelogUser.ALL = field.NewAsterisk(tableName)
	_rechargelogUser.ID = field.NewUint32(tableName, "id")
	_rechargelogUser.Adminid = field.NewUint32(tableName, "adminid")
	_rechargelogUser.Userid = field.NewUint32(tableName, "userid")
	_rechargelogUser.Createtime = field.NewString(tableName, "createtime")
	_rechargelogUser.Czfee = field.NewUint64(tableName, "czfee")
	_rechargelogUser.Oldfee = field.NewUint64(tableName, "oldfee")
	_rechargelogUser.Newfee = field.NewUint64(tableName, "newfee")
	_rechargelogUser.Type = field.NewBool(tableName, "type")
	_rechargelogUser.Fromtype = field.NewUint32(tableName, "fromtype")

	_rechargelogUser.fillFieldMap()

	return _rechargelogUser
}

type rechargelogUser struct {
	rechargelogUserDo

	ALL        field.Asterisk
	ID         field.Uint32
	Adminid    field.Uint32
	Userid     field.Uint32
	Createtime field.String
	Czfee      field.Uint64
	Oldfee     field.Uint64
	Newfee     field.Uint64
	Type       field.Bool   // 0 -  1 +
	Fromtype   field.Uint32 // 1-5

	fieldMap map[string]field.Expr
}

func (r rechargelogUser) Table(newTableName string) *rechargelogUser {
	r.rechargelogUserDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rechargelogUser) As(alias string) *rechargelogUser {
	r.rechargelogUserDo.DO = *(r.rechargelogUserDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rechargelogUser) updateTableName(table string) *rechargelogUser {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint32(table, "id")
	r.Adminid = field.NewUint32(table, "adminid")
	r.Userid = field.NewUint32(table, "userid")
	r.Createtime = field.NewString(table, "createtime")
	r.Czfee = field.NewUint64(table, "czfee")
	r.Oldfee = field.NewUint64(table, "oldfee")
	r.Newfee = field.NewUint64(table, "newfee")
	r.Type = field.NewBool(table, "type")
	r.Fromtype = field.NewUint32(table, "fromtype")

	r.fillFieldMap()

	return r
}

func (r *rechargelogUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rechargelogUser) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["adminid"] = r.Adminid
	r.fieldMap["userid"] = r.Userid
	r.fieldMap["createtime"] = r.Createtime
	r.fieldMap["czfee"] = r.Czfee
	r.fieldMap["oldfee"] = r.Oldfee
	r.fieldMap["newfee"] = r.Newfee
	r.fieldMap["type"] = r.Type
	r.fieldMap["fromtype"] = r.Fromtype
}

func (r rechargelogUser) clone(db *gorm.DB) rechargelogUser {
	r.rechargelogUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rechargelogUser) replaceDB(db *gorm.DB) rechargelogUser {
	r.rechargelogUserDo.ReplaceDB(db)
	return r
}

type rechargelogUserDo struct{ gen.DO }

type IRechargelogUserDo interface {
	gen.SubQuery
	Debug() IRechargelogUserDo
	WithContext(ctx context.Context) IRechargelogUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRechargelogUserDo
	WriteDB() IRechargelogUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRechargelogUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRechargelogUserDo
	Not(conds ...gen.Condition) IRechargelogUserDo
	Or(conds ...gen.Condition) IRechargelogUserDo
	Select(conds ...field.Expr) IRechargelogUserDo
	Where(conds ...gen.Condition) IRechargelogUserDo
	Order(conds ...field.Expr) IRechargelogUserDo
	Distinct(cols ...field.Expr) IRechargelogUserDo
	Omit(cols ...field.Expr) IRechargelogUserDo
	Join(table schema.Tabler, on ...field.Expr) IRechargelogUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRechargelogUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRechargelogUserDo
	Group(cols ...field.Expr) IRechargelogUserDo
	Having(conds ...gen.Condition) IRechargelogUserDo
	Limit(limit int) IRechargelogUserDo
	Offset(offset int) IRechargelogUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargelogUserDo
	Unscoped() IRechargelogUserDo
	Create(values ...*model.RechargelogUser) error
	CreateInBatches(values []*model.RechargelogUser, batchSize int) error
	Save(values ...*model.RechargelogUser) error
	First() (*model.RechargelogUser, error)
	Take() (*model.RechargelogUser, error)
	Last() (*model.RechargelogUser, error)
	Find() ([]*model.RechargelogUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RechargelogUser, err error)
	FindInBatches(result *[]*model.RechargelogUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RechargelogUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRechargelogUserDo
	Assign(attrs ...field.AssignExpr) IRechargelogUserDo
	Joins(fields ...field.RelationField) IRechargelogUserDo
	Preload(fields ...field.RelationField) IRechargelogUserDo
	FirstOrInit() (*model.RechargelogUser, error)
	FirstOrCreate() (*model.RechargelogUser, error)
	FindByPage(offset int, limit int) (result []*model.RechargelogUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRechargelogUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rechargelogUserDo) Debug() IRechargelogUserDo {
	return r.withDO(r.DO.Debug())
}

func (r rechargelogUserDo) WithContext(ctx context.Context) IRechargelogUserDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rechargelogUserDo) ReadDB() IRechargelogUserDo {
	return r.Clauses(dbresolver.Read)
}

func (r rechargelogUserDo) WriteDB() IRechargelogUserDo {
	return r.Clauses(dbresolver.Write)
}

func (r rechargelogUserDo) Session(config *gorm.Session) IRechargelogUserDo {
	return r.withDO(r.DO.Session(config))
}

func (r rechargelogUserDo) Clauses(conds ...clause.Expression) IRechargelogUserDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rechargelogUserDo) Returning(value interface{}, columns ...string) IRechargelogUserDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rechargelogUserDo) Not(conds ...gen.Condition) IRechargelogUserDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rechargelogUserDo) Or(conds ...gen.Condition) IRechargelogUserDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rechargelogUserDo) Select(conds ...field.Expr) IRechargelogUserDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rechargelogUserDo) Where(conds ...gen.Condition) IRechargelogUserDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rechargelogUserDo) Order(conds ...field.Expr) IRechargelogUserDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rechargelogUserDo) Distinct(cols ...field.Expr) IRechargelogUserDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rechargelogUserDo) Omit(cols ...field.Expr) IRechargelogUserDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rechargelogUserDo) Join(table schema.Tabler, on ...field.Expr) IRechargelogUserDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rechargelogUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRechargelogUserDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rechargelogUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IRechargelogUserDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rechargelogUserDo) Group(cols ...field.Expr) IRechargelogUserDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rechargelogUserDo) Having(conds ...gen.Condition) IRechargelogUserDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rechargelogUserDo) Limit(limit int) IRechargelogUserDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rechargelogUserDo) Offset(offset int) IRechargelogUserDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rechargelogUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargelogUserDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rechargelogUserDo) Unscoped() IRechargelogUserDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rechargelogUserDo) Create(values ...*model.RechargelogUser) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rechargelogUserDo) CreateInBatches(values []*model.RechargelogUser, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rechargelogUserDo) Save(values ...*model.RechargelogUser) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rechargelogUserDo) First() (*model.RechargelogUser, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogUser), nil
	}
}

func (r rechargelogUserDo) Take() (*model.RechargelogUser, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogUser), nil
	}
}

func (r rechargelogUserDo) Last() (*model.RechargelogUser, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogUser), nil
	}
}

func (r rechargelogUserDo) Find() ([]*model.RechargelogUser, error) {
	result, err := r.DO.Find()
	return result.([]*model.RechargelogUser), err
}

func (r rechargelogUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RechargelogUser, err error) {
	buf := make([]*model.RechargelogUser, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rechargelogUserDo) FindInBatches(result *[]*model.RechargelogUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rechargelogUserDo) Attrs(attrs ...field.AssignExpr) IRechargelogUserDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rechargelogUserDo) Assign(attrs ...field.AssignExpr) IRechargelogUserDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rechargelogUserDo) Joins(fields ...field.RelationField) IRechargelogUserDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rechargelogUserDo) Preload(fields ...field.RelationField) IRechargelogUserDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rechargelogUserDo) FirstOrInit() (*model.RechargelogUser, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogUser), nil
	}
}

func (r rechargelogUserDo) FirstOrCreate() (*model.RechargelogUser, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargelogUser), nil
	}
}

func (r rechargelogUserDo) FindByPage(offset int, limit int) (result []*model.RechargelogUser, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rechargelogUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rechargelogUserDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rechargelogUserDo) Delete(models ...*model.RechargelogUser) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rechargelogUserDo) withDO(do gen.Dao) *rechargelogUserDo {
	r.DO = *do.(*gen.DO)
	return r
}
