// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package la_ba

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLotterylog5101(db *gorm.DB, opts ...gen.DOOption) lotterylog5101 {
	_lotterylog5101 := lotterylog5101{}

	_lotterylog5101.lotterylog5101Do.UseDB(db, opts...)
	_lotterylog5101.lotterylog5101Do.UseModel(&model.Lotterylog5101{})

	tableName := _lotterylog5101.lotterylog5101Do.TableName()
	_lotterylog5101.ALL = field.NewAsterisk(tableName)
	_lotterylog5101.ID = field.NewInt32(tableName, "id")
	_lotterylog5101.Userid = field.NewInt32(tableName, "userid")
	_lotterylog5101.Bet = field.NewInt32(tableName, "bet")
	_lotterylog5101.LineS = field.NewInt32(tableName, "line_s")
	_lotterylog5101.ScoreBefore = field.NewInt32(tableName, "score_before")
	_lotterylog5101.ScoreLinescore = field.NewInt32(tableName, "score_linescore")
	_lotterylog5101.ScoreWin = field.NewInt32(tableName, "score_win")
	_lotterylog5101.ScoreCurrent = field.NewInt32(tableName, "score_current")
	_lotterylog5101.FreeCountBefore = field.NewInt32(tableName, "free_count_before")
	_lotterylog5101.FreeCountWin = field.NewInt32(tableName, "free_count_win")
	_lotterylog5101.FreeCountCurrent = field.NewInt32(tableName, "free_count_current")
	_lotterylog5101.ResultArray = field.NewString(tableName, "result_array")
	_lotterylog5101.LotteryTime = field.NewTime(tableName, "lotteryTime")
	_lotterylog5101.Mark = field.NewBool(tableName, "mark")

	_lotterylog5101.fillFieldMap()

	return _lotterylog5101
}

type lotterylog5101 struct {
	lotterylog5101Do

	ALL              field.Asterisk
	ID               field.Int32
	Userid           field.Int32
	Bet              field.Int32
	LineS            field.Int32
	ScoreBefore      field.Int32
	ScoreLinescore   field.Int32
	ScoreWin         field.Int32
	ScoreCurrent     field.Int32
	FreeCountBefore  field.Int32
	FreeCountWin     field.Int32
	FreeCountCurrent field.Int32
	ResultArray      field.String
	LotteryTime      field.Time
	Mark             field.Bool

	fieldMap map[string]field.Expr
}

func (l lotterylog5101) Table(newTableName string) *lotterylog5101 {
	l.lotterylog5101Do.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lotterylog5101) As(alias string) *lotterylog5101 {
	l.lotterylog5101Do.DO = *(l.lotterylog5101Do.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lotterylog5101) updateTableName(table string) *lotterylog5101 {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Userid = field.NewInt32(table, "userid")
	l.Bet = field.NewInt32(table, "bet")
	l.LineS = field.NewInt32(table, "line_s")
	l.ScoreBefore = field.NewInt32(table, "score_before")
	l.ScoreLinescore = field.NewInt32(table, "score_linescore")
	l.ScoreWin = field.NewInt32(table, "score_win")
	l.ScoreCurrent = field.NewInt32(table, "score_current")
	l.FreeCountBefore = field.NewInt32(table, "free_count_before")
	l.FreeCountWin = field.NewInt32(table, "free_count_win")
	l.FreeCountCurrent = field.NewInt32(table, "free_count_current")
	l.ResultArray = field.NewString(table, "result_array")
	l.LotteryTime = field.NewTime(table, "lotteryTime")
	l.Mark = field.NewBool(table, "mark")

	l.fillFieldMap()

	return l
}

func (l *lotterylog5101) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lotterylog5101) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["id"] = l.ID
	l.fieldMap["userid"] = l.Userid
	l.fieldMap["bet"] = l.Bet
	l.fieldMap["line_s"] = l.LineS
	l.fieldMap["score_before"] = l.ScoreBefore
	l.fieldMap["score_linescore"] = l.ScoreLinescore
	l.fieldMap["score_win"] = l.ScoreWin
	l.fieldMap["score_current"] = l.ScoreCurrent
	l.fieldMap["free_count_before"] = l.FreeCountBefore
	l.fieldMap["free_count_win"] = l.FreeCountWin
	l.fieldMap["free_count_current"] = l.FreeCountCurrent
	l.fieldMap["result_array"] = l.ResultArray
	l.fieldMap["lotteryTime"] = l.LotteryTime
	l.fieldMap["mark"] = l.Mark
}

func (l lotterylog5101) clone(db *gorm.DB) lotterylog5101 {
	l.lotterylog5101Do.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lotterylog5101) replaceDB(db *gorm.DB) lotterylog5101 {
	l.lotterylog5101Do.ReplaceDB(db)
	return l
}

type lotterylog5101Do struct{ gen.DO }

type ILotterylog5101Do interface {
	gen.SubQuery
	Debug() ILotterylog5101Do
	WithContext(ctx context.Context) ILotterylog5101Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILotterylog5101Do
	WriteDB() ILotterylog5101Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILotterylog5101Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILotterylog5101Do
	Not(conds ...gen.Condition) ILotterylog5101Do
	Or(conds ...gen.Condition) ILotterylog5101Do
	Select(conds ...field.Expr) ILotterylog5101Do
	Where(conds ...gen.Condition) ILotterylog5101Do
	Order(conds ...field.Expr) ILotterylog5101Do
	Distinct(cols ...field.Expr) ILotterylog5101Do
	Omit(cols ...field.Expr) ILotterylog5101Do
	Join(table schema.Tabler, on ...field.Expr) ILotterylog5101Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog5101Do
	RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog5101Do
	Group(cols ...field.Expr) ILotterylog5101Do
	Having(conds ...gen.Condition) ILotterylog5101Do
	Limit(limit int) ILotterylog5101Do
	Offset(offset int) ILotterylog5101Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog5101Do
	Unscoped() ILotterylog5101Do
	Create(values ...*model.Lotterylog5101) error
	CreateInBatches(values []*model.Lotterylog5101, batchSize int) error
	Save(values ...*model.Lotterylog5101) error
	First() (*model.Lotterylog5101, error)
	Take() (*model.Lotterylog5101, error)
	Last() (*model.Lotterylog5101, error)
	Find() ([]*model.Lotterylog5101, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog5101, err error)
	FindInBatches(result *[]*model.Lotterylog5101, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lotterylog5101) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILotterylog5101Do
	Assign(attrs ...field.AssignExpr) ILotterylog5101Do
	Joins(fields ...field.RelationField) ILotterylog5101Do
	Preload(fields ...field.RelationField) ILotterylog5101Do
	FirstOrInit() (*model.Lotterylog5101, error)
	FirstOrCreate() (*model.Lotterylog5101, error)
	FindByPage(offset int, limit int) (result []*model.Lotterylog5101, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILotterylog5101Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lotterylog5101Do) Debug() ILotterylog5101Do {
	return l.withDO(l.DO.Debug())
}

func (l lotterylog5101Do) WithContext(ctx context.Context) ILotterylog5101Do {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lotterylog5101Do) ReadDB() ILotterylog5101Do {
	return l.Clauses(dbresolver.Read)
}

func (l lotterylog5101Do) WriteDB() ILotterylog5101Do {
	return l.Clauses(dbresolver.Write)
}

func (l lotterylog5101Do) Session(config *gorm.Session) ILotterylog5101Do {
	return l.withDO(l.DO.Session(config))
}

func (l lotterylog5101Do) Clauses(conds ...clause.Expression) ILotterylog5101Do {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lotterylog5101Do) Returning(value interface{}, columns ...string) ILotterylog5101Do {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lotterylog5101Do) Not(conds ...gen.Condition) ILotterylog5101Do {
	return l.withDO(l.DO.Not(conds...))
}

func (l lotterylog5101Do) Or(conds ...gen.Condition) ILotterylog5101Do {
	return l.withDO(l.DO.Or(conds...))
}

func (l lotterylog5101Do) Select(conds ...field.Expr) ILotterylog5101Do {
	return l.withDO(l.DO.Select(conds...))
}

func (l lotterylog5101Do) Where(conds ...gen.Condition) ILotterylog5101Do {
	return l.withDO(l.DO.Where(conds...))
}

func (l lotterylog5101Do) Order(conds ...field.Expr) ILotterylog5101Do {
	return l.withDO(l.DO.Order(conds...))
}

func (l lotterylog5101Do) Distinct(cols ...field.Expr) ILotterylog5101Do {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lotterylog5101Do) Omit(cols ...field.Expr) ILotterylog5101Do {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lotterylog5101Do) Join(table schema.Tabler, on ...field.Expr) ILotterylog5101Do {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lotterylog5101Do) LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylog5101Do {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lotterylog5101Do) RightJoin(table schema.Tabler, on ...field.Expr) ILotterylog5101Do {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lotterylog5101Do) Group(cols ...field.Expr) ILotterylog5101Do {
	return l.withDO(l.DO.Group(cols...))
}

func (l lotterylog5101Do) Having(conds ...gen.Condition) ILotterylog5101Do {
	return l.withDO(l.DO.Having(conds...))
}

func (l lotterylog5101Do) Limit(limit int) ILotterylog5101Do {
	return l.withDO(l.DO.Limit(limit))
}

func (l lotterylog5101Do) Offset(offset int) ILotterylog5101Do {
	return l.withDO(l.DO.Offset(offset))
}

func (l lotterylog5101Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylog5101Do {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lotterylog5101Do) Unscoped() ILotterylog5101Do {
	return l.withDO(l.DO.Unscoped())
}

func (l lotterylog5101Do) Create(values ...*model.Lotterylog5101) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lotterylog5101Do) CreateInBatches(values []*model.Lotterylog5101, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lotterylog5101Do) Save(values ...*model.Lotterylog5101) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lotterylog5101Do) First() (*model.Lotterylog5101, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog5101), nil
	}
}

func (l lotterylog5101Do) Take() (*model.Lotterylog5101, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog5101), nil
	}
}

func (l lotterylog5101Do) Last() (*model.Lotterylog5101, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog5101), nil
	}
}

func (l lotterylog5101Do) Find() ([]*model.Lotterylog5101, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lotterylog5101), err
}

func (l lotterylog5101Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog5101, err error) {
	buf := make([]*model.Lotterylog5101, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lotterylog5101Do) FindInBatches(result *[]*model.Lotterylog5101, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lotterylog5101Do) Attrs(attrs ...field.AssignExpr) ILotterylog5101Do {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lotterylog5101Do) Assign(attrs ...field.AssignExpr) ILotterylog5101Do {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lotterylog5101Do) Joins(fields ...field.RelationField) ILotterylog5101Do {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lotterylog5101Do) Preload(fields ...field.RelationField) ILotterylog5101Do {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lotterylog5101Do) FirstOrInit() (*model.Lotterylog5101, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog5101), nil
	}
}

func (l lotterylog5101Do) FirstOrCreate() (*model.Lotterylog5101, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog5101), nil
	}
}

func (l lotterylog5101Do) FindByPage(offset int, limit int) (result []*model.Lotterylog5101, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lotterylog5101Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lotterylog5101Do) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lotterylog5101Do) Delete(models ...*model.Lotterylog5101) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lotterylog5101Do) withDO(do gen.Dao) *lotterylog5101Do {
	l.DO = *do.(*gen.DO)
	return l
}
