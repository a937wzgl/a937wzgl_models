// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package la_ba

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/a937wzgl/a937wzgl_models/models/model"
)

func newLotterylog(db *gorm.DB, opts ...gen.DOOption) lotterylog {
	_lotterylog := lotterylog{}

	_lotterylog.lotterylogDo.UseDB(db, opts...)
	_lotterylog.lotterylogDo.UseModel(&model.Lotterylog{})

	tableName := _lotterylog.lotterylogDo.TableName()
	_lotterylog.ALL = field.NewAsterisk(tableName)
	_lotterylog.ID = field.NewInt32(tableName, "id")
	_lotterylog.Userid = field.NewInt32(tableName, "userid")
	_lotterylog.Bet = field.NewInt32(tableName, "bet")
	_lotterylog.LineS = field.NewInt32(tableName, "line_s")
	_lotterylog.ScoreBefore = field.NewInt32(tableName, "score_before")
	_lotterylog.ScoreLinescore = field.NewInt32(tableName, "score_linescore")
	_lotterylog.ScoreWin = field.NewInt32(tableName, "score_win")
	_lotterylog.ScoreCurrent = field.NewInt32(tableName, "score_current")
	_lotterylog.FreeCountBefore = field.NewInt32(tableName, "free_count_before")
	_lotterylog.FreeCountWin = field.NewInt32(tableName, "free_count_win")
	_lotterylog.FreeCountCurrent = field.NewInt32(tableName, "free_count_current")
	_lotterylog.ResultArray = field.NewString(tableName, "result_array")
	_lotterylog.LotteryTime = field.NewTime(tableName, "lotteryTime")
	_lotterylog.Mark = field.NewBool(tableName, "mark")

	_lotterylog.fillFieldMap()

	return _lotterylog
}

type lotterylog struct {
	lotterylogDo

	ALL              field.Asterisk
	ID               field.Int32
	Userid           field.Int32
	Bet              field.Int32
	LineS            field.Int32
	ScoreBefore      field.Int32
	ScoreLinescore   field.Int32
	ScoreWin         field.Int32
	ScoreCurrent     field.Int32
	FreeCountBefore  field.Int32
	FreeCountWin     field.Int32
	FreeCountCurrent field.Int32
	ResultArray      field.String
	LotteryTime      field.Time
	Mark             field.Bool

	fieldMap map[string]field.Expr
}

func (l lotterylog) Table(newTableName string) *lotterylog {
	l.lotterylogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lotterylog) As(alias string) *lotterylog {
	l.lotterylogDo.DO = *(l.lotterylogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lotterylog) updateTableName(table string) *lotterylog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Userid = field.NewInt32(table, "userid")
	l.Bet = field.NewInt32(table, "bet")
	l.LineS = field.NewInt32(table, "line_s")
	l.ScoreBefore = field.NewInt32(table, "score_before")
	l.ScoreLinescore = field.NewInt32(table, "score_linescore")
	l.ScoreWin = field.NewInt32(table, "score_win")
	l.ScoreCurrent = field.NewInt32(table, "score_current")
	l.FreeCountBefore = field.NewInt32(table, "free_count_before")
	l.FreeCountWin = field.NewInt32(table, "free_count_win")
	l.FreeCountCurrent = field.NewInt32(table, "free_count_current")
	l.ResultArray = field.NewString(table, "result_array")
	l.LotteryTime = field.NewTime(table, "lotteryTime")
	l.Mark = field.NewBool(table, "mark")

	l.fillFieldMap()

	return l
}

func (l *lotterylog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lotterylog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["id"] = l.ID
	l.fieldMap["userid"] = l.Userid
	l.fieldMap["bet"] = l.Bet
	l.fieldMap["line_s"] = l.LineS
	l.fieldMap["score_before"] = l.ScoreBefore
	l.fieldMap["score_linescore"] = l.ScoreLinescore
	l.fieldMap["score_win"] = l.ScoreWin
	l.fieldMap["score_current"] = l.ScoreCurrent
	l.fieldMap["free_count_before"] = l.FreeCountBefore
	l.fieldMap["free_count_win"] = l.FreeCountWin
	l.fieldMap["free_count_current"] = l.FreeCountCurrent
	l.fieldMap["result_array"] = l.ResultArray
	l.fieldMap["lotteryTime"] = l.LotteryTime
	l.fieldMap["mark"] = l.Mark
}

func (l lotterylog) clone(db *gorm.DB) lotterylog {
	l.lotterylogDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lotterylog) replaceDB(db *gorm.DB) lotterylog {
	l.lotterylogDo.ReplaceDB(db)
	return l
}

type lotterylogDo struct{ gen.DO }

type ILotterylogDo interface {
	gen.SubQuery
	Debug() ILotterylogDo
	WithContext(ctx context.Context) ILotterylogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILotterylogDo
	WriteDB() ILotterylogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILotterylogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILotterylogDo
	Not(conds ...gen.Condition) ILotterylogDo
	Or(conds ...gen.Condition) ILotterylogDo
	Select(conds ...field.Expr) ILotterylogDo
	Where(conds ...gen.Condition) ILotterylogDo
	Order(conds ...field.Expr) ILotterylogDo
	Distinct(cols ...field.Expr) ILotterylogDo
	Omit(cols ...field.Expr) ILotterylogDo
	Join(table schema.Tabler, on ...field.Expr) ILotterylogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILotterylogDo
	Group(cols ...field.Expr) ILotterylogDo
	Having(conds ...gen.Condition) ILotterylogDo
	Limit(limit int) ILotterylogDo
	Offset(offset int) ILotterylogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylogDo
	Unscoped() ILotterylogDo
	Create(values ...*model.Lotterylog) error
	CreateInBatches(values []*model.Lotterylog, batchSize int) error
	Save(values ...*model.Lotterylog) error
	First() (*model.Lotterylog, error)
	Take() (*model.Lotterylog, error)
	Last() (*model.Lotterylog, error)
	Find() ([]*model.Lotterylog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog, err error)
	FindInBatches(result *[]*model.Lotterylog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lotterylog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILotterylogDo
	Assign(attrs ...field.AssignExpr) ILotterylogDo
	Joins(fields ...field.RelationField) ILotterylogDo
	Preload(fields ...field.RelationField) ILotterylogDo
	FirstOrInit() (*model.Lotterylog, error)
	FirstOrCreate() (*model.Lotterylog, error)
	FindByPage(offset int, limit int) (result []*model.Lotterylog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILotterylogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lotterylogDo) Debug() ILotterylogDo {
	return l.withDO(l.DO.Debug())
}

func (l lotterylogDo) WithContext(ctx context.Context) ILotterylogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lotterylogDo) ReadDB() ILotterylogDo {
	return l.Clauses(dbresolver.Read)
}

func (l lotterylogDo) WriteDB() ILotterylogDo {
	return l.Clauses(dbresolver.Write)
}

func (l lotterylogDo) Session(config *gorm.Session) ILotterylogDo {
	return l.withDO(l.DO.Session(config))
}

func (l lotterylogDo) Clauses(conds ...clause.Expression) ILotterylogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lotterylogDo) Returning(value interface{}, columns ...string) ILotterylogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lotterylogDo) Not(conds ...gen.Condition) ILotterylogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lotterylogDo) Or(conds ...gen.Condition) ILotterylogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lotterylogDo) Select(conds ...field.Expr) ILotterylogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lotterylogDo) Where(conds ...gen.Condition) ILotterylogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lotterylogDo) Order(conds ...field.Expr) ILotterylogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lotterylogDo) Distinct(cols ...field.Expr) ILotterylogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lotterylogDo) Omit(cols ...field.Expr) ILotterylogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lotterylogDo) Join(table schema.Tabler, on ...field.Expr) ILotterylogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lotterylogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILotterylogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lotterylogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILotterylogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lotterylogDo) Group(cols ...field.Expr) ILotterylogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lotterylogDo) Having(conds ...gen.Condition) ILotterylogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lotterylogDo) Limit(limit int) ILotterylogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lotterylogDo) Offset(offset int) ILotterylogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lotterylogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILotterylogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lotterylogDo) Unscoped() ILotterylogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lotterylogDo) Create(values ...*model.Lotterylog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lotterylogDo) CreateInBatches(values []*model.Lotterylog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lotterylogDo) Save(values ...*model.Lotterylog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lotterylogDo) First() (*model.Lotterylog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog), nil
	}
}

func (l lotterylogDo) Take() (*model.Lotterylog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog), nil
	}
}

func (l lotterylogDo) Last() (*model.Lotterylog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog), nil
	}
}

func (l lotterylogDo) Find() ([]*model.Lotterylog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lotterylog), err
}

func (l lotterylogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lotterylog, err error) {
	buf := make([]*model.Lotterylog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lotterylogDo) FindInBatches(result *[]*model.Lotterylog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lotterylogDo) Attrs(attrs ...field.AssignExpr) ILotterylogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lotterylogDo) Assign(attrs ...field.AssignExpr) ILotterylogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lotterylogDo) Joins(fields ...field.RelationField) ILotterylogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lotterylogDo) Preload(fields ...field.RelationField) ILotterylogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lotterylogDo) FirstOrInit() (*model.Lotterylog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog), nil
	}
}

func (l lotterylogDo) FirstOrCreate() (*model.Lotterylog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lotterylog), nil
	}
}

func (l lotterylogDo) FindByPage(offset int, limit int) (result []*model.Lotterylog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lotterylogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lotterylogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lotterylogDo) Delete(models ...*model.Lotterylog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lotterylogDo) withDO(do gen.Dao) *lotterylogDo {
	l.DO = *do.(*gen.DO)
	return l
}
